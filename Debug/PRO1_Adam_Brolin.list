
PRO1_Adam_Brolin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08008230  08008230  00009230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084bc  080084bc  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  080084bc  080084bc  000094bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084c4  080084c4  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084c4  080084c4  000094c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084c8  080084c8  000094c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080084cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ffc  20000068  08008534  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003064  08008534  0000b064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dc1c  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ff5  00000000  00000000  00027cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  0002bcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001374  00000000  00000000  0002d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a35  00000000  00000000  0002e934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfeb  00000000  00000000  00058369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff156  00000000  00000000  00075354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001744aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006be0  00000000  00000000  001744f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0017b0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008218 	.word	0x08008218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08008218 	.word	0x08008218

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  state.t_north = green;
 80004c6:	4b45      	ldr	r3, [pc, #276]	@ (80005dc <MX_FREERTOS_Init+0x11c>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	701a      	strb	r2, [r3, #0]
  state.t_south = green;
 80004cc:	4b43      	ldr	r3, [pc, #268]	@ (80005dc <MX_FREERTOS_Init+0x11c>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	705a      	strb	r2, [r3, #1]
  state.t_east = red;
 80004d2:	4b42      	ldr	r3, [pc, #264]	@ (80005dc <MX_FREERTOS_Init+0x11c>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	70da      	strb	r2, [r3, #3]
  state.t_west = red;
 80004d8:	4b40      	ldr	r3, [pc, #256]	@ (80005dc <MX_FREERTOS_Init+0x11c>)
 80004da:	2200      	movs	r2, #0
 80004dc:	709a      	strb	r2, [r3, #2]
  state.p_north = red;
 80004de:	4b3f      	ldr	r3, [pc, #252]	@ (80005dc <MX_FREERTOS_Init+0x11c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	711a      	strb	r2, [r3, #4]
  state.p_west = red;
 80004e4:	4b3d      	ldr	r3, [pc, #244]	@ (80005dc <MX_FREERTOS_Init+0x11c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	715a      	strb	r2, [r3, #5]
  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80004ea:	483d      	ldr	r0, [pc, #244]	@ (80005e0 <MX_FREERTOS_Init+0x120>)
 80004ec:	f004 fb88 	bl	8004c00 <osMutexNew>
 80004f0:	4603      	mov	r3, r0
 80004f2:	4a3c      	ldr	r2, [pc, #240]	@ (80005e4 <MX_FREERTOS_Init+0x124>)
 80004f4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  stateMtx = xSemaphoreCreateMutex();
 80004f6:	2001      	movs	r0, #1
 80004f8:	f004 ff81 	bl	80053fe <xQueueCreateMutex>
 80004fc:	4603      	mov	r3, r0
 80004fe:	4a3a      	ldr	r2, [pc, #232]	@ (80005e8 <MX_FREERTOS_Init+0x128>)
 8000500:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queue_change_dir */
  queue_change_dirHandle = osMessageQueueNew (4, sizeof(direction_t), &queue_change_dir_attributes);
 8000502:	4a3a      	ldr	r2, [pc, #232]	@ (80005ec <MX_FREERTOS_Init+0x12c>)
 8000504:	2101      	movs	r1, #1
 8000506:	2004      	movs	r0, #4
 8000508:	f004 fc00 	bl	8004d0c <osMessageQueueNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a38      	ldr	r2, [pc, #224]	@ (80005f0 <MX_FREERTOS_Init+0x130>)
 8000510:	6013      	str	r3, [r2, #0]

  /* creation of queue_pedestrian_wait */
  queue_pedestrian_waitHandle = osMessageQueueNew (4, sizeof(direction_t), &queue_pedestrian_wait_attributes);
 8000512:	4a38      	ldr	r2, [pc, #224]	@ (80005f4 <MX_FREERTOS_Init+0x134>)
 8000514:	2101      	movs	r1, #1
 8000516:	2004      	movs	r0, #4
 8000518:	f004 fbf8 	bl	8004d0c <osMessageQueueNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a36      	ldr	r2, [pc, #216]	@ (80005f8 <MX_FREERTOS_Init+0x138>)
 8000520:	6013      	str	r3, [r2, #0]

  /* creation of queue_orange */
  queue_orangeHandle = osMessageQueueNew (4, sizeof(direction_t), &queue_orange_attributes);
 8000522:	4a36      	ldr	r2, [pc, #216]	@ (80005fc <MX_FREERTOS_Init+0x13c>)
 8000524:	2101      	movs	r1, #1
 8000526:	2004      	movs	r0, #4
 8000528:	f004 fbf0 	bl	8004d0c <osMessageQueueNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a34      	ldr	r2, [pc, #208]	@ (8000600 <MX_FREERTOS_Init+0x140>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of queue_east_west_input */
  queue_east_west_inputHandle = osMessageQueueNew (4, sizeof(uint8_t), &queue_east_west_input_attributes);
 8000532:	4a34      	ldr	r2, [pc, #208]	@ (8000604 <MX_FREERTOS_Init+0x144>)
 8000534:	2101      	movs	r1, #1
 8000536:	2004      	movs	r0, #4
 8000538:	f004 fbe8 	bl	8004d0c <osMessageQueueNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a32      	ldr	r2, [pc, #200]	@ (8000608 <MX_FREERTOS_Init+0x148>)
 8000540:	6013      	str	r3, [r2, #0]

  /* creation of queue_north_south_input */
  queue_north_south_inputHandle = osMessageQueueNew (4, sizeof(uint8_t), &queue_north_south_input_attributes);
 8000542:	4a32      	ldr	r2, [pc, #200]	@ (800060c <MX_FREERTOS_Init+0x14c>)
 8000544:	2101      	movs	r1, #1
 8000546:	2004      	movs	r0, #4
 8000548:	f004 fbe0 	bl	8004d0c <osMessageQueueNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a30      	ldr	r2, [pc, #192]	@ (8000610 <MX_FREERTOS_Init+0x150>)
 8000550:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ChangeDirection */
  ChangeDirectionHandle = osThreadNew(change_direction, NULL, &ChangeDirection_attributes);
 8000552:	4a30      	ldr	r2, [pc, #192]	@ (8000614 <MX_FREERTOS_Init+0x154>)
 8000554:	2100      	movs	r1, #0
 8000556:	4830      	ldr	r0, [pc, #192]	@ (8000618 <MX_FREERTOS_Init+0x158>)
 8000558:	f004 fac0 	bl	8004adc <osThreadNew>
 800055c:	4603      	mov	r3, r0
 800055e:	4a2f      	ldr	r2, [pc, #188]	@ (800061c <MX_FREERTOS_Init+0x15c>)
 8000560:	6013      	str	r3, [r2, #0]

  /* creation of ToogleBlueLight */
  ToogleBlueLightHandle = osThreadNew(toggle_blue_light, NULL, &ToogleBlueLight_attributes);
 8000562:	4a2f      	ldr	r2, [pc, #188]	@ (8000620 <MX_FREERTOS_Init+0x160>)
 8000564:	2100      	movs	r1, #0
 8000566:	482f      	ldr	r0, [pc, #188]	@ (8000624 <MX_FREERTOS_Init+0x164>)
 8000568:	f004 fab8 	bl	8004adc <osThreadNew>
 800056c:	4603      	mov	r3, r0
 800056e:	4a2e      	ldr	r2, [pc, #184]	@ (8000628 <MX_FREERTOS_Init+0x168>)
 8000570:	6013      	str	r3, [r2, #0]

  /* creation of Orange */
  OrangeHandle = osThreadNew(orange_transition, NULL, &Orange_attributes);
 8000572:	4a2e      	ldr	r2, [pc, #184]	@ (800062c <MX_FREERTOS_Init+0x16c>)
 8000574:	2100      	movs	r1, #0
 8000576:	482e      	ldr	r0, [pc, #184]	@ (8000630 <MX_FREERTOS_Init+0x170>)
 8000578:	f004 fab0 	bl	8004adc <osThreadNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a2d      	ldr	r2, [pc, #180]	@ (8000634 <MX_FREERTOS_Init+0x174>)
 8000580:	6013      	str	r3, [r2, #0]

  /* creation of PedestrianWait */
  PedestrianWaitHandle = osThreadNew(pedestrian_wait, NULL, &PedestrianWait_attributes);
 8000582:	4a2d      	ldr	r2, [pc, #180]	@ (8000638 <MX_FREERTOS_Init+0x178>)
 8000584:	2100      	movs	r1, #0
 8000586:	482d      	ldr	r0, [pc, #180]	@ (800063c <MX_FREERTOS_Init+0x17c>)
 8000588:	f004 faa8 	bl	8004adc <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a2c      	ldr	r2, [pc, #176]	@ (8000640 <MX_FREERTOS_Init+0x180>)
 8000590:	6013      	str	r3, [r2, #0]

  /* creation of RenderState */
  RenderStateHandle = osThreadNew(render_state, NULL, &RenderState_attributes);
 8000592:	4a2c      	ldr	r2, [pc, #176]	@ (8000644 <MX_FREERTOS_Init+0x184>)
 8000594:	2100      	movs	r1, #0
 8000596:	482c      	ldr	r0, [pc, #176]	@ (8000648 <MX_FREERTOS_Init+0x188>)
 8000598:	f004 faa0 	bl	8004adc <osThreadNew>
 800059c:	4603      	mov	r3, r0
 800059e:	4a2b      	ldr	r2, [pc, #172]	@ (800064c <MX_FREERTOS_Init+0x18c>)
 80005a0:	6013      	str	r3, [r2, #0]

  /* creation of CheckInput */
  CheckInputHandle = osThreadNew(check_input, NULL, &CheckInput_attributes);
 80005a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000650 <MX_FREERTOS_Init+0x190>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	482b      	ldr	r0, [pc, #172]	@ (8000654 <MX_FREERTOS_Init+0x194>)
 80005a8:	f004 fa98 	bl	8004adc <osThreadNew>
 80005ac:	4603      	mov	r3, r0
 80005ae:	4a2a      	ldr	r2, [pc, #168]	@ (8000658 <MX_FREERTOS_Init+0x198>)
 80005b0:	6013      	str	r3, [r2, #0]
  // Disable blinking for p_north and p_west

//xSemaphoreTake(okGoPedestrianNorthMtx, portMAX_DELAY);

// Allow inputs to be received
uint8_t input_goahead = 0b1;
 80005b2:	2301      	movs	r3, #1
 80005b4:	71fb      	strb	r3, [r7, #7]
osMessageQueuePut(queue_north_south_inputHandle, &input_goahead, 0, 0);
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <MX_FREERTOS_Init+0x150>)
 80005b8:	6818      	ldr	r0, [r3, #0]
 80005ba:	1df9      	adds	r1, r7, #7
 80005bc:	2300      	movs	r3, #0
 80005be:	2200      	movs	r2, #0
 80005c0:	f004 fc18 	bl	8004df4 <osMessageQueuePut>
osMessageQueuePut(queue_east_west_inputHandle, &input_goahead, 0, 0);
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_FREERTOS_Init+0x148>)
 80005c6:	6818      	ldr	r0, [r3, #0]
 80005c8:	1df9      	adds	r1, r7, #7
 80005ca:	2300      	movs	r3, #0
 80005cc:	2200      	movs	r2, #0
 80005ce:	f004 fc11 	bl	8004df4 <osMessageQueuePut>
	// test_program(&state);


  /* USER CODE END RTOS_EVENTS */

}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	20000084 	.word	0x20000084
 80005e0:	08008464 	.word	0x08008464
 80005e4:	200000bc 	.word	0x200000bc
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	080083ec 	.word	0x080083ec
 80005f0:	200000a8 	.word	0x200000a8
 80005f4:	08008404 	.word	0x08008404
 80005f8:	200000ac 	.word	0x200000ac
 80005fc:	0800841c 	.word	0x0800841c
 8000600:	200000b0 	.word	0x200000b0
 8000604:	08008434 	.word	0x08008434
 8000608:	200000b4 	.word	0x200000b4
 800060c:	0800844c 	.word	0x0800844c
 8000610:	200000b8 	.word	0x200000b8
 8000614:	08008314 	.word	0x08008314
 8000618:	0800065d 	.word	0x0800065d
 800061c:	20000090 	.word	0x20000090
 8000620:	08008338 	.word	0x08008338
 8000624:	080007fd 	.word	0x080007fd
 8000628:	20000094 	.word	0x20000094
 800062c:	0800835c 	.word	0x0800835c
 8000630:	0800086d 	.word	0x0800086d
 8000634:	20000098 	.word	0x20000098
 8000638:	08008380 	.word	0x08008380
 800063c:	08000955 	.word	0x08000955
 8000640:	2000009c 	.word	0x2000009c
 8000644:	080083a4 	.word	0x080083a4
 8000648:	08000ac9 	.word	0x08000ac9
 800064c:	200000a0 	.word	0x200000a0
 8000650:	080083c8 	.word	0x080083c8
 8000654:	08000b3d 	.word	0x08000b3d
 8000658:	200000a4 	.word	0x200000a4

0800065c <change_direction>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_change_direction */
void change_direction(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08a      	sub	sp, #40	@ 0x28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN change_direction */

  TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(PERIOD_CHANGE_DIRECTION); // ms to ticks
 8000664:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000668:	61fb      	str	r3, [r7, #28]
  // Initialize the xLastWakeTime variable with the current time.
  xLastWakeTime = xTaskGetTickCount();
 800066a:	f006 f825 	bl	80066b8 <xTaskGetTickCount>
 800066e:	4603      	mov	r3, r0
 8000670:	613b      	str	r3, [r7, #16]

  /* Infinite loop */
  for(;;)
  {
	// Indicating whether or not traffic lights should stop as is to allow crossing to finish
	uint8_t stop = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	// Check if any pedestrians want to cross;
	direction_t pedestrian;
	osStatus_t status = osMessageQueueGet(queue_change_dirHandle, &pedestrian, 0, 0);
 8000678:	4b59      	ldr	r3, [pc, #356]	@ (80007e0 <change_direction+0x184>)
 800067a:	6818      	ldr	r0, [r3, #0]
 800067c:	f107 010f 	add.w	r1, r7, #15
 8000680:	2300      	movs	r3, #0
 8000682:	2200      	movs	r2, #0
 8000684:	f004 fc16 	bl	8004eb4 <osMessageQueueGet>
 8000688:	61b8      	str	r0, [r7, #24]

	if(status == osOK){
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d11a      	bne.n	80006c6 <change_direction+0x6a>

		light_t *should_be_red;

		if(pedestrian == pnorth){
 8000690:	7bfb      	ldrb	r3, [r7, #15]
 8000692:	2b02      	cmp	r3, #2
 8000694:	d102      	bne.n	800069c <change_direction+0x40>
			should_be_red = &(state.t_north);
 8000696:	4b53      	ldr	r3, [pc, #332]	@ (80007e4 <change_direction+0x188>)
 8000698:	623b      	str	r3, [r7, #32]
 800069a:	e001      	b.n	80006a0 <change_direction+0x44>
		} else{
			should_be_red = &(state.t_west);
 800069c:	4b52      	ldr	r3, [pc, #328]	@ (80007e8 <change_direction+0x18c>)
 800069e:	623b      	str	r3, [r7, #32]
		}

		if(*should_be_red == red){
 80006a0:	6a3b      	ldr	r3, [r7, #32]
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d103      	bne.n	80006b0 <change_direction+0x54>
			// Keep current state of car lights until crossing finished
			stop = 0b01;
 80006a8:	2301      	movs	r3, #1
 80006aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80006ae:	e00a      	b.n	80006c6 <change_direction+0x6a>
		}
		else{
			// Try again next execution of task once directions had been switched
			stop = 0b10;
 80006b0:	2302      	movs	r3, #2
 80006b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			osMessageQueuePut(queue_change_dirHandle, &pedestrian, 0, 0);
 80006b6:	4b4a      	ldr	r3, [pc, #296]	@ (80007e0 <change_direction+0x184>)
 80006b8:	6818      	ldr	r0, [r3, #0]
 80006ba:	f107 010f 	add.w	r1, r7, #15
 80006be:	2300      	movs	r3, #0
 80006c0:	2200      	movs	r2, #0
 80006c2:	f004 fb97 	bl	8004df4 <osMessageQueuePut>
		}
	}

	uint8_t input = get_buttons();
 80006c6:	f000 fc99 	bl	8000ffc <get_buttons>
 80006ca:	4603      	mov	r3, r0
 80006cc:	75fb      	strb	r3, [r7, #23]
	xSemaphoreTake(stateMtx, portMAX_DELAY);
 80006ce:	4b47      	ldr	r3, [pc, #284]	@ (80007ec <change_direction+0x190>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 f946 	bl	8005968 <xQueueSemaphoreTake>

	if(stop & 0b01){
 80006dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006e0:	f003 0301 	and.w	r3, r3, #1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d01b      	beq.n	8000720 <change_direction+0xc4>
		xSemaphoreGive(stateMtx);
 80006e8:	4b40      	ldr	r3, [pc, #256]	@ (80007ec <change_direction+0x190>)
 80006ea:	6818      	ldr	r0, [r3, #0]
 80006ec:	2300      	movs	r3, #0
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	f004 feb7 	bl	8005464 <xQueueGenericSend>
		// pedestrian wants to cross
		direction_t pedestrian_go = ok;
 80006f6:	2305      	movs	r3, #5
 80006f8:	73bb      	strb	r3, [r7, #14]
		osMessageQueuePut(queue_pedestrian_waitHandle, &pedestrian_go, 0, portMAX_DELAY);
 80006fa:	4b3d      	ldr	r3, [pc, #244]	@ (80007f0 <change_direction+0x194>)
 80006fc:	6818      	ldr	r0, [r3, #0]
 80006fe:	f107 010e 	add.w	r1, r7, #14
 8000702:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000706:	2200      	movs	r2, #0
 8000708:	f004 fb74 	bl	8004df4 <osMessageQueuePut>

		// Wait until message is received signaling that crossing is done
		direction_t done;
		osMessageQueueGet(queue_change_dirHandle, &done, 0, portMAX_DELAY);
 800070c:	4b34      	ldr	r3, [pc, #208]	@ (80007e0 <change_direction+0x184>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	f107 010d 	add.w	r1, r7, #13
 8000714:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000718:	2200      	movs	r2, #0
 800071a:	f004 fbcb 	bl	8004eb4 <osMessageQueueGet>
 800071e:	e051      	b.n	80007c4 <change_direction+0x168>

	}
	else if((((input & (BTN_T_NORTH | BTN_T_SOUTH) &&  !(input & (BTN_T_EAST | BTN_T_WEST))) && state.t_north == green) ||
 8000720:	7dfb      	ldrb	r3, [r7, #23]
 8000722:	f003 0314 	and.w	r3, r3, #20
 8000726:	2b00      	cmp	r3, #0
 8000728:	d008      	beq.n	800073c <change_direction+0xe0>
 800072a:	7dfb      	ldrb	r3, [r7, #23]
 800072c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8000730:	2b00      	cmp	r3, #0
 8000732:	d103      	bne.n	800073c <change_direction+0xe0>
 8000734:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <change_direction+0x188>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d00d      	beq.n	8000758 <change_direction+0xfc>
			((input & (BTN_T_EAST | BTN_T_WEST) &&  !(input & (BTN_T_NORTH | BTN_T_SOUTH))) && state.t_west == green)) && !(stop & 0b10)){
 800073c:	7dfb      	ldrb	r3, [r7, #23]
 800073e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
	else if((((input & (BTN_T_NORTH | BTN_T_SOUTH) &&  !(input & (BTN_T_EAST | BTN_T_WEST))) && state.t_north == green) ||
 8000742:	2b00      	cmp	r3, #0
 8000744:	d00e      	beq.n	8000764 <change_direction+0x108>
			((input & (BTN_T_EAST | BTN_T_WEST) &&  !(input & (BTN_T_NORTH | BTN_T_SOUTH))) && state.t_west == green)) && !(stop & 0b10)){
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	f003 0314 	and.w	r3, r3, #20
 800074c:	2b00      	cmp	r3, #0
 800074e:	d109      	bne.n	8000764 <change_direction+0x108>
 8000750:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <change_direction+0x188>)
 8000752:	789b      	ldrb	r3, [r3, #2]
 8000754:	2b01      	cmp	r3, #1
 8000756:	d105      	bne.n	8000764 <change_direction+0x108>
 8000758:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800075c:	f003 0302 	and.w	r3, r3, #2
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02f      	beq.n	80007c4 <change_direction+0x168>
		// Switch lights to other direction since there is currently one of two things happening:
		// 		1. No cars are waiting and light switches back and fourth
		// 		2. Cars are waiting in both directions and light should switch back and fourth allowing all to pass
		direction_t from;
		direction_t to;
		if(state.t_north == green){
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <change_direction+0x188>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d104      	bne.n	8000776 <change_direction+0x11a>
			from = north_south;
 800076c:	2300      	movs	r3, #0
 800076e:	733b      	strb	r3, [r7, #12]
			to = east_west;
 8000770:	2301      	movs	r3, #1
 8000772:	72fb      	strb	r3, [r7, #11]
 8000774:	e003      	b.n	800077e <change_direction+0x122>
		}
		else{
			from = east_west;
 8000776:	2301      	movs	r3, #1
 8000778:	733b      	strb	r3, [r7, #12]
			to = north_south;
 800077a:	2300      	movs	r3, #0
 800077c:	72fb      	strb	r3, [r7, #11]
		}
		xSemaphoreGive(stateMtx);
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <change_direction+0x190>)
 8000780:	6818      	ldr	r0, [r3, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	f004 fe6c 	bl	8005464 <xQueueGenericSend>

		// Turn other direction red
		osMessageQueuePut(queue_orangeHandle, &from, 0, 0);
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <change_direction+0x198>)
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	f107 010c 	add.w	r1, r7, #12
 8000794:	2300      	movs	r3, #0
 8000796:	2200      	movs	r2, #0
 8000798:	f004 fb2c 	bl	8004df4 <osMessageQueuePut>
		vTaskDelay(orangeDelay + 1000); // One extra second so that both are red for 1 second
 800079c:	4b16      	ldr	r3, [pc, #88]	@ (80007f8 <change_direction+0x19c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80007a4:	4618      	mov	r0, r3
 80007a6:	f005 fe35 	bl	8006414 <vTaskDelay>

		// Turn desired direction green
		osMessageQueuePut(queue_orangeHandle, &to, 0, 0);
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <change_direction+0x198>)
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	f107 010b 	add.w	r1, r7, #11
 80007b2:	2300      	movs	r3, #0
 80007b4:	2200      	movs	r2, #0
 80007b6:	f004 fb1d 	bl	8004df4 <osMessageQueuePut>
		vTaskDelay(orangeDelay);
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <change_direction+0x19c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f005 fe28 	bl	8006414 <vTaskDelay>
	}

	// Give back mutex if if-statement was not used
	xSemaphoreGive(stateMtx);
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <change_direction+0x190>)
 80007c6:	6818      	ldr	r0, [r3, #0]
 80007c8:	2300      	movs	r3, #0
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	f004 fe49 	bl	8005464 <xQueueGenericSend>

	  vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80007d2:	f107 0310 	add.w	r3, r7, #16
 80007d6:	69f9      	ldr	r1, [r7, #28]
 80007d8:	4618      	mov	r0, r3
 80007da:	f005 fd9b 	bl	8006314 <vTaskDelayUntil>
  {
 80007de:	e748      	b.n	8000672 <change_direction+0x16>
 80007e0:	200000a8 	.word	0x200000a8
 80007e4:	20000084 	.word	0x20000084
 80007e8:	20000086 	.word	0x20000086
 80007ec:	2000008c 	.word	0x2000008c
 80007f0:	200000ac 	.word	0x200000ac
 80007f4:	200000b0 	.word	0x200000b0
 80007f8:	20000004 	.word	0x20000004

080007fc <toggle_blue_light>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_toggle_blue_light */
void toggle_blue_light(void *argument)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN toggle_blue_light */
  TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(PERIOD_BLUE_LIGHT); // ms to ticks
 8000804:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000808:	60fb      	str	r3, [r7, #12]
  // Initialize the xLastWakeTime variable with the current time.
  xLastWakeTime = xTaskGetTickCount();
 800080a:	f005 ff55 	bl	80066b8 <xTaskGetTickCount>
 800080e:	4603      	mov	r3, r0
 8000810:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for (;;) {

	 xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <toggle_blue_light+0x5c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800081a:	4618      	mov	r0, r3
 800081c:	f005 f8a4 	bl	8005968 <xQueueSemaphoreTake>

	 if(north_p_waiting){
 8000820:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <toggle_blue_light+0x60>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <toggle_blue_light+0x32>
		 toggle_blue(&(state.p_north));
 8000828:	480d      	ldr	r0, [pc, #52]	@ (8000860 <toggle_blue_light+0x64>)
 800082a:	f000 fc3d 	bl	80010a8 <toggle_blue>
	 }
	 if(west_p_waiting){
 800082e:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <toggle_blue_light+0x68>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d002      	beq.n	800083c <toggle_blue_light+0x40>
		 toggle_blue(&(state.p_west));
 8000836:	480c      	ldr	r0, [pc, #48]	@ (8000868 <toggle_blue_light+0x6c>)
 8000838:	f000 fc36 	bl	80010a8 <toggle_blue>
	 }

	 xSemaphoreGive(stateMtx);
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <toggle_blue_light+0x5c>)
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	2300      	movs	r3, #0
 8000842:	2200      	movs	r2, #0
 8000844:	2100      	movs	r1, #0
 8000846:	f004 fe0d 	bl	8005464 <xQueueGenericSend>


    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800084a:	f107 0308 	add.w	r3, r7, #8
 800084e:	68f9      	ldr	r1, [r7, #12]
 8000850:	4618      	mov	r0, r3
 8000852:	f005 fd5f 	bl	8006314 <vTaskDelayUntil>
	 xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000856:	e7dc      	b.n	8000812 <toggle_blue_light+0x16>
 8000858:	2000008c 	.word	0x2000008c
 800085c:	2000008a 	.word	0x2000008a
 8000860:	20000088 	.word	0x20000088
 8000864:	2000008b 	.word	0x2000008b
 8000868:	20000089 	.word	0x20000089

0800086c <orange_transition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_orange_transition */
void orange_transition(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	@ 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN orange_transition */
  TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(PERIOD_ORANGE); // ms to ticks
 8000874:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000878:	61bb      	str	r3, [r7, #24]
  // Initialize the xLastWakeTime variable with the current time.
  xLastWakeTime = xTaskGetTickCount();
 800087a:	f005 ff1d 	bl	80066b8 <xTaskGetTickCount>
 800087e:	4603      	mov	r3, r0
 8000880:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {

	direction_t direction_to_change;
	osStatus_t status = osMessageQueueGet(queue_orangeHandle, &direction_to_change, 0, 0);
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <orange_transition+0xcc>)
 8000884:	6818      	ldr	r0, [r3, #0]
 8000886:	f107 010b 	add.w	r1, r7, #11
 800088a:	2300      	movs	r3, #0
 800088c:	2200      	movs	r2, #0
 800088e:	f004 fb11 	bl	8004eb4 <osMessageQueueGet>
 8000892:	6178      	str	r0, [r7, #20]

	if(status == osOK){
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d147      	bne.n	800092a <orange_transition+0xbe>
		xSemaphoreTake(stateMtx, portMAX_DELAY);
 800089a:	4b28      	ldr	r3, [pc, #160]	@ (800093c <orange_transition+0xd0>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80008a2:	4618      	mov	r0, r3
 80008a4:	f005 f860 	bl	8005968 <xQueueSemaphoreTake>

		light_t *light1;
		light_t *light2;

		// set what direction to change
		switch(direction_to_change){
 80008a8:	7afb      	ldrb	r3, [r7, #11]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d002      	beq.n	80008b4 <orange_transition+0x48>
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d005      	beq.n	80008be <orange_transition+0x52>
			case east_west:
				light1 = &(state.t_east);
				light2 = &(state.t_west);
				break;
			default:
				break;
 80008b2:	e009      	b.n	80008c8 <orange_transition+0x5c>
				light1 = &(state.t_north);
 80008b4:	4b22      	ldr	r3, [pc, #136]	@ (8000940 <orange_transition+0xd4>)
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
				light2 = &(state.t_south);
 80008b8:	4b22      	ldr	r3, [pc, #136]	@ (8000944 <orange_transition+0xd8>)
 80008ba:	623b      	str	r3, [r7, #32]
				break;
 80008bc:	e004      	b.n	80008c8 <orange_transition+0x5c>
				light1 = &(state.t_east);
 80008be:	4b22      	ldr	r3, [pc, #136]	@ (8000948 <orange_transition+0xdc>)
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
				light2 = &(state.t_west);
 80008c2:	4b22      	ldr	r3, [pc, #136]	@ (800094c <orange_transition+0xe0>)
 80008c4:	623b      	str	r3, [r7, #32]
				break;
 80008c6:	bf00      	nop
		}

		light_t prev = *light1;
 80008c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	74fb      	strb	r3, [r7, #19]
		light_t next;

		// If current lights should transition to green or to red
		if(prev == green)
 80008ce:	7cfb      	ldrb	r3, [r7, #19]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d102      	bne.n	80008da <orange_transition+0x6e>
			next = red;
 80008d4:	2300      	movs	r3, #0
 80008d6:	77fb      	strb	r3, [r7, #31]
 80008d8:	e001      	b.n	80008de <orange_transition+0x72>
		else
			next = green;
 80008da:	2301      	movs	r3, #1
 80008dc:	77fb      	strb	r3, [r7, #31]

		*light1 = yellow;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	2202      	movs	r2, #2
 80008e2:	701a      	strb	r2, [r3, #0]
		*light2 = yellow;
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	2202      	movs	r2, #2
 80008e8:	701a      	strb	r2, [r3, #0]

		xSemaphoreGive(stateMtx);
 80008ea:	4b14      	ldr	r3, [pc, #80]	@ (800093c <orange_transition+0xd0>)
 80008ec:	6818      	ldr	r0, [r3, #0]
 80008ee:	2300      	movs	r3, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	f004 fdb6 	bl	8005464 <xQueueGenericSend>
		vTaskDelay(orangeDelay);
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <orange_transition+0xe4>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f005 fd89 	bl	8006414 <vTaskDelay>
		xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000902:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <orange_transition+0xd0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800090a:	4618      	mov	r0, r3
 800090c:	f005 f82c 	bl	8005968 <xQueueSemaphoreTake>

		*light1 = next;
 8000910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000912:	7ffa      	ldrb	r2, [r7, #31]
 8000914:	701a      	strb	r2, [r3, #0]
		*light2 = next;
 8000916:	6a3b      	ldr	r3, [r7, #32]
 8000918:	7ffa      	ldrb	r2, [r7, #31]
 800091a:	701a      	strb	r2, [r3, #0]

		xSemaphoreGive(stateMtx);
 800091c:	4b07      	ldr	r3, [pc, #28]	@ (800093c <orange_transition+0xd0>)
 800091e:	6818      	ldr	r0, [r3, #0]
 8000920:	2300      	movs	r3, #0
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	f004 fd9d 	bl	8005464 <xQueueGenericSend>
	}

	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800092a:	f107 030c 	add.w	r3, r7, #12
 800092e:	69b9      	ldr	r1, [r7, #24]
 8000930:	4618      	mov	r0, r3
 8000932:	f005 fcef 	bl	8006314 <vTaskDelayUntil>
  {
 8000936:	e7a4      	b.n	8000882 <orange_transition+0x16>
 8000938:	200000b0 	.word	0x200000b0
 800093c:	2000008c 	.word	0x2000008c
 8000940:	20000084 	.word	0x20000084
 8000944:	20000085 	.word	0x20000085
 8000948:	20000087 	.word	0x20000087
 800094c:	20000086 	.word	0x20000086
 8000950:	20000004 	.word	0x20000004

08000954 <pedestrian_wait>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pedestrian_wait */
void pedestrian_wait(void *argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pedestrian_wait */
  TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(PERIOD_PEDESTRIAN_WAIT); // ms to ticks
 800095c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000960:	617b      	str	r3, [r7, #20]
  // Initialize the xLastWakeTime variable with the current time.
  xLastWakeTime = xTaskGetTickCount();
 8000962:	f005 fea9 	bl	80066b8 <xTaskGetTickCount>
 8000966:	4603      	mov	r3, r0
 8000968:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {

	xSemaphoreTake(stateMtx, portMAX_DELAY);
 800096a:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa0 <pedestrian_wait+0x14c>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000972:	4618      	mov	r0, r3
 8000974:	f004 fff8 	bl	8005968 <xQueueSemaphoreTake>

	if(north_p_waiting || west_p_waiting){
 8000978:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa4 <pedestrian_wait+0x150>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d103      	bne.n	8000988 <pedestrian_wait+0x34>
 8000980:	4b49      	ldr	r3, [pc, #292]	@ (8000aa8 <pedestrian_wait+0x154>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d07d      	beq.n	8000a84 <pedestrian_wait+0x130>
		xSemaphoreGive(stateMtx);
 8000988:	4b45      	ldr	r3, [pc, #276]	@ (8000aa0 <pedestrian_wait+0x14c>)
 800098a:	6818      	ldr	r0, [r3, #0]
 800098c:	2300      	movs	r3, #0
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	f004 fd67 	bl	8005464 <xQueueGenericSend>

		direction_t keep_direction;
		light_t *light_to_change;
		uint8_t * current_waiting;
		if(north_p_waiting){
 8000996:	4b43      	ldr	r3, [pc, #268]	@ (8000aa4 <pedestrian_wait+0x150>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d006      	beq.n	80009ac <pedestrian_wait+0x58>
			keep_direction = pnorth;
 800099e:	2302      	movs	r3, #2
 80009a0:	73fb      	strb	r3, [r7, #15]
			light_to_change = &(state.p_north);
 80009a2:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <pedestrian_wait+0x158>)
 80009a4:	61fb      	str	r3, [r7, #28]
			current_waiting = &north_p_waiting;
 80009a6:	4b3f      	ldr	r3, [pc, #252]	@ (8000aa4 <pedestrian_wait+0x150>)
 80009a8:	61bb      	str	r3, [r7, #24]
 80009aa:	e009      	b.n	80009c0 <pedestrian_wait+0x6c>
		}
		else if(west_p_waiting){
 80009ac:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa8 <pedestrian_wait+0x154>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d005      	beq.n	80009c0 <pedestrian_wait+0x6c>
			keep_direction = pwest;
 80009b4:	2303      	movs	r3, #3
 80009b6:	73fb      	strb	r3, [r7, #15]
			light_to_change = &(state.p_west);
 80009b8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab0 <pedestrian_wait+0x15c>)
 80009ba:	61fb      	str	r3, [r7, #28]
			current_waiting = &west_p_waiting;
 80009bc:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa8 <pedestrian_wait+0x154>)
 80009be:	61bb      	str	r3, [r7, #24]
		}

		// Tell change direction task that pedestrian north/west wants to cross
		osMessageQueuePut(queue_change_dirHandle, &keep_direction, 0, 0);
 80009c0:	4b3c      	ldr	r3, [pc, #240]	@ (8000ab4 <pedestrian_wait+0x160>)
 80009c2:	6818      	ldr	r0, [r3, #0]
 80009c4:	f107 010f 	add.w	r1, r7, #15
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	f004 fa12 	bl	8004df4 <osMessageQueuePut>

		// Wait until car lights are in correct position, message will be sent from change_direction when state is ready
		direction_t go;
		osMessageQueueGet(queue_pedestrian_waitHandle, &go, 0, portMAX_DELAY);
 80009d0:	4b39      	ldr	r3, [pc, #228]	@ (8000ab8 <pedestrian_wait+0x164>)
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	f107 010e 	add.w	r1, r7, #14
 80009d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009dc:	2200      	movs	r2, #0
 80009de:	f004 fa69 	bl	8004eb4 <osMessageQueueGet>
		if(go == ok){
 80009e2:	7bbb      	ldrb	r3, [r7, #14]
 80009e4:	2b05      	cmp	r3, #5
 80009e6:	d134      	bne.n	8000a52 <pedestrian_wait+0xfe>

			xSemaphoreTake(stateMtx, portMAX_DELAY);
 80009e8:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa0 <pedestrian_wait+0x14c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009f0:	4618      	mov	r0, r3
 80009f2:	f004 ffb9 	bl	8005968 <xQueueSemaphoreTake>
			// Stop blinking, also signifies that pedestrian crossing has been handled
			*current_waiting = 0;
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
			// Light is green
			*light_to_change = green;
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(stateMtx);
 8000a02:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <pedestrian_wait+0x14c>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	2300      	movs	r3, #0
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f004 fd2a 	bl	8005464 <xQueueGenericSend>

			// Allow time pedestrians to cross
			vTaskDelay(walkingDelay);
 8000a10:	4b2a      	ldr	r3, [pc, #168]	@ (8000abc <pedestrian_wait+0x168>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f005 fcfd 	bl	8006414 <vTaskDelay>

			xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000a1a:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <pedestrian_wait+0x14c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a22:	4618      	mov	r0, r3
 8000a24:	f004 ffa0 	bl	8005968 <xQueueSemaphoreTake>
			*light_to_change = red;
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(stateMtx);
 8000a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <pedestrian_wait+0x14c>)
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	2300      	movs	r3, #0
 8000a34:	2200      	movs	r2, #0
 8000a36:	2100      	movs	r1, #0
 8000a38:	f004 fd14 	bl	8005464 <xQueueGenericSend>

			// Tell change_direction task that crossing is done
			direction_t done = ok;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	737b      	strb	r3, [r7, #13]
			osMessageQueuePut(queue_change_dirHandle, &done, 0, portMAX_DELAY);
 8000a40:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab4 <pedestrian_wait+0x160>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	f107 010d 	add.w	r1, r7, #13
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f004 f9d1 	bl	8004df4 <osMessageQueuePut>

		}

		// Stop blocking inputs from pedestrian crossing
		if(current_waiting == &north_p_waiting){
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	4a13      	ldr	r2, [pc, #76]	@ (8000aa4 <pedestrian_wait+0x150>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d10a      	bne.n	8000a70 <pedestrian_wait+0x11c>
			uint8_t input_ok = 0b1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	733b      	strb	r3, [r7, #12]
			osMessageQueuePut(queue_north_south_inputHandle, &input_ok, 0, 0);
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <pedestrian_wait+0x16c>)
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	f107 010c 	add.w	r1, r7, #12
 8000a66:	2300      	movs	r3, #0
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f004 f9c3 	bl	8004df4 <osMessageQueuePut>
 8000a6e:	e009      	b.n	8000a84 <pedestrian_wait+0x130>
		}
		else{
			uint8_t input_ok = 0b1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	72fb      	strb	r3, [r7, #11]
			osMessageQueuePut(queue_east_west_inputHandle, &input_ok, 0, 0);
 8000a74:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <pedestrian_wait+0x170>)
 8000a76:	6818      	ldr	r0, [r3, #0]
 8000a78:	f107 010b 	add.w	r1, r7, #11
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f004 f9b8 	bl	8004df4 <osMessageQueuePut>
		}

	}

	xSemaphoreGive(stateMtx);
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <pedestrian_wait+0x14c>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	f004 fce9 	bl	8005464 <xQueueGenericSend>



	vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000a92:	f107 0310 	add.w	r3, r7, #16
 8000a96:	6979      	ldr	r1, [r7, #20]
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f005 fc3b 	bl	8006314 <vTaskDelayUntil>
	xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000a9e:	e764      	b.n	800096a <pedestrian_wait+0x16>
 8000aa0:	2000008c 	.word	0x2000008c
 8000aa4:	2000008a 	.word	0x2000008a
 8000aa8:	2000008b 	.word	0x2000008b
 8000aac:	20000088 	.word	0x20000088
 8000ab0:	20000089 	.word	0x20000089
 8000ab4:	200000a8 	.word	0x200000a8
 8000ab8:	200000ac 	.word	0x200000ac
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	200000b8 	.word	0x200000b8
 8000ac4:	200000b4 	.word	0x200000b4

08000ac8 <render_state>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_render_state */
void render_state(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN render_state */
  uint8_t bits[] = {0b0, 0b0, 0b0};
 8000ad0:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <render_state+0x68>)
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	4611      	mov	r1, r2
 8000ada:	8019      	strh	r1, [r3, #0]
 8000adc:	3302      	adds	r3, #2
 8000ade:	0c12      	lsrs	r2, r2, #16
 8000ae0:	701a      	strb	r2, [r3, #0]

  TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(PERIOD_RENDER_STATE); // ms to ticks
 8000ae2:	2364      	movs	r3, #100	@ 0x64
 8000ae4:	617b      	str	r3, [r7, #20]
  // Initialize the xLastWakeTime variable with the current time.
  xLastWakeTime = xTaskGetTickCount();
 8000ae6:	f005 fde7 	bl	80066b8 <xTaskGetTickCount>
 8000aea:	4603      	mov	r3, r0
 8000aec:	60fb      	str	r3, [r7, #12]
  /* Infinite loop*/
  for (;;) {

	// render current state
    xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <render_state+0x6c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 ff36 	bl	8005968 <xQueueSemaphoreTake>
    format_lights(&state, bits);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <render_state+0x70>)
 8000b04:	f000 f97a 	bl	8000dfc <format_lights>
    feed_shift_reg(bits);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 f955 	bl	8000dbc <feed_shift_reg>
    xSemaphoreGive(stateMtx);
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <render_state+0x6c>)
 8000b14:	6818      	ldr	r0, [r3, #0]
 8000b16:	2300      	movs	r3, #0
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f004 fca2 	bl	8005464 <xQueueGenericSend>

    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	6979      	ldr	r1, [r7, #20]
 8000b26:	4618      	mov	r0, r3
 8000b28:	f005 fbf4 	bl	8006314 <vTaskDelayUntil>
    xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000b2c:	bf00      	nop
 8000b2e:	e7de      	b.n	8000aee <render_state+0x26>
 8000b30:	080082f8 	.word	0x080082f8
 8000b34:	2000008c 	.word	0x2000008c
 8000b38:	20000084 	.word	0x20000084

08000b3c <check_input>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_check_input */
void check_input(void *argument)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN check_input */

  TickType_t xLastWakeTime;
  const TickType_t xPeriod = pdMS_TO_TICKS(PERIOD_CHECK_INPUT); // ms to ticks
 8000b44:	230a      	movs	r3, #10
 8000b46:	61fb      	str	r3, [r7, #28]
  // Initialize the xLastWakeTime variable with the current time.
  xLastWakeTime = xTaskGetTickCount();
 8000b48:	f005 fdb6 	bl	80066b8 <xTaskGetTickCount>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for (;;) {
    uint8_t input = get_buttons();
 8000b50:	f000 fa54 	bl	8000ffc <get_buttons>
 8000b54:	4603      	mov	r3, r0
 8000b56:	76fb      	strb	r3, [r7, #27]

    uint8_t input_goahead_n;
	osStatus_t status = osMessageQueueGet(queue_north_south_inputHandle, &input_goahead_n, 0, 0);
 8000b58:	4b33      	ldr	r3, [pc, #204]	@ (8000c28 <check_input+0xec>)
 8000b5a:	6818      	ldr	r0, [r3, #0]
 8000b5c:	f107 010b 	add.w	r1, r7, #11
 8000b60:	2300      	movs	r3, #0
 8000b62:	2200      	movs	r2, #0
 8000b64:	f004 f9a6 	bl	8004eb4 <osMessageQueueGet>
 8000b68:	6178      	str	r0, [r7, #20]

	// If input for the north pedestrian crossing is allowed
	if(status == osOK && input_goahead_n){
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d123      	bne.n	8000bb8 <check_input+0x7c>
 8000b70:	7afb      	ldrb	r3, [r7, #11]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d020      	beq.n	8000bb8 <check_input+0x7c>

		if(input & BTN_P_NORTH){
 8000b76:	7efb      	ldrb	r3, [r7, #27]
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d011      	beq.n	8000ba4 <check_input+0x68>
			xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000b80:	4b2a      	ldr	r3, [pc, #168]	@ (8000c2c <check_input+0xf0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f004 feed 	bl	8005968 <xQueueSemaphoreTake>
			north_p_waiting = 1;
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <check_input+0xf4>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(stateMtx);
 8000b94:	4b25      	ldr	r3, [pc, #148]	@ (8000c2c <check_input+0xf0>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	f004 fc61 	bl	8005464 <xQueueGenericSend>
 8000ba2:	e009      	b.n	8000bb8 <check_input+0x7c>

		}
		else{
			uint8_t input_goahead = 0b1;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	727b      	strb	r3, [r7, #9]
			osMessageQueuePut(queue_north_south_inputHandle, &input_goahead, 0, 0);
 8000ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <check_input+0xec>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	f107 0109 	add.w	r1, r7, #9
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f004 f91e 	bl	8004df4 <osMessageQueuePut>
		}
	}

    uint8_t input_goahead_w;
    osStatus_t status_again = osMessageQueueGet(queue_east_west_inputHandle, &input_goahead_w, 0, 0);
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	@ (8000c34 <check_input+0xf8>)
 8000bba:	6818      	ldr	r0, [r3, #0]
 8000bbc:	f107 010a 	add.w	r1, r7, #10
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f004 f976 	bl	8004eb4 <osMessageQueueGet>
 8000bc8:	6138      	str	r0, [r7, #16]

	// If input for the north pedestrian crossing is allowed
	if(status_again == osOK && input_goahead_w){
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d123      	bne.n	8000c18 <check_input+0xdc>
 8000bd0:	7abb      	ldrb	r3, [r7, #10]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d020      	beq.n	8000c18 <check_input+0xdc>

		if(input & BTN_P_WEST){
 8000bd6:	7efb      	ldrb	r3, [r7, #27]
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d011      	beq.n	8000c04 <check_input+0xc8>
			xSemaphoreTake(stateMtx, portMAX_DELAY);
 8000be0:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <check_input+0xf0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000be8:	4618      	mov	r0, r3
 8000bea:	f004 febd 	bl	8005968 <xQueueSemaphoreTake>
			west_p_waiting = 1;
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <check_input+0xfc>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
			xSemaphoreGive(stateMtx);
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <check_input+0xf0>)
 8000bf6:	6818      	ldr	r0, [r3, #0]
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	f004 fc31 	bl	8005464 <xQueueGenericSend>
 8000c02:	e009      	b.n	8000c18 <check_input+0xdc>

		}
		else{
			uint8_t input_goahead = 0b1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	723b      	strb	r3, [r7, #8]
			osMessageQueuePut(queue_east_west_inputHandle, &input_goahead, 0, 0);
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <check_input+0xf8>)
 8000c0a:	6818      	ldr	r0, [r3, #0]
 8000c0c:	f107 0108 	add.w	r1, r7, #8
 8000c10:	2300      	movs	r3, #0
 8000c12:	2200      	movs	r2, #0
 8000c14:	f004 f8ee 	bl	8004df4 <osMessageQueuePut>
		}
	}

    vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000c18:	f107 030c 	add.w	r3, r7, #12
 8000c1c:	69f9      	ldr	r1, [r7, #28]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f005 fb78 	bl	8006314 <vTaskDelayUntil>
  for (;;) {
 8000c24:	e794      	b.n	8000b50 <check_input+0x14>
 8000c26:	bf00      	nop
 8000c28:	200000b8 	.word	0x200000b8
 8000c2c:	2000008c 	.word	0x2000008c
 8000c30:	2000008a 	.word	0x2000008a
 8000c34:	200000b4 	.word	0x200000b4
 8000c38:	2000008b 	.word	0x2000008b

08000c3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08a      	sub	sp, #40	@ 0x28
 8000c40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b57      	ldr	r3, [pc, #348]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	4a56      	ldr	r2, [pc, #344]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5e:	4b54      	ldr	r3, [pc, #336]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6a:	4b51      	ldr	r3, [pc, #324]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6e:	4a50      	ldr	r2, [pc, #320]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c76:	4b4e      	ldr	r3, [pc, #312]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b4b      	ldr	r3, [pc, #300]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c86:	4a4a      	ldr	r2, [pc, #296]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8e:	4b48      	ldr	r3, [pc, #288]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
 8000c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	4b45      	ldr	r3, [pc, #276]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9e:	4a44      	ldr	r2, [pc, #272]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca6:	4b42      	ldr	r3, [pc, #264]	@ (8000db0 <MX_GPIO_Init+0x174>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cba:	f000 ffb1 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cc4:	483b      	ldr	r0, [pc, #236]	@ (8000db4 <MX_GPIO_Init+0x178>)
 8000cc6:	f000 ffab 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Enable_GPIO_Port, Enable_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2180      	movs	r1, #128	@ 0x80
 8000cce:	483a      	ldr	r0, [pc, #232]	@ (8000db8 <MX_GPIO_Init+0x17c>)
 8000cd0:	f000 ffa6 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000cda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cde:	f000 ff9f 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ce8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000cec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	482f      	ldr	r0, [pc, #188]	@ (8000db8 <MX_GPIO_Init+0x17c>)
 8000cfa:	f000 fdcf 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Reset_Pin;
 8000cfe:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d1a:	f000 fdbf 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_West_Pin;
 8000d1e:	2310      	movs	r3, #16
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(T_West_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4821      	ldr	r0, [pc, #132]	@ (8000db8 <MX_GPIO_Init+0x17c>)
 8000d32:	f000 fdb3 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STCP_Pin;
 8000d36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STCP_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4819      	ldr	r0, [pc, #100]	@ (8000db4 <MX_GPIO_Init+0x178>)
 8000d50:	f000 fda4 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = T_South_Pin|T_East_Pin|P_North_Pin;
 8000d54:	f44f 43c1 	mov.w	r3, #24704	@ 0x6080
 8000d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <MX_GPIO_Init+0x178>)
 8000d6a:	f000 fd97 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Enable_Pin;
 8000d6e:	2380      	movs	r3, #128	@ 0x80
 8000d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Enable_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	480c      	ldr	r0, [pc, #48]	@ (8000db8 <MX_GPIO_Init+0x17c>)
 8000d86:	f000 fd89 	bl	800189c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = T_North_Pin|P_West_Pin;
 8000d8a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	2301      	movs	r3, #1
 8000d96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0314 	add.w	r3, r7, #20
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000da2:	f000 fd7b 	bl	800189c <HAL_GPIO_Init>

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40021000 	.word	0x40021000
 8000db4:	48000400 	.word	0x48000400
 8000db8:	48000800 	.word	0x48000800

08000dbc <feed_shift_reg>:
@brief feed_shift_reg, feed shift register with 24 bit input.
@param uint8_t *lights, pointer to 24 bits divided into 3 bytes.
Each bit represent an led on the 74HC595D shield, some bits are unmapped.
@return void, no return value
*/
void feed_shift_reg(uint8_t *lights) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_SPI_Transmit(&hspi3, lights, SHIFT_REG_CAPACITY, HAL_MAX_DELAY);
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc8:	2203      	movs	r2, #3
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	4809      	ldr	r0, [pc, #36]	@ (8000df4 <feed_shift_reg+0x38>)
 8000dce:	f002 fb34 	bl	800343a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_SET);
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000dd8:	4807      	ldr	r0, [pc, #28]	@ (8000df8 <feed_shift_reg+0x3c>)
 8000dda:	f000 ff21 	bl	8001c20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(STCP_GPIO_Port, STCP_Pin, GPIO_PIN_RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000de4:	4804      	ldr	r0, [pc, #16]	@ (8000df8 <feed_shift_reg+0x3c>)
 8000de6:	f000 ff1b 	bl	8001c20 <HAL_GPIO_WritePin>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000c0 	.word	0x200000c0
 8000df8:	48000400 	.word	0x48000400

08000dfc <format_lights>:
@brief format_lights, transform state of traffic lights to 24 bit input.
@param const lstate_t *curr, the current state of the traffic intersection.
@param uint8_t *lights, location where 24 bit value will return.
@return void, no return value.
*/
void format_lights(const lstate_t *curr, uint8_t *lights) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  // Set all bits to 0
  lights[0] = 0b00000000;
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
  lights[1] = 0b00000000;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
  lights[2] = 0b00000000;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	3302      	adds	r3, #2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]

  switch (curr->t_north) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d00d      	beq.n	8000e40 <format_lights+0x44>
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	dc1b      	bgt.n	8000e60 <format_lights+0x64>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d011      	beq.n	8000e50 <format_lights+0x54>
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d117      	bne.n	8000e60 <format_lights+0x64>
  case green:
    lights[0] = lights[0] | 0b00000100;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	701a      	strb	r2, [r3, #0]
    break;
 8000e3e:	e010      	b.n	8000e62 <format_lights+0x66>
  case yellow:
    lights[0] = lights[0] | 0b00001000;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	701a      	strb	r2, [r3, #0]
    break;
 8000e4e:	e008      	b.n	8000e62 <format_lights+0x66>
  case red:
    lights[0] = lights[0] | 0b00010000;
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	f043 0310 	orr.w	r3, r3, #16
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	701a      	strb	r2, [r3, #0]
    break;
 8000e5e:	e000      	b.n	8000e62 <format_lights+0x66>
  default:
    break;
 8000e60:	bf00      	nop
  }

  switch (curr->t_east) {
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	78db      	ldrb	r3, [r3, #3]
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d00d      	beq.n	8000e86 <format_lights+0x8a>
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	dc1b      	bgt.n	8000ea6 <format_lights+0xaa>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d011      	beq.n	8000e96 <format_lights+0x9a>
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d117      	bne.n	8000ea6 <format_lights+0xaa>
  case green:
    lights[0] = lights[0] | 0b00100000;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	f043 0320 	orr.w	r3, r3, #32
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	701a      	strb	r2, [r3, #0]
    break;
 8000e84:	e010      	b.n	8000ea8 <format_lights+0xac>
  case yellow:
    lights[0] = lights[0] | 0b01000000;
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	701a      	strb	r2, [r3, #0]
    break;
 8000e94:	e008      	b.n	8000ea8 <format_lights+0xac>
  case red:
    lights[0] = lights[0] | 0b10000000;
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	701a      	strb	r2, [r3, #0]
    break;
 8000ea4:	e000      	b.n	8000ea8 <format_lights+0xac>
  default:
    break;
 8000ea6:	bf00      	nop
  }

  switch (curr->t_south) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d00f      	beq.n	8000ed0 <format_lights+0xd4>
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	dc21      	bgt.n	8000ef8 <format_lights+0xfc>
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d015      	beq.n	8000ee4 <format_lights+0xe8>
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d11d      	bne.n	8000ef8 <format_lights+0xfc>
  case green:
    lights[1] = lights[1] | 0b00100000;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	781a      	ldrb	r2, [r3, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f042 0220 	orr.w	r2, r2, #32
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	701a      	strb	r2, [r3, #0]
    break;
 8000ece:	e014      	b.n	8000efa <format_lights+0xfe>
  case yellow:
    lights[1] = lights[1] | 0b01000000;
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	701a      	strb	r2, [r3, #0]
    break;
 8000ee2:	e00a      	b.n	8000efa <format_lights+0xfe>
  case red:
    lights[1] = lights[1] | 0b10000000;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	781a      	ldrb	r2, [r3, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	701a      	strb	r2, [r3, #0]
    break;
 8000ef6:	e000      	b.n	8000efa <format_lights+0xfe>
  default:
    break;
 8000ef8:	bf00      	nop
  }

  switch (curr->t_west) {
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	789b      	ldrb	r3, [r3, #2]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d00f      	beq.n	8000f22 <format_lights+0x126>
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	dc21      	bgt.n	8000f4a <format_lights+0x14e>
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d015      	beq.n	8000f36 <format_lights+0x13a>
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d11d      	bne.n	8000f4a <format_lights+0x14e>
  case green:
    lights[2] = lights[2] | 0b00100000;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	3302      	adds	r3, #2
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3302      	adds	r3, #2
 8000f18:	f042 0220 	orr.w	r2, r2, #32
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	701a      	strb	r2, [r3, #0]
    break;
 8000f20:	e014      	b.n	8000f4c <format_lights+0x150>
  case yellow:
    lights[2] = lights[2] | 0b01000000;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3302      	adds	r3, #2
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
    break;
 8000f34:	e00a      	b.n	8000f4c <format_lights+0x150>
  case red:
    lights[2] = lights[2] | 0b10000000;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3302      	adds	r3, #2
 8000f40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000f44:	b2d2      	uxtb	r2, r2
 8000f46:	701a      	strb	r2, [r3, #0]
    break;
 8000f48:	e000      	b.n	8000f4c <format_lights+0x150>
  default:
    break;
 8000f4a:	bf00      	nop
  }

  switch (curr->p_north) {
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	791b      	ldrb	r3, [r3, #4]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d019      	beq.n	8000f88 <format_lights+0x18c>
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	dc21      	bgt.n	8000f9c <format_lights+0x1a0>
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00b      	beq.n	8000f74 <format_lights+0x178>
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d11d      	bne.n	8000f9c <format_lights+0x1a0>
  case green:
    lights[1] = lights[1] | 0b00001000;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	781a      	ldrb	r2, [r3, #0]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f042 0208 	orr.w	r2, r2, #8
 8000f6e:	b2d2      	uxtb	r2, r2
 8000f70:	701a      	strb	r2, [r3, #0]
    break;
 8000f72:	e014      	b.n	8000f9e <format_lights+0x1a2>
  case red:
    lights[1] = lights[1] | 0b00010000;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	3301      	adds	r3, #1
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	f042 0210 	orr.w	r2, r2, #16
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	701a      	strb	r2, [r3, #0]
    break;
 8000f86:	e00a      	b.n	8000f9e <format_lights+0x1a2>
  case blue:
    // Blue will only be enabled when red is
    lights[1] = lights[1] | 0b00010100;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	781a      	ldrb	r2, [r3, #0]
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	3301      	adds	r3, #1
 8000f92:	f042 0214 	orr.w	r2, r2, #20
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	701a      	strb	r2, [r3, #0]
    break;
 8000f9a:	e000      	b.n	8000f9e <format_lights+0x1a2>
  default:
    break;
 8000f9c:	bf00      	nop
  }

  switch (curr->p_west) {
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	795b      	ldrb	r3, [r3, #5]
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d019      	beq.n	8000fda <format_lights+0x1de>
 8000fa6:	2b03      	cmp	r3, #3
 8000fa8:	dc21      	bgt.n	8000fee <format_lights+0x1f2>
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00b      	beq.n	8000fc6 <format_lights+0x1ca>
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d11d      	bne.n	8000fee <format_lights+0x1f2>
  case green:
    lights[2] = lights[2] | 0b00001000;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	f042 0208 	orr.w	r2, r2, #8
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
    break;
 8000fc4:	e014      	b.n	8000ff0 <format_lights+0x1f4>
  case red:
    lights[2] = lights[2] | 0b00010000;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	3302      	adds	r3, #2
 8000fd0:	f042 0210 	orr.w	r2, r2, #16
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	701a      	strb	r2, [r3, #0]
    break;
 8000fd8:	e00a      	b.n	8000ff0 <format_lights+0x1f4>
  case blue:
    // Blue will only be enabled when red is
    lights[2] = lights[2] | 0b00010100;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3302      	adds	r3, #2
 8000fde:	781a      	ldrb	r2, [r3, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f042 0214 	orr.w	r2, r2, #20
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	701a      	strb	r2, [r3, #0]
    break;
 8000fec:	e000      	b.n	8000ff0 <format_lights+0x1f4>
  default:
    break;
 8000fee:	bf00      	nop
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <get_buttons>:
@param void, no parameter.
@return uint8_t, bits 0-5 represent one button each.
Use macros BTN_X_XXXX with bit-wise AND to check for specific button.
1 is on, 0 is off.
*/
uint8_t get_buttons() {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0

  uint8_t out = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]

  if (HAL_GPIO_ReadPin(P_North_GPIO_Port, P_North_Pin) == GPIO_PIN_RESET)
 8001006:	2180      	movs	r1, #128	@ 0x80
 8001008:	4825      	ldr	r0, [pc, #148]	@ (80010a0 <get_buttons+0xa4>)
 800100a:	f000 fdf1 	bl	8001bf0 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d103      	bne.n	800101c <get_buttons+0x20>
    out |= BTN_P_NORTH;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f043 0301 	orr.w	r3, r3, #1
 800101a:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(P_West_GPIO_Port, P_West_Pin) == GPIO_PIN_RESET)
 800101c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001020:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001024:	f000 fde4 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d103      	bne.n	8001036 <get_buttons+0x3a>
    out |= BTN_P_WEST;
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	71fb      	strb	r3, [r7, #7]

  if (HAL_GPIO_ReadPin(T_North_GPIO_Port, T_North_Pin) == GPIO_PIN_RESET)
 8001036:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800103a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800103e:	f000 fdd7 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d103      	bne.n	8001050 <get_buttons+0x54>
    out |= BTN_T_NORTH;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f043 0304 	orr.w	r3, r3, #4
 800104e:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(T_East_GPIO_Port, T_East_Pin) == GPIO_PIN_RESET)
 8001050:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001054:	4812      	ldr	r0, [pc, #72]	@ (80010a0 <get_buttons+0xa4>)
 8001056:	f000 fdcb 	bl	8001bf0 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d103      	bne.n	8001068 <get_buttons+0x6c>
    out |= BTN_T_EAST;
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f043 0308 	orr.w	r3, r3, #8
 8001066:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(T_South_GPIO_Port, T_South_Pin) == GPIO_PIN_RESET)
 8001068:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800106c:	480c      	ldr	r0, [pc, #48]	@ (80010a0 <get_buttons+0xa4>)
 800106e:	f000 fdbf 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d103      	bne.n	8001080 <get_buttons+0x84>
    out |= BTN_T_SOUTH;
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	71fb      	strb	r3, [r7, #7]
  if (HAL_GPIO_ReadPin(T_West_GPIO_Port, T_West_Pin) == GPIO_PIN_RESET)
 8001080:	2110      	movs	r1, #16
 8001082:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <get_buttons+0xa8>)
 8001084:	f000 fdb4 	bl	8001bf0 <HAL_GPIO_ReadPin>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <get_buttons+0x9a>
    out |= BTN_T_WEST;
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	71fb      	strb	r3, [r7, #7]

  return out;
 8001096:	79fb      	ldrb	r3, [r7, #7]
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	48000400 	.word	0x48000400
 80010a4:	48000800 	.word	0x48000800

080010a8 <toggle_blue>:
and blue if it is currently red. Does nothing if state is neither red nor blue.
@note Logical blue represents both red and blue led on.
@param light_t *p_light, pointer to the logical state of a pedestrian light.
@return void, no return value.
*/
void toggle_blue(light_t *p_light) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if (*p_light == blue)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d103      	bne.n	80010c0 <toggle_blue+0x18>
    *p_light = red;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
  else if (*p_light == red)
    *p_light = blue;
}
 80010be:	e006      	b.n	80010ce <toggle_blue+0x26>
  else if (*p_light == red)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <toggle_blue+0x26>
    *p_light = blue;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	701a      	strb	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 fabb 	bl	8001658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f80e 	bl	8001102 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f7ff fda9 	bl	8000c3c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ea:	f000 f9ff 	bl	80014ec <MX_USART2_UART_Init>
  MX_SPI3_Init();
 80010ee:	f000 f871 	bl	80011d4 <MX_SPI3_Init>
  //test_program(&state);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010f2:	f003 fca9 	bl	8004a48 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010f6:	f7ff f9e3 	bl	80004c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010fa:	f003 fcc9 	bl	8004a90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010fe:	bf00      	nop
 8001100:	e7fd      	b.n	80010fe <main+0x24>

08001102 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b096      	sub	sp, #88	@ 0x58
 8001106:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2244      	movs	r2, #68	@ 0x44
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f006 ff99 	bl	8008048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001124:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001128:	f000 fda0 	bl	8001c6c <HAL_PWREx_ControlVoltageScaling>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001132:	f000 f849 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001136:	2302      	movs	r3, #2
 8001138:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800113e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001140:	2310      	movs	r3, #16
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001144:	2302      	movs	r3, #2
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800114c:	2301      	movs	r3, #1
 800114e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001150:	230a      	movs	r3, #10
 8001152:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001154:	2307      	movs	r3, #7
 8001156:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001158:	2302      	movs	r3, #2
 800115a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4618      	mov	r0, r3
 8001166:	f000 fdd7 	bl	8001d18 <HAL_RCC_OscConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001170:	f000 f82a 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001174:	230f      	movs	r3, #15
 8001176:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001178:	2303      	movs	r3, #3
 800117a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	2104      	movs	r1, #4
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f99f 	bl	80024d0 <HAL_RCC_ClockConfig>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001198:	f000 f816 	bl	80011c8 <Error_Handler>
  }
}
 800119c:	bf00      	nop
 800119e:	3758      	adds	r7, #88	@ 0x58
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011b6:	f000 fa6f 	bl	8001698 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40012c00 	.word	0x40012c00

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	bf00      	nop
 80011d2:	e7fd      	b.n	80011d0 <Error_Handler+0x8>

080011d4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <MX_SPI3_Init+0x74>)
 80011da:	4a1c      	ldr	r2, [pc, #112]	@ (800124c <MX_SPI3_Init+0x78>)
 80011dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011de:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <MX_SPI3_Init+0x74>)
 80011e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011e6:	4b18      	ldr	r3, [pc, #96]	@ (8001248 <MX_SPI3_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ec:	4b16      	ldr	r3, [pc, #88]	@ (8001248 <MX_SPI3_Init+0x74>)
 80011ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80011f2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <MX_SPI3_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <MX_SPI3_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <MX_SPI3_Init+0x74>)
 8001202:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001206:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001208:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <MX_SPI3_Init+0x74>)
 800120a:	2230      	movs	r2, #48	@ 0x30
 800120c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800120e:	4b0e      	ldr	r3, [pc, #56]	@ (8001248 <MX_SPI3_Init+0x74>)
 8001210:	2280      	movs	r2, #128	@ 0x80
 8001212:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001214:	4b0c      	ldr	r3, [pc, #48]	@ (8001248 <MX_SPI3_Init+0x74>)
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <MX_SPI3_Init+0x74>)
 800121c:	2200      	movs	r2, #0
 800121e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001220:	4b09      	ldr	r3, [pc, #36]	@ (8001248 <MX_SPI3_Init+0x74>)
 8001222:	2207      	movs	r2, #7
 8001224:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <MX_SPI3_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <MX_SPI3_Init+0x74>)
 800122e:	2208      	movs	r2, #8
 8001230:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_SPI3_Init+0x74>)
 8001234:	f002 f85e 	bl	80032f4 <HAL_SPI_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800123e:	f7ff ffc3 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	200000c0 	.word	0x200000c0
 800124c:	40003c00 	.word	0x40003c00

08001250 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	@ 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a34      	ldr	r2, [pc, #208]	@ (8001340 <HAL_SPI_MspInit+0xf0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d161      	bne.n	8001336 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001272:	4b34      	ldr	r3, [pc, #208]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	4a33      	ldr	r2, [pc, #204]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 8001278:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800127c:	6593      	str	r3, [r2, #88]	@ 0x58
 800127e:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 8001280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001282:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a2d      	ldr	r2, [pc, #180]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012a6:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b22      	ldr	r3, [pc, #136]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <HAL_SPI_MspInit+0xf4>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PA4     ------> SPI3_NSS
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012d2:	2310      	movs	r3, #16
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e2:	2306      	movs	r3, #6
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012f0:	f000 fad4 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001306:	2306      	movs	r3, #6
 8001308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	480d      	ldr	r0, [pc, #52]	@ (8001348 <HAL_SPI_MspInit+0xf8>)
 8001312:	f000 fac3 	bl	800189c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001316:	2320      	movs	r3, #32
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001326:	2306      	movs	r3, #6
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4806      	ldr	r0, [pc, #24]	@ (800134c <HAL_SPI_MspInit+0xfc>)
 8001332:	f000 fab3 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	@ 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40003c00 	.word	0x40003c00
 8001344:	40021000 	.word	0x40021000
 8001348:	48000800 	.word	0x48000800
 800134c:	48000400 	.word	0x48000400

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <HAL_MspInit+0x4c>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800135a:	4a10      	ldr	r2, [pc, #64]	@ (800139c <HAL_MspInit+0x4c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6613      	str	r3, [r2, #96]	@ 0x60
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <HAL_MspInit+0x4c>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <HAL_MspInit+0x4c>)
 8001370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001372:	4a0a      	ldr	r2, [pc, #40]	@ (800139c <HAL_MspInit+0x4c>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	6593      	str	r3, [r2, #88]	@ 0x58
 800137a:	4b08      	ldr	r3, [pc, #32]	@ (800139c <HAL_MspInit+0x4c>)
 800137c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	210f      	movs	r1, #15
 800138a:	f06f 0001 	mvn.w	r0, #1
 800138e:	f000 fa5b 	bl	8001848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40021000 	.word	0x40021000

080013a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	@ 0x30
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001468 <HAL_InitTick+0xc8>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013b2:	4a2d      	ldr	r2, [pc, #180]	@ (8001468 <HAL_InitTick+0xc8>)
 80013b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80013ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <HAL_InitTick+0xc8>)
 80013bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013c6:	f107 020c 	add.w	r2, r7, #12
 80013ca:	f107 0310 	add.w	r3, r7, #16
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f001 fa41 	bl	8002858 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013d6:	f001 fa29 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 80013da:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013de:	4a23      	ldr	r2, [pc, #140]	@ (800146c <HAL_InitTick+0xcc>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	0c9b      	lsrs	r3, r3, #18
 80013e6:	3b01      	subs	r3, #1
 80013e8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013ea:	4b21      	ldr	r3, [pc, #132]	@ (8001470 <HAL_InitTick+0xd0>)
 80013ec:	4a21      	ldr	r2, [pc, #132]	@ (8001474 <HAL_InitTick+0xd4>)
 80013ee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <HAL_InitTick+0xd0>)
 80013f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013f6:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001470 <HAL_InitTick+0xd0>)
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <HAL_InitTick+0xd0>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <HAL_InitTick+0xd0>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b19      	ldr	r3, [pc, #100]	@ (8001470 <HAL_InitTick+0xd0>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001410:	4817      	ldr	r0, [pc, #92]	@ (8001470 <HAL_InitTick+0xd0>)
 8001412:	f002 faed 	bl	80039f0 <HAL_TIM_Base_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800141c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001420:	2b00      	cmp	r3, #0
 8001422:	d11b      	bne.n	800145c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001424:	4812      	ldr	r0, [pc, #72]	@ (8001470 <HAL_InitTick+0xd0>)
 8001426:	f002 fb45 	bl	8003ab4 <HAL_TIM_Base_Start_IT>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001434:	2b00      	cmp	r3, #0
 8001436:	d111      	bne.n	800145c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001438:	2019      	movs	r0, #25
 800143a:	f000 fa21 	bl	8001880 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d808      	bhi.n	8001456 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001444:	2200      	movs	r2, #0
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	2019      	movs	r0, #25
 800144a:	f000 f9fd 	bl	8001848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <HAL_InitTick+0xd8>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e002      	b.n	800145c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800145c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001460:	4618      	mov	r0, r3
 8001462:	3730      	adds	r7, #48	@ 0x30
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40021000 	.word	0x40021000
 800146c:	431bde83 	.word	0x431bde83
 8001470:	20000124 	.word	0x20000124
 8001474:	40012c00 	.word	0x40012c00
 8001478:	2000000c 	.word	0x2000000c

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <NMI_Handler+0x4>

08001484 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <MemManage_Handler+0x4>

08001494 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014b8:	4802      	ldr	r0, [pc, #8]	@ (80014c4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80014ba:	f002 fb6b 	bl	8003b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000124 	.word	0x20000124

080014c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	@ (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f0:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	@ (8001548 <MX_USART2_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_USART2_UART_Init+0x58>)
 8001530:	f002 fd24 	bl	8003f7c <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f7ff fe45 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000170 	.word	0x20000170
 8001548:	40004400 	.word	0x40004400

0800154c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0ac      	sub	sp, #176	@ 0xb0
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2288      	movs	r2, #136	@ 0x88
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f006 fd6b 	bl	8008048 <memset>
  if(uartHandle->Instance==USART2)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <HAL_UART_MspInit+0xb0>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d13b      	bne.n	80015f4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001580:	2300      	movs	r3, #0
 8001582:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4618      	mov	r0, r3
 800158a:	f001 f9f7 	bl	800297c <HAL_RCCEx_PeriphCLKConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001594:	f7ff fe18 	bl	80011c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001598:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_UART_MspInit+0xb4>)
 800159a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800159c:	4a18      	ldr	r2, [pc, #96]	@ (8001600 <HAL_UART_MspInit+0xb4>)
 800159e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80015a4:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <HAL_UART_MspInit+0xb4>)
 80015a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	4b13      	ldr	r3, [pc, #76]	@ (8001600 <HAL_UART_MspInit+0xb4>)
 80015b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b4:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <HAL_UART_MspInit+0xb4>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <HAL_UART_MspInit+0xb4>)
 80015be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015c8:	230c      	movs	r3, #12
 80015ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e0:	2307      	movs	r3, #7
 80015e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ea:	4619      	mov	r1, r3
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015f0:	f000 f954 	bl	800189c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015f4:	bf00      	nop
 80015f6:	37b0      	adds	r7, #176	@ 0xb0
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40004400 	.word	0x40004400
 8001600:	40021000 	.word	0x40021000

08001604 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001604:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800163c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001608:	f7ff ff5e 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	@ (8001640 <LoopForever+0x6>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	@ (8001644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	@ (8001648 <LoopForever+0xe>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	@ (800164c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	@ (8001650 <LoopForever+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001632:	f006 fd67 	bl	8008104 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001636:	f7ff fd50 	bl	80010da <main>

0800163a <LoopForever>:

LoopForever:
    b LoopForever
 800163a:	e7fe      	b.n	800163a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800163c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001648:	080084cc 	.word	0x080084cc
  ldr r2, =_sbss
 800164c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001650:	20003064 	.word	0x20003064

08001654 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC1_2_IRQHandler>
	...

08001658 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <HAL_Init+0x3c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <HAL_Init+0x3c>)
 8001668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800166c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166e:	2003      	movs	r0, #3
 8001670:	f000 f8df 	bl	8001832 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001674:	200f      	movs	r0, #15
 8001676:	f7ff fe93 	bl	80013a0 <HAL_InitTick>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	71fb      	strb	r3, [r7, #7]
 8001684:	e001      	b.n	800168a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001686:	f7ff fe63 	bl	8001350 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800168a:	79fb      	ldrb	r3, [r7, #7]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800169c:	4b06      	ldr	r3, [pc, #24]	@ (80016b8 <HAL_IncTick+0x20>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	461a      	mov	r2, r3
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_IncTick+0x24>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4413      	add	r3, r2
 80016a8:	4a04      	ldr	r2, [pc, #16]	@ (80016bc <HAL_IncTick+0x24>)
 80016aa:	6013      	str	r3, [r2, #0]
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000010 	.word	0x20000010
 80016bc:	200001f8 	.word	0x200001f8

080016c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return uwTick;
 80016c4:	4b03      	ldr	r3, [pc, #12]	@ (80016d4 <HAL_GetTick+0x14>)
 80016c6:	681b      	ldr	r3, [r3, #0]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	200001f8 	.word	0x200001f8

080016d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b480      	push	{r7}
 80016da:	b085      	sub	sp, #20
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016f4:	4013      	ands	r3, r2
 80016f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001700:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800170a:	4a04      	ldr	r2, [pc, #16]	@ (800171c <__NVIC_SetPriorityGrouping+0x44>)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	60d3      	str	r3, [r2, #12]
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001724:	4b04      	ldr	r3, [pc, #16]	@ (8001738 <__NVIC_GetPriorityGrouping+0x18>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	f003 0307 	and.w	r3, r3, #7
}
 800172e:	4618      	mov	r0, r3
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	2b00      	cmp	r3, #0
 800174c:	db0b      	blt.n	8001766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 021f 	and.w	r2, r3, #31
 8001754:	4907      	ldr	r1, [pc, #28]	@ (8001774 <__NVIC_EnableIRQ+0x38>)
 8001756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175a:	095b      	lsrs	r3, r3, #5
 800175c:	2001      	movs	r0, #1
 800175e:	fa00 f202 	lsl.w	r2, r0, r2
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000e100 	.word	0xe000e100

08001778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	6039      	str	r1, [r7, #0]
 8001782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b00      	cmp	r3, #0
 800178a:	db0a      	blt.n	80017a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	b2da      	uxtb	r2, r3
 8001790:	490c      	ldr	r1, [pc, #48]	@ (80017c4 <__NVIC_SetPriority+0x4c>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	0112      	lsls	r2, r2, #4
 8001798:	b2d2      	uxtb	r2, r2
 800179a:	440b      	add	r3, r1
 800179c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a0:	e00a      	b.n	80017b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	4908      	ldr	r1, [pc, #32]	@ (80017c8 <__NVIC_SetPriority+0x50>)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	3b04      	subs	r3, #4
 80017b0:	0112      	lsls	r2, r2, #4
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	440b      	add	r3, r1
 80017b6:	761a      	strb	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000e100 	.word	0xe000e100
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b089      	sub	sp, #36	@ 0x24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f1c3 0307 	rsb	r3, r3, #7
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	bf28      	it	cs
 80017ea:	2304      	movcs	r3, #4
 80017ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3304      	adds	r3, #4
 80017f2:	2b06      	cmp	r3, #6
 80017f4:	d902      	bls.n	80017fc <NVIC_EncodePriority+0x30>
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b03      	subs	r3, #3
 80017fa:	e000      	b.n	80017fe <NVIC_EncodePriority+0x32>
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43da      	mvns	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	401a      	ands	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	fa01 f303 	lsl.w	r3, r1, r3
 800181e:	43d9      	mvns	r1, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001824:	4313      	orrs	r3, r2
         );
}
 8001826:	4618      	mov	r0, r3
 8001828:	3724      	adds	r7, #36	@ 0x24
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff ff4c 	bl	80016d8 <__NVIC_SetPriorityGrouping>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800185a:	f7ff ff61 	bl	8001720 <__NVIC_GetPriorityGrouping>
 800185e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	6978      	ldr	r0, [r7, #20]
 8001866:	f7ff ffb1 	bl	80017cc <NVIC_EncodePriority>
 800186a:	4602      	mov	r2, r0
 800186c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff80 	bl	8001778 <__NVIC_SetPriority>
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800188a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff54 	bl	800173c <__NVIC_EnableIRQ>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018aa:	e17f      	b.n	8001bac <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	2101      	movs	r1, #1
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	fa01 f303 	lsl.w	r3, r1, r3
 80018b8:	4013      	ands	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8171 	beq.w	8001ba6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d005      	beq.n	80018dc <HAL_GPIO_Init+0x40>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d130      	bne.n	800193e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001912:	2201      	movs	r2, #1
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 0201 	and.w	r2, r3, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b03      	cmp	r3, #3
 8001948:	d118      	bne.n	800197c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	08db      	lsrs	r3, r3, #3
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0303 	and.w	r3, r3, #3
 8001984:	2b03      	cmp	r3, #3
 8001986:	d017      	beq.n	80019b8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	2203      	movs	r2, #3
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d123      	bne.n	8001a0c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	08da      	lsrs	r2, r3, #3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3208      	adds	r2, #8
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f003 0307 	and.w	r3, r3, #7
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	220f      	movs	r2, #15
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	6939      	ldr	r1, [r7, #16]
 8001a08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	2203      	movs	r2, #3
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	4013      	ands	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 0203 	and.w	r2, r3, #3
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80ac 	beq.w	8001ba6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001bcc <HAL_GPIO_Init+0x330>)
 8001a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a52:	4a5e      	ldr	r2, [pc, #376]	@ (8001bcc <HAL_GPIO_Init+0x330>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001bcc <HAL_GPIO_Init+0x330>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a66:	4a5a      	ldr	r2, [pc, #360]	@ (8001bd0 <HAL_GPIO_Init+0x334>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a90:	d025      	beq.n	8001ade <HAL_GPIO_Init+0x242>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4f      	ldr	r2, [pc, #316]	@ (8001bd4 <HAL_GPIO_Init+0x338>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d01f      	beq.n	8001ada <HAL_GPIO_Init+0x23e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001bd8 <HAL_GPIO_Init+0x33c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d019      	beq.n	8001ad6 <HAL_GPIO_Init+0x23a>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4d      	ldr	r2, [pc, #308]	@ (8001bdc <HAL_GPIO_Init+0x340>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d013      	beq.n	8001ad2 <HAL_GPIO_Init+0x236>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4c      	ldr	r2, [pc, #304]	@ (8001be0 <HAL_GPIO_Init+0x344>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d00d      	beq.n	8001ace <HAL_GPIO_Init+0x232>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4b      	ldr	r2, [pc, #300]	@ (8001be4 <HAL_GPIO_Init+0x348>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d007      	beq.n	8001aca <HAL_GPIO_Init+0x22e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4a      	ldr	r2, [pc, #296]	@ (8001be8 <HAL_GPIO_Init+0x34c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d101      	bne.n	8001ac6 <HAL_GPIO_Init+0x22a>
 8001ac2:	2306      	movs	r3, #6
 8001ac4:	e00c      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00a      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001aca:	2305      	movs	r3, #5
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x244>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af0:	4937      	ldr	r1, [pc, #220]	@ (8001bd0 <HAL_GPIO_Init+0x334>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001afe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b22:	4a32      	ldr	r2, [pc, #200]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b28:	4b30      	ldr	r3, [pc, #192]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b4c:	4a27      	ldr	r2, [pc, #156]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b52:	4b26      	ldr	r3, [pc, #152]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b76:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ba0:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <HAL_GPIO_Init+0x350>)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f47f ae78 	bne.w	80018ac <HAL_GPIO_Init+0x10>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40010000 	.word	0x40010000
 8001bd4:	48000400 	.word	0x48000400
 8001bd8:	48000800 	.word	0x48000800
 8001bdc:	48000c00 	.word	0x48000c00
 8001be0:	48001000 	.word	0x48001000
 8001be4:	48001400 	.word	0x48001400
 8001be8:	48001800 	.word	0x48001800
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d002      	beq.n	8001c0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e001      	b.n	8001c12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3714      	adds	r7, #20
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40007000 	.word	0x40007000

08001c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c7a:	d130      	bne.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c7c:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c88:	d038      	beq.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c8a:	4b20      	ldr	r3, [pc, #128]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2232      	movs	r2, #50	@ 0x32
 8001ca0:	fb02 f303 	mul.w	r3, r2, r3
 8001ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d14 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8001caa:	0c9b      	lsrs	r3, r3, #18
 8001cac:	3301      	adds	r3, #1
 8001cae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb0:	e002      	b.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001cb8:	4b14      	ldr	r3, [pc, #80]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cba:	695b      	ldr	r3, [r3, #20]
 8001cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cc4:	d102      	bne.n	8001ccc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f2      	bne.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cd8:	d110      	bne.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e00f      	b.n	8001cfe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cea:	d007      	beq.n	8001cfc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cec:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cf4:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cfa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	20000008 	.word	0x20000008
 8001d14:	431bde83 	.word	0x431bde83

08001d18 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e3ca      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d2a:	4b97      	ldr	r3, [pc, #604]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f003 030c 	and.w	r3, r3, #12
 8001d32:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d34:	4b94      	ldr	r3, [pc, #592]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 80e4 	beq.w	8001f14 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d007      	beq.n	8001d62 <HAL_RCC_OscConfig+0x4a>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b0c      	cmp	r3, #12
 8001d56:	f040 808b 	bne.w	8001e70 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	f040 8087 	bne.w	8001e70 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d62:	4b89      	ldr	r3, [pc, #548]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_RCC_OscConfig+0x62>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e3a2      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1a      	ldr	r2, [r3, #32]
 8001d7e:	4b82      	ldr	r3, [pc, #520]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d004      	beq.n	8001d94 <HAL_RCC_OscConfig+0x7c>
 8001d8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d92:	e005      	b.n	8001da0 <HAL_RCC_OscConfig+0x88>
 8001d94:	4b7c      	ldr	r3, [pc, #496]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9a:	091b      	lsrs	r3, r3, #4
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d223      	bcs.n	8001dec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 fd87 	bl	80028bc <RCC_SetFlashLatencyFromMSIRange>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e383      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db8:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a72      	ldr	r2, [pc, #456]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b70      	ldr	r3, [pc, #448]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	496d      	ldr	r1, [pc, #436]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	4968      	ldr	r1, [pc, #416]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	604b      	str	r3, [r1, #4]
 8001dea:	e025      	b.n	8001e38 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dec:	4b66      	ldr	r3, [pc, #408]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a65      	ldr	r2, [pc, #404]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001df2:	f043 0308 	orr.w	r3, r3, #8
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b63      	ldr	r3, [pc, #396]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4960      	ldr	r1, [pc, #384]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e0a:	4b5f      	ldr	r3, [pc, #380]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	495b      	ldr	r1, [pc, #364]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d109      	bne.n	8001e38 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fd47 	bl	80028bc <RCC_SetFlashLatencyFromMSIRange>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e343      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e38:	f000 fc4a 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	4b52      	ldr	r3, [pc, #328]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	091b      	lsrs	r3, r3, #4
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	4950      	ldr	r1, [pc, #320]	@ (8001f8c <HAL_RCC_OscConfig+0x274>)
 8001e4a:	5ccb      	ldrb	r3, [r1, r3]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	4a4e      	ldr	r2, [pc, #312]	@ (8001f90 <HAL_RCC_OscConfig+0x278>)
 8001e56:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e58:	4b4e      	ldr	r3, [pc, #312]	@ (8001f94 <HAL_RCC_OscConfig+0x27c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fa9f 	bl	80013a0 <HAL_InitTick>
 8001e62:	4603      	mov	r3, r0
 8001e64:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d052      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
 8001e6e:	e327      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d032      	beq.n	8001ede <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e78:	4b43      	ldr	r3, [pc, #268]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a42      	ldr	r2, [pc, #264]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fc1c 	bl	80016c0 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e8c:	f7ff fc18 	bl	80016c0 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e310      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eaa:	4b37      	ldr	r3, [pc, #220]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a36      	ldr	r2, [pc, #216]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4931      	ldr	r1, [pc, #196]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	021b      	lsls	r3, r3, #8
 8001ed6:	492c      	ldr	r1, [pc, #176]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	e01a      	b.n	8001f14 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ede:	4b2a      	ldr	r3, [pc, #168]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a29      	ldr	r2, [pc, #164]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001ee4:	f023 0301 	bic.w	r3, r3, #1
 8001ee8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eea:	f7ff fbe9 	bl	80016c0 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ef2:	f7ff fbe5 	bl	80016c0 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e2dd      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f04:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x1da>
 8001f10:	e000      	b.n	8001f14 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f12:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d074      	beq.n	800200a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x21a>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	d10e      	bne.n	8001f4a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f32:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d064      	beq.n	8002008 <HAL_RCC_OscConfig+0x2f0>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d160      	bne.n	8002008 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e2ba      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x24a>
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0b      	ldr	r2, [pc, #44]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	e026      	b.n	8001fb0 <HAL_RCC_OscConfig+0x298>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f6a:	d115      	bne.n	8001f98 <HAL_RCC_OscConfig+0x280>
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a05      	ldr	r2, [pc, #20]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a02      	ldr	r2, [pc, #8]	@ (8001f88 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	e014      	b.n	8001fb0 <HAL_RCC_OscConfig+0x298>
 8001f86:	bf00      	nop
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	08008474 	.word	0x08008474
 8001f90:	20000008 	.word	0x20000008
 8001f94:	2000000c 	.word	0x2000000c
 8001f98:	4ba0      	ldr	r3, [pc, #640]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a9f      	ldr	r2, [pc, #636]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b9d      	ldr	r3, [pc, #628]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a9c      	ldr	r2, [pc, #624]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7ff fb82 	bl	80016c0 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7ff fb7e 	bl	80016c0 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	@ 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e276      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd2:	4b92      	ldr	r3, [pc, #584]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x2a8>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fb6e 	bl	80016c0 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fb6a 	bl	80016c0 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	@ 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e262      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffa:	4b88      	ldr	r3, [pc, #544]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2d0>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d060      	beq.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x310>
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b0c      	cmp	r3, #12
 8002020:	d119      	bne.n	8002056 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	2b02      	cmp	r3, #2
 8002026:	d116      	bne.n	8002056 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002028:	4b7c      	ldr	r3, [pc, #496]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_OscConfig+0x328>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e23f      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b76      	ldr	r3, [pc, #472]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691b      	ldr	r3, [r3, #16]
 800204c:	061b      	lsls	r3, r3, #24
 800204e:	4973      	ldr	r1, [pc, #460]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002054:	e040      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d023      	beq.n	80020a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800205e:	4b6f      	ldr	r3, [pc, #444]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a6e      	ldr	r2, [pc, #440]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206a:	f7ff fb29 	bl	80016c0 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002072:	f7ff fb25 	bl	80016c0 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e21d      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002084:	4b65      	ldr	r3, [pc, #404]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002090:	4b62      	ldr	r3, [pc, #392]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	061b      	lsls	r3, r3, #24
 800209e:	495f      	ldr	r1, [pc, #380]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
 80020a4:	e018      	b.n	80020d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020a6:	4b5d      	ldr	r3, [pc, #372]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a5c      	ldr	r2, [pc, #368]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80020ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff fb05 	bl	80016c0 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fb01 	bl	80016c0 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1f9      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020cc:	4b53      	ldr	r3, [pc, #332]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d1f0      	bne.n	80020ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0308 	and.w	r3, r3, #8
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d03c      	beq.n	800215e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d01c      	beq.n	8002126 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ec:	4b4b      	ldr	r3, [pc, #300]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80020ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020f2:	4a4a      	ldr	r2, [pc, #296]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7ff fae0 	bl	80016c0 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7ff fadc 	bl	80016c0 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e1d4      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002116:	4b41      	ldr	r3, [pc, #260]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002118:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ef      	beq.n	8002104 <HAL_RCC_OscConfig+0x3ec>
 8002124:	e01b      	b.n	800215e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002126:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002128:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800212c:	4a3b      	ldr	r2, [pc, #236]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 800212e:	f023 0301 	bic.w	r3, r3, #1
 8002132:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002136:	f7ff fac3 	bl	80016c0 <HAL_GetTick>
 800213a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800213c:	e008      	b.n	8002150 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213e:	f7ff fabf 	bl	80016c0 <HAL_GetTick>
 8002142:	4602      	mov	r2, r0
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1b7      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002150:	4b32      	ldr	r3, [pc, #200]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1ef      	bne.n	800213e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80a6 	beq.w	80022b8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800216c:	2300      	movs	r3, #0
 800216e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002170:	4b2a      	ldr	r3, [pc, #168]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800217c:	4b27      	ldr	r3, [pc, #156]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002180:	4a26      	ldr	r2, [pc, #152]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002186:	6593      	str	r3, [r2, #88]	@ 0x58
 8002188:	4b24      	ldr	r3, [pc, #144]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800218c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002190:	60bb      	str	r3, [r7, #8]
 8002192:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002194:	2301      	movs	r3, #1
 8002196:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002198:	4b21      	ldr	r3, [pc, #132]	@ (8002220 <HAL_RCC_OscConfig+0x508>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d118      	bne.n	80021d6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <HAL_RCC_OscConfig+0x508>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002220 <HAL_RCC_OscConfig+0x508>)
 80021aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b0:	f7ff fa86 	bl	80016c0 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b8:	f7ff fa82 	bl	80016c0 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e17a      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_RCC_OscConfig+0x508>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d108      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4d8>
 80021de:	4b0f      	ldr	r3, [pc, #60]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80021e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80021ee:	e029      	b.n	8002244 <HAL_RCC_OscConfig+0x52c>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d115      	bne.n	8002224 <HAL_RCC_OscConfig+0x50c>
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021fe:	4a07      	ldr	r2, [pc, #28]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002208:	4b04      	ldr	r3, [pc, #16]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 800220a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800220e:	4a03      	ldr	r2, [pc, #12]	@ (800221c <HAL_RCC_OscConfig+0x504>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002218:	e014      	b.n	8002244 <HAL_RCC_OscConfig+0x52c>
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40007000 	.word	0x40007000
 8002224:	4b9c      	ldr	r3, [pc, #624]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	4a9b      	ldr	r2, [pc, #620]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800222c:	f023 0301 	bic.w	r3, r3, #1
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002234:	4b98      	ldr	r3, [pc, #608]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800223a:	4a97      	ldr	r2, [pc, #604]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800223c:	f023 0304 	bic.w	r3, r3, #4
 8002240:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d016      	beq.n	800227a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff fa38 	bl	80016c0 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002252:	e00a      	b.n	800226a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002254:	f7ff fa34 	bl	80016c0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e12a      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800226a:	4b8b      	ldr	r3, [pc, #556]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002270:	f003 0302 	and.w	r3, r3, #2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d0ed      	beq.n	8002254 <HAL_RCC_OscConfig+0x53c>
 8002278:	e015      	b.n	80022a6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7ff fa21 	bl	80016c0 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002280:	e00a      	b.n	8002298 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7ff fa1d 	bl	80016c0 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e113      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002298:	4b7f      	ldr	r3, [pc, #508]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800229a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ed      	bne.n	8002282 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022a6:	7ffb      	ldrb	r3, [r7, #31]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d105      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ac:	4b7a      	ldr	r3, [pc, #488]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	4a79      	ldr	r2, [pc, #484]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80022b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022b6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 80fe 	beq.w	80024be <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	f040 80d0 	bne.w	800246c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022cc:	4b72      	ldr	r3, [pc, #456]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f003 0203 	and.w	r2, r3, #3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022dc:	429a      	cmp	r2, r3
 80022de:	d130      	bne.n	8002342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	3b01      	subs	r3, #1
 80022ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d127      	bne.n	8002342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d11f      	bne.n	8002342 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800230c:	2a07      	cmp	r2, #7
 800230e:	bf14      	ite	ne
 8002310:	2201      	movne	r2, #1
 8002312:	2200      	moveq	r2, #0
 8002314:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002316:	4293      	cmp	r3, r2
 8002318:	d113      	bne.n	8002342 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d109      	bne.n	8002342 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	085b      	lsrs	r3, r3, #1
 800233a:	3b01      	subs	r3, #1
 800233c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d06e      	beq.n	8002420 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b0c      	cmp	r3, #12
 8002346:	d069      	beq.n	800241c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002348:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002354:	4b50      	ldr	r3, [pc, #320]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0ad      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002364:	4b4c      	ldr	r3, [pc, #304]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a4b      	ldr	r2, [pc, #300]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800236a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002370:	f7ff f9a6 	bl	80016c0 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff f9a2 	bl	80016c0 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e09a      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238a:	4b43      	ldr	r3, [pc, #268]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002396:	4b40      	ldr	r3, [pc, #256]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002398:	68da      	ldr	r2, [r3, #12]
 800239a:	4b40      	ldr	r3, [pc, #256]	@ (800249c <HAL_RCC_OscConfig+0x784>)
 800239c:	4013      	ands	r3, r2
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023a6:	3a01      	subs	r2, #1
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80023b0:	0212      	lsls	r2, r2, #8
 80023b2:	4311      	orrs	r1, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80023b8:	0852      	lsrs	r2, r2, #1
 80023ba:	3a01      	subs	r2, #1
 80023bc:	0552      	lsls	r2, r2, #21
 80023be:	4311      	orrs	r1, r2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80023c4:	0852      	lsrs	r2, r2, #1
 80023c6:	3a01      	subs	r2, #1
 80023c8:	0652      	lsls	r2, r2, #25
 80023ca:	4311      	orrs	r1, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80023d0:	0912      	lsrs	r2, r2, #4
 80023d2:	0452      	lsls	r2, r2, #17
 80023d4:	430a      	orrs	r2, r1
 80023d6:	4930      	ldr	r1, [pc, #192]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80023e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 80023ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023f4:	f7ff f964 	bl	80016c0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fc:	f7ff f960 	bl	80016c0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e058      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800241a:	e050      	b.n	80024be <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e04f      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002420:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d148      	bne.n	80024be <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800242c:	4b1a      	ldr	r3, [pc, #104]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a19      	ldr	r2, [pc, #100]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002432:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002436:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002438:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4a16      	ldr	r2, [pc, #88]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 800243e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002442:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002444:	f7ff f93c 	bl	80016c0 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244a:	e008      	b.n	800245e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244c:	f7ff f938 	bl	80016c0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d901      	bls.n	800245e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e030      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800245e:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <HAL_RCC_OscConfig+0x734>
 800246a:	e028      	b.n	80024be <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b0c      	cmp	r3, #12
 8002470:	d023      	beq.n	80024ba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_RCC_OscConfig+0x780>)
 8002478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800247c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247e:	f7ff f91f 	bl	80016c0 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002484:	e00c      	b.n	80024a0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff f91b 	bl	80016c0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d905      	bls.n	80024a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e013      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
 8002498:	40021000 	.word	0x40021000
 800249c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_OscConfig+0x7b0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ec      	bne.n	8002486 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80024ac:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_RCC_OscConfig+0x7b0>)
 80024ae:	68da      	ldr	r2, [r3, #12]
 80024b0:	4905      	ldr	r1, [pc, #20]	@ (80024c8 <HAL_RCC_OscConfig+0x7b0>)
 80024b2:	4b06      	ldr	r3, [pc, #24]	@ (80024cc <HAL_RCC_OscConfig+0x7b4>)
 80024b4:	4013      	ands	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
 80024b8:	e001      	b.n	80024be <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000
 80024cc:	feeefffc 	.word	0xfeeefffc

080024d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0e7      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b75      	ldr	r3, [pc, #468]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d910      	bls.n	8002514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b72      	ldr	r3, [pc, #456]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	4970      	ldr	r1, [pc, #448]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b6e      	ldr	r3, [pc, #440]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0cf      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	4b66      	ldr	r3, [pc, #408]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800252c:	429a      	cmp	r2, r3
 800252e:	d908      	bls.n	8002542 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002530:	4b63      	ldr	r3, [pc, #396]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	4960      	ldr	r1, [pc, #384]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04c      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b03      	cmp	r3, #3
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002556:	4b5a      	ldr	r3, [pc, #360]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d121      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e0a6      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d107      	bne.n	800257e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256e:	4b54      	ldr	r3, [pc, #336]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d115      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e09a      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d107      	bne.n	8002596 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002586:	4b4e      	ldr	r3, [pc, #312]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e08e      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002596:	4b4a      	ldr	r3, [pc, #296]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e086      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025a6:	4b46      	ldr	r3, [pc, #280]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f023 0203 	bic.w	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4943      	ldr	r1, [pc, #268]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025b8:	f7ff f882 	bl	80016c0 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c0:	f7ff f87e 	bl	80016c0 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e06e      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025d6:	4b3a      	ldr	r3, [pc, #232]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 020c 	and.w	r2, r3, #12
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d1eb      	bne.n	80025c0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d010      	beq.n	8002616 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002600:	429a      	cmp	r2, r3
 8002602:	d208      	bcs.n	8002616 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b2e      	ldr	r3, [pc, #184]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	492b      	ldr	r1, [pc, #172]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	4313      	orrs	r3, r2
 8002614:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002616:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d210      	bcs.n	8002646 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002624:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 0207 	bic.w	r2, r3, #7
 800262c:	4923      	ldr	r1, [pc, #140]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	4313      	orrs	r3, r2
 8002632:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002634:	4b21      	ldr	r3, [pc, #132]	@ (80026bc <HAL_RCC_ClockConfig+0x1ec>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0307 	and.w	r3, r3, #7
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d001      	beq.n	8002646 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e036      	b.n	80026b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0304 	and.w	r3, r3, #4
 800264e:	2b00      	cmp	r3, #0
 8002650:	d008      	beq.n	8002664 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002652:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	4918      	ldr	r1, [pc, #96]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002660:	4313      	orrs	r3, r2
 8002662:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d009      	beq.n	8002684 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002670:	4b13      	ldr	r3, [pc, #76]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4910      	ldr	r1, [pc, #64]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 8002680:	4313      	orrs	r3, r2
 8002682:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002684:	f000 f824 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b0d      	ldr	r3, [pc, #52]	@ (80026c0 <HAL_RCC_ClockConfig+0x1f0>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 030f 	and.w	r3, r3, #15
 8002694:	490b      	ldr	r1, [pc, #44]	@ (80026c4 <HAL_RCC_ClockConfig+0x1f4>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	f003 031f 	and.w	r3, r3, #31
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
 80026a0:	4a09      	ldr	r2, [pc, #36]	@ (80026c8 <HAL_RCC_ClockConfig+0x1f8>)
 80026a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026a4:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_ClockConfig+0x1fc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe fe79 	bl	80013a0 <HAL_InitTick>
 80026ae:	4603      	mov	r3, r0
 80026b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80026b2:	7afb      	ldrb	r3, [r7, #11]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40022000 	.word	0x40022000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08008474 	.word	0x08008474
 80026c8:	20000008 	.word	0x20000008
 80026cc:	2000000c 	.word	0x2000000c

080026d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b089      	sub	sp, #36	@ 0x24
 80026d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	4b3e      	ldr	r3, [pc, #248]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e8:	4b3b      	ldr	r3, [pc, #236]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_GetSysClockFreq+0x34>
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d121      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d11e      	bne.n	8002742 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002704:	4b34      	ldr	r3, [pc, #208]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d107      	bne.n	8002720 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002710:	4b31      	ldr	r3, [pc, #196]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	f003 030f 	and.w	r3, r3, #15
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e005      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002720:	4b2d      	ldr	r3, [pc, #180]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	091b      	lsrs	r3, r3, #4
 8002726:	f003 030f 	and.w	r3, r3, #15
 800272a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800272c:	4a2b      	ldr	r2, [pc, #172]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002734:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10d      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d102      	bne.n	800274e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002748:	4b25      	ldr	r3, [pc, #148]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	e004      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d101      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002754:	4b23      	ldr	r3, [pc, #140]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002756:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	2b0c      	cmp	r3, #12
 800275c:	d134      	bne.n	80027c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800275e:	4b1e      	ldr	r3, [pc, #120]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	2b02      	cmp	r3, #2
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0xa6>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d003      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0xac>
 8002774:	e005      	b.n	8002782 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002776:	4b1a      	ldr	r3, [pc, #104]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002778:	617b      	str	r3, [r7, #20]
      break;
 800277a:	e005      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800277c:	4b19      	ldr	r3, [pc, #100]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800277e:	617b      	str	r3, [r7, #20]
      break;
 8002780:	e002      	b.n	8002788 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	617b      	str	r3, [r7, #20]
      break;
 8002786:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002788:	4b13      	ldr	r3, [pc, #76]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	091b      	lsrs	r3, r3, #4
 800278e:	f003 0307 	and.w	r3, r3, #7
 8002792:	3301      	adds	r3, #1
 8002794:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002796:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	fb03 f202 	mul.w	r2, r3, r2
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027ae:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	0e5b      	lsrs	r3, r3, #25
 80027b4:	f003 0303 	and.w	r3, r3, #3
 80027b8:	3301      	adds	r3, #1
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027c8:	69bb      	ldr	r3, [r7, #24]
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3724      	adds	r7, #36	@ 0x24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40021000 	.word	0x40021000
 80027dc:	0800848c 	.word	0x0800848c
 80027e0:	00f42400 	.word	0x00f42400
 80027e4:	007a1200 	.word	0x007a1200

080027e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027ec:	4b03      	ldr	r3, [pc, #12]	@ (80027fc <HAL_RCC_GetHCLKFreq+0x14>)
 80027ee:	681b      	ldr	r3, [r3, #0]
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000008 	.word	0x20000008

08002800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002804:	f7ff fff0 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_RCC_GetPCLK1Freq+0x24>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	0a1b      	lsrs	r3, r3, #8
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	4904      	ldr	r1, [pc, #16]	@ (8002828 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002820:	4618      	mov	r0, r3
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40021000 	.word	0x40021000
 8002828:	08008484 	.word	0x08008484

0800282c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002830:	f7ff ffda 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002834:	4602      	mov	r2, r0
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	0adb      	lsrs	r3, r3, #11
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	4904      	ldr	r1, [pc, #16]	@ (8002854 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002842:	5ccb      	ldrb	r3, [r1, r3]
 8002844:	f003 031f 	and.w	r3, r3, #31
 8002848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800284c:	4618      	mov	r0, r3
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	08008484 	.word	0x08008484

08002858 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	220f      	movs	r2, #15
 8002866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002868:	4b12      	ldr	r3, [pc, #72]	@ (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0203 	and.w	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002874:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800288c:	4b09      	ldr	r3, [pc, #36]	@ (80028b4 <HAL_RCC_GetClockConfig+0x5c>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800289a:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <HAL_RCC_GetClockConfig+0x60>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0207 	and.w	r2, r3, #7
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	601a      	str	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	40022000 	.word	0x40022000

080028bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028c4:	2300      	movs	r3, #0
 80028c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028d4:	f7ff f9bc 	bl	8001c50 <HAL_PWREx_GetVoltageRange>
 80028d8:	6178      	str	r0, [r7, #20]
 80028da:	e014      	b.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028dc:	4b25      	ldr	r3, [pc, #148]	@ (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028e0:	4a24      	ldr	r2, [pc, #144]	@ (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80028e8:	4b22      	ldr	r3, [pc, #136]	@ (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028f4:	f7ff f9ac 	bl	8001c50 <HAL_PWREx_GetVoltageRange>
 80028f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80028fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002974 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002904:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800290c:	d10b      	bne.n	8002926 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b80      	cmp	r3, #128	@ 0x80
 8002912:	d919      	bls.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2ba0      	cmp	r3, #160	@ 0xa0
 8002918:	d902      	bls.n	8002920 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800291a:	2302      	movs	r3, #2
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e013      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002920:	2301      	movs	r3, #1
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	e010      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b80      	cmp	r3, #128	@ 0x80
 800292a:	d902      	bls.n	8002932 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800292c:	2303      	movs	r3, #3
 800292e:	613b      	str	r3, [r7, #16]
 8002930:	e00a      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b80      	cmp	r3, #128	@ 0x80
 8002936:	d102      	bne.n	800293e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002938:	2302      	movs	r3, #2
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e004      	b.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b70      	cmp	r3, #112	@ 0x70
 8002942:	d101      	bne.n	8002948 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002944:	2301      	movs	r3, #1
 8002946:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002948:	4b0b      	ldr	r3, [pc, #44]	@ (8002978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f023 0207 	bic.w	r2, r3, #7
 8002950:	4909      	ldr	r1, [pc, #36]	@ (8002978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002958:	4b07      	ldr	r3, [pc, #28]	@ (8002978 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	429a      	cmp	r2, r3
 8002964:	d001      	beq.n	800296a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	40022000 	.word	0x40022000

0800297c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002984:	2300      	movs	r3, #0
 8002986:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002988:	2300      	movs	r3, #0
 800298a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002994:	2b00      	cmp	r3, #0
 8002996:	d041      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800299c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029a0:	d02a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80029a2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80029a6:	d824      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029ac:	d008      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80029ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80029b2:	d81e      	bhi.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00a      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80029b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029bc:	d010      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80029be:	e018      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029c0:	4b86      	ldr	r3, [pc, #536]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	4a85      	ldr	r2, [pc, #532]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029cc:	e015      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fabb 	bl	8002f50 <RCCEx_PLLSAI1_Config>
 80029da:	4603      	mov	r3, r0
 80029dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029de:	e00c      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	3320      	adds	r3, #32
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f000 fba6 	bl	8003138 <RCCEx_PLLSAI2_Config>
 80029ec:	4603      	mov	r3, r0
 80029ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029f0:	e003      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	74fb      	strb	r3, [r7, #19]
      break;
 80029f6:	e000      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029fa:	7cfb      	ldrb	r3, [r7, #19]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a00:	4b76      	ldr	r3, [pc, #472]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a06:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a0e:	4973      	ldr	r1, [pc, #460]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a16:	e001      	b.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a18:	7cfb      	ldrb	r3, [r7, #19]
 8002a1a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d041      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a2c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a30:	d02a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002a32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002a36:	d824      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a3c:	d008      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a42:	d81e      	bhi.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002a48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a4e:	e018      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a50:	4b62      	ldr	r3, [pc, #392]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4a61      	ldr	r2, [pc, #388]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a5a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a5c:	e015      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2100      	movs	r1, #0
 8002a64:	4618      	mov	r0, r3
 8002a66:	f000 fa73 	bl	8002f50 <RCCEx_PLLSAI1_Config>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a6e:	e00c      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3320      	adds	r3, #32
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fb5e 	bl	8003138 <RCCEx_PLLSAI2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a80:	e003      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	74fb      	strb	r3, [r7, #19]
      break;
 8002a86:	e000      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002a88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10b      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a90:	4b52      	ldr	r3, [pc, #328]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a96:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9e:	494f      	ldr	r1, [pc, #316]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002aa6:	e001      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a0 	beq.w	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aba:	2300      	movs	r3, #0
 8002abc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002abe:	4b47      	ldr	r3, [pc, #284]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ace:	2300      	movs	r3, #0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad8:	4a40      	ldr	r2, [pc, #256]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aec:	2301      	movs	r3, #1
 8002aee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af0:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a3a      	ldr	r2, [pc, #232]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afc:	f7fe fde0 	bl	80016c0 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b02:	e009      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b04:	f7fe fddc 	bl	80016c0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d902      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	74fb      	strb	r3, [r7, #19]
        break;
 8002b16:	e005      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b18:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0ef      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002b24:	7cfb      	ldrb	r3, [r7, #19]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d15c      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b34:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01f      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d019      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b48:	4b24      	ldr	r3, [pc, #144]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b54:	4b21      	ldr	r3, [pc, #132]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b5a:	4a20      	ldr	r2, [pc, #128]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b64:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b74:	4a19      	ldr	r2, [pc, #100]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d016      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b86:	f7fe fd9b 	bl	80016c0 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8c:	e00b      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b8e:	f7fe fd97 	bl	80016c0 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d902      	bls.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	74fb      	strb	r3, [r7, #19]
            break;
 8002ba4:	e006      	b.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0ec      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bba:	4b08      	ldr	r3, [pc, #32]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002bca:	4904      	ldr	r1, [pc, #16]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bd2:	e009      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bd4:	7cfb      	ldrb	r3, [r7, #19]
 8002bd6:	74bb      	strb	r3, [r7, #18]
 8002bd8:	e006      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be8:	7c7b      	ldrb	r3, [r7, #17]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bee:	4b9e      	ldr	r3, [pc, #632]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	4a9d      	ldr	r2, [pc, #628]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bf8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c06:	4b98      	ldr	r3, [pc, #608]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0c:	f023 0203 	bic.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c14:	4994      	ldr	r1, [pc, #592]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c28:	4b8f      	ldr	r3, [pc, #572]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c2e:	f023 020c 	bic.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c36:	498c      	ldr	r1, [pc, #560]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c4a:	4b87      	ldr	r3, [pc, #540]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	4983      	ldr	r1, [pc, #524]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c6c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7a:	497b      	ldr	r1, [pc, #492]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c8e:	4b76      	ldr	r3, [pc, #472]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c9c:	4972      	ldr	r1, [pc, #456]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb0:	4b6d      	ldr	r3, [pc, #436]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cbe:	496a      	ldr	r1, [pc, #424]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cd2:	4b65      	ldr	r3, [pc, #404]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	4961      	ldr	r1, [pc, #388]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d02:	4959      	ldr	r1, [pc, #356]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d16:	4b54      	ldr	r3, [pc, #336]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d24:	4950      	ldr	r1, [pc, #320]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d38:	4b4b      	ldr	r3, [pc, #300]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	4948      	ldr	r1, [pc, #288]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d5a:	4b43      	ldr	r3, [pc, #268]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	493f      	ldr	r1, [pc, #252]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d028      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d7c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d8a:	4937      	ldr	r1, [pc, #220]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d9a:	d106      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9c:	4b32      	ldr	r3, [pc, #200]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a31      	ldr	r2, [pc, #196]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002da6:	60d3      	str	r3, [r2, #12]
 8002da8:	e011      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002db2:	d10c      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3304      	adds	r3, #4
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f000 f8c8 	bl	8002f50 <RCCEx_PLLSAI1_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002dca:	7cfb      	ldrb	r3, [r7, #19]
 8002dcc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d028      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dda:	4b23      	ldr	r3, [pc, #140]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de8:	491f      	ldr	r1, [pc, #124]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002df8:	d106      	bne.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e04:	60d3      	str	r3, [r2, #12]
 8002e06:	e011      	b.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e10:	d10c      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2101      	movs	r1, #1
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 f899 	bl	8002f50 <RCCEx_PLLSAI1_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002e28:	7cfb      	ldrb	r3, [r7, #19]
 8002e2a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d02b      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e38:	4b0b      	ldr	r3, [pc, #44]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e46:	4908      	ldr	r1, [pc, #32]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e56:	d109      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e58:	4b03      	ldr	r3, [pc, #12]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a02      	ldr	r2, [pc, #8]	@ (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e62:	60d3      	str	r3, [r2, #12]
 8002e64:	e014      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002e66:	bf00      	nop
 8002e68:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 f867 	bl	8002f50 <RCCEx_PLLSAI1_Config>
 8002e82:	4603      	mov	r3, r0
 8002e84:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e86:	7cfb      	ldrb	r3, [r7, #19]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002e8c:	7cfb      	ldrb	r3, [r7, #19]
 8002e8e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d02f      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eaa:	4928      	ldr	r1, [pc, #160]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002eba:	d10d      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	2102      	movs	r1, #2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f000 f844 	bl	8002f50 <RCCEx_PLLSAI1_Config>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ecc:	7cfb      	ldrb	r3, [r7, #19]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d014      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ed2:	7cfb      	ldrb	r3, [r7, #19]
 8002ed4:	74bb      	strb	r3, [r7, #18]
 8002ed6:	e011      	b.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002edc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ee0:	d10c      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3320      	adds	r3, #32
 8002ee6:	2102      	movs	r1, #2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f925 	bl	8003138 <RCCEx_PLLSAI2_Config>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ef8:	7cfb      	ldrb	r3, [r7, #19]
 8002efa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f08:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f16:	490d      	ldr	r1, [pc, #52]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f2a:	4b08      	ldr	r3, [pc, #32]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f3a:	4904      	ldr	r1, [pc, #16]	@ (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f42:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000

08002f50 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f5e:	4b75      	ldr	r3, [pc, #468]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d018      	beq.n	8002f9c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f6a:	4b72      	ldr	r3, [pc, #456]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f003 0203 	and.w	r2, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d10d      	bne.n	8002f96 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
       ||
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d009      	beq.n	8002f96 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f82:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 0307 	and.w	r3, r3, #7
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
       ||
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d047      	beq.n	8003026 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e044      	b.n	8003026 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d018      	beq.n	8002fd6 <RCCEx_PLLSAI1_Config+0x86>
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d825      	bhi.n	8002ff4 <RCCEx_PLLSAI1_Config+0xa4>
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d002      	beq.n	8002fb2 <RCCEx_PLLSAI1_Config+0x62>
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d009      	beq.n	8002fc4 <RCCEx_PLLSAI1_Config+0x74>
 8002fb0:	e020      	b.n	8002ff4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fb2:	4b60      	ldr	r3, [pc, #384]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11d      	bne.n	8002ffa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc2:	e01a      	b.n	8002ffa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d116      	bne.n	8002ffe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd4:	e013      	b.n	8002ffe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fd6:	4b57      	ldr	r3, [pc, #348]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d10f      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fe2:	4b54      	ldr	r3, [pc, #336]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ff2:	e006      	b.n	8003002 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff8:	e004      	b.n	8003004 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ffa:	bf00      	nop
 8002ffc:	e002      	b.n	8003004 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ffe:	bf00      	nop
 8003000:	e000      	b.n	8003004 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003002:	bf00      	nop
    }

    if(status == HAL_OK)
 8003004:	7bfb      	ldrb	r3, [r7, #15]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10d      	bne.n	8003026 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800300a:	4b4a      	ldr	r3, [pc, #296]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	430b      	orrs	r3, r1
 8003020:	4944      	ldr	r1, [pc, #272]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003022:	4313      	orrs	r3, r2
 8003024:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003026:	7bfb      	ldrb	r3, [r7, #15]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d17d      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800302c:	4b41      	ldr	r3, [pc, #260]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a40      	ldr	r2, [pc, #256]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003032:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003036:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003038:	f7fe fb42 	bl	80016c0 <HAL_GetTick>
 800303c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800303e:	e009      	b.n	8003054 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003040:	f7fe fb3e 	bl	80016c0 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d902      	bls.n	8003054 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	73fb      	strb	r3, [r7, #15]
        break;
 8003052:	e005      	b.n	8003060 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003054:	4b37      	ldr	r3, [pc, #220]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ef      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d160      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d111      	bne.n	8003090 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800306c:	4b31      	ldr	r3, [pc, #196]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6892      	ldr	r2, [r2, #8]
 800307c:	0211      	lsls	r1, r2, #8
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	68d2      	ldr	r2, [r2, #12]
 8003082:	0912      	lsrs	r2, r2, #4
 8003084:	0452      	lsls	r2, r2, #17
 8003086:	430a      	orrs	r2, r1
 8003088:	492a      	ldr	r1, [pc, #168]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	610b      	str	r3, [r1, #16]
 800308e:	e027      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d112      	bne.n	80030bc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003096:	4b27      	ldr	r3, [pc, #156]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800309e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6892      	ldr	r2, [r2, #8]
 80030a6:	0211      	lsls	r1, r2, #8
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6912      	ldr	r2, [r2, #16]
 80030ac:	0852      	lsrs	r2, r2, #1
 80030ae:	3a01      	subs	r2, #1
 80030b0:	0552      	lsls	r2, r2, #21
 80030b2:	430a      	orrs	r2, r1
 80030b4:	491f      	ldr	r1, [pc, #124]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	610b      	str	r3, [r1, #16]
 80030ba:	e011      	b.n	80030e0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80030c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6892      	ldr	r2, [r2, #8]
 80030cc:	0211      	lsls	r1, r2, #8
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6952      	ldr	r2, [r2, #20]
 80030d2:	0852      	lsrs	r2, r2, #1
 80030d4:	3a01      	subs	r2, #1
 80030d6:	0652      	lsls	r2, r2, #25
 80030d8:	430a      	orrs	r2, r1
 80030da:	4916      	ldr	r1, [pc, #88]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030e0:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a13      	ldr	r2, [pc, #76]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 80030e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80030ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7fe fae8 	bl	80016c0 <HAL_GetTick>
 80030f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030f2:	e009      	b.n	8003108 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030f4:	f7fe fae4 	bl	80016c0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d902      	bls.n	8003108 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	73fb      	strb	r3, [r7, #15]
          break;
 8003106:	e005      	b.n	8003114 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0ef      	beq.n	80030f4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 800311c:	691a      	ldr	r2, [r3, #16]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4904      	ldr	r1, [pc, #16]	@ (8003134 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40021000 	.word	0x40021000

08003138 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003146:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f003 0303 	and.w	r3, r3, #3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d018      	beq.n	8003184 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003152:	4b67      	ldr	r3, [pc, #412]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0203 	and.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d10d      	bne.n	800317e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
       ||
 8003166:	2b00      	cmp	r3, #0
 8003168:	d009      	beq.n	800317e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800316a:	4b61      	ldr	r3, [pc, #388]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
       ||
 800317a:	429a      	cmp	r2, r3
 800317c:	d047      	beq.n	800320e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
 8003182:	e044      	b.n	800320e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b03      	cmp	r3, #3
 800318a:	d018      	beq.n	80031be <RCCEx_PLLSAI2_Config+0x86>
 800318c:	2b03      	cmp	r3, #3
 800318e:	d825      	bhi.n	80031dc <RCCEx_PLLSAI2_Config+0xa4>
 8003190:	2b01      	cmp	r3, #1
 8003192:	d002      	beq.n	800319a <RCCEx_PLLSAI2_Config+0x62>
 8003194:	2b02      	cmp	r3, #2
 8003196:	d009      	beq.n	80031ac <RCCEx_PLLSAI2_Config+0x74>
 8003198:	e020      	b.n	80031dc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800319a:	4b55      	ldr	r3, [pc, #340]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d11d      	bne.n	80031e2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031aa:	e01a      	b.n	80031e2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031ac:	4b50      	ldr	r3, [pc, #320]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d116      	bne.n	80031e6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031bc:	e013      	b.n	80031e6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031be:	4b4c      	ldr	r3, [pc, #304]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d10f      	bne.n	80031ea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031ca:	4b49      	ldr	r3, [pc, #292]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d109      	bne.n	80031ea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031da:	e006      	b.n	80031ea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
      break;
 80031e0:	e004      	b.n	80031ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031e2:	bf00      	nop
 80031e4:	e002      	b.n	80031ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031e6:	bf00      	nop
 80031e8:	e000      	b.n	80031ec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80031ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10d      	bne.n	800320e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031f2:	4b3f      	ldr	r3, [pc, #252]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	430b      	orrs	r3, r1
 8003208:	4939      	ldr	r1, [pc, #228]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800320a:	4313      	orrs	r3, r2
 800320c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d167      	bne.n	80032e4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003214:	4b36      	ldr	r3, [pc, #216]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a35      	ldr	r2, [pc, #212]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800321e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003220:	f7fe fa4e 	bl	80016c0 <HAL_GetTick>
 8003224:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003226:	e009      	b.n	800323c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003228:	f7fe fa4a 	bl	80016c0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d902      	bls.n	800323c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	73fb      	strb	r3, [r7, #15]
        break;
 800323a:	e005      	b.n	8003248 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800323c:	4b2c      	ldr	r3, [pc, #176]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ef      	bne.n	8003228 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003248:	7bfb      	ldrb	r3, [r7, #15]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d14a      	bne.n	80032e4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003254:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800325c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6892      	ldr	r2, [r2, #8]
 8003264:	0211      	lsls	r1, r2, #8
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	68d2      	ldr	r2, [r2, #12]
 800326a:	0912      	lsrs	r2, r2, #4
 800326c:	0452      	lsls	r2, r2, #17
 800326e:	430a      	orrs	r2, r1
 8003270:	491f      	ldr	r1, [pc, #124]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003272:	4313      	orrs	r3, r2
 8003274:	614b      	str	r3, [r1, #20]
 8003276:	e011      	b.n	800329c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003278:	4b1d      	ldr	r3, [pc, #116]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003280:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6892      	ldr	r2, [r2, #8]
 8003288:	0211      	lsls	r1, r2, #8
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6912      	ldr	r2, [r2, #16]
 800328e:	0852      	lsrs	r2, r2, #1
 8003290:	3a01      	subs	r2, #1
 8003292:	0652      	lsls	r2, r2, #25
 8003294:	430a      	orrs	r2, r1
 8003296:	4916      	ldr	r1, [pc, #88]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003298:	4313      	orrs	r3, r2
 800329a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800329c:	4b14      	ldr	r3, [pc, #80]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a13      	ldr	r2, [pc, #76]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fa0a 	bl	80016c0 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032ae:	e009      	b.n	80032c4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80032b0:	f7fe fa06 	bl	80016c0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d902      	bls.n	80032c4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	73fb      	strb	r3, [r7, #15]
          break;
 80032c2:	e005      	b.n	80032d0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80032c4:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ef      	beq.n	80032b0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	4904      	ldr	r1, [pc, #16]	@ (80032f0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40021000 	.word	0x40021000

080032f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e095      	b.n	8003432 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	2b00      	cmp	r3, #0
 800330c:	d108      	bne.n	8003320 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003316:	d009      	beq.n	800332c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	61da      	str	r2, [r3, #28]
 800331e:	e005      	b.n	800332c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd ff82 	bl	8001250 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003362:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800336c:	d902      	bls.n	8003374 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800336e:	2300      	movs	r3, #0
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e002      	b.n	800337a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003374:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003378:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003382:	d007      	beq.n	8003394 <HAL_SPI_Init+0xa0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800338c:	d002      	beq.n	8003394 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	69db      	ldr	r3, [r3, #28]
 80033c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a1b      	ldr	r3, [r3, #32]
 80033d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d6:	ea42 0103 	orr.w	r1, r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	f003 0204 	and.w	r2, r3, #4
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003410:	ea42 0103 	orr.w	r1, r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b088      	sub	sp, #32
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	603b      	str	r3, [r7, #0]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800344a:	f7fe f939 	bl	80016c0 <HAL_GetTick>
 800344e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003450:	88fb      	ldrh	r3, [r7, #6]
 8003452:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	d001      	beq.n	8003464 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
 8003462:	e15c      	b.n	800371e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_SPI_Transmit+0x36>
 800346a:	88fb      	ldrh	r3, [r7, #6]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e154      	b.n	800371e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_SPI_Transmit+0x48>
 800347e:	2302      	movs	r3, #2
 8003480:	e14d      	b.n	800371e <HAL_SPI_Transmit+0x2e4>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	88fa      	ldrh	r2, [r7, #6]
 80034a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	88fa      	ldrh	r2, [r7, #6]
 80034a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d4:	d10f      	bne.n	80034f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003500:	2b40      	cmp	r3, #64	@ 0x40
 8003502:	d007      	beq.n	8003514 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003512:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800351c:	d952      	bls.n	80035c4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_Transmit+0xf2>
 8003526:	8b7b      	ldrh	r3, [r7, #26]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d145      	bne.n	80035b8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003530:	881a      	ldrh	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	1c9a      	adds	r2, r3, #2
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003550:	e032      	b.n	80035b8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b02      	cmp	r3, #2
 800355e:	d112      	bne.n	8003586 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	881a      	ldrh	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003584:	e018      	b.n	80035b8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003586:	f7fe f89b 	bl	80016c0 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d803      	bhi.n	800359e <HAL_SPI_Transmit+0x164>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800359c:	d102      	bne.n	80035a4 <HAL_SPI_Transmit+0x16a>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e0b2      	b.n	800371e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035bc:	b29b      	uxth	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1c7      	bne.n	8003552 <HAL_SPI_Transmit+0x118>
 80035c2:	e083      	b.n	80036cc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_SPI_Transmit+0x198>
 80035cc:	8b7b      	ldrh	r3, [r7, #26]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d177      	bne.n	80036c2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d912      	bls.n	8003602 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ec:	1c9a      	adds	r2, r3, #2
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b02      	subs	r3, #2
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003600:	e05f      	b.n	80036c2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	7812      	ldrb	r2, [r2, #0]
 800360e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003628:	e04b      	b.n	80036c2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0302 	and.w	r3, r3, #2
 8003634:	2b02      	cmp	r3, #2
 8003636:	d12b      	bne.n	8003690 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363c:	b29b      	uxth	r3, r3
 800363e:	2b01      	cmp	r3, #1
 8003640:	d912      	bls.n	8003668 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003646:	881a      	ldrh	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003652:	1c9a      	adds	r2, r3, #2
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b02      	subs	r3, #2
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003666:	e02c      	b.n	80036c2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	7812      	ldrb	r2, [r2, #0]
 8003674:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800368e:	e018      	b.n	80036c2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003690:	f7fe f816 	bl	80016c0 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d803      	bhi.n	80036a8 <HAL_SPI_Transmit+0x26e>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036a6:	d102      	bne.n	80036ae <HAL_SPI_Transmit+0x274>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e02d      	b.n	800371e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1ae      	bne.n	800362a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	6839      	ldr	r1, [r7, #0]
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 f947 	bl	8003964 <SPI_EndRxTxTransaction>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	617b      	str	r3, [r7, #20]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800371c:	2300      	movs	r3, #0
  }
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003738:	f7fd ffc2 	bl	80016c0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	4413      	add	r3, r2
 8003746:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003748:	f7fd ffba 	bl	80016c0 <HAL_GetTick>
 800374c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800374e:	4b39      	ldr	r3, [pc, #228]	@ (8003834 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	015b      	lsls	r3, r3, #5
 8003754:	0d1b      	lsrs	r3, r3, #20
 8003756:	69fa      	ldr	r2, [r7, #28]
 8003758:	fb02 f303 	mul.w	r3, r2, r3
 800375c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800375e:	e054      	b.n	800380a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003766:	d050      	beq.n	800380a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003768:	f7fd ffaa 	bl	80016c0 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	429a      	cmp	r2, r3
 8003776:	d902      	bls.n	800377e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d13d      	bne.n	80037fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800378c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003796:	d111      	bne.n	80037bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037a0:	d004      	beq.n	80037ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037aa:	d107      	bne.n	80037bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037c4:	d10f      	bne.n	80037e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e017      	b.n	800382a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3b01      	subs	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	bf0c      	ite	eq
 800381a:	2301      	moveq	r3, #1
 800381c:	2300      	movne	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	79fb      	ldrb	r3, [r7, #7]
 8003824:	429a      	cmp	r2, r3
 8003826:	d19b      	bne.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	20000008 	.word	0x20000008

08003838 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	@ 0x28
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
 8003844:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800384a:	f7fd ff39 	bl	80016c0 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	4413      	add	r3, r2
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800385a:	f7fd ff31 	bl	80016c0 <HAL_GetTick>
 800385e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003868:	4b3d      	ldr	r3, [pc, #244]	@ (8003960 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00da      	lsls	r2, r3, #3
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	0d1b      	lsrs	r3, r3, #20
 8003878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387a:	fb02 f303 	mul.w	r3, r2, r3
 800387e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003880:	e060      	b.n	8003944 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003888:	d107      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout+0x62>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003898:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038a0:	d050      	beq.n	8003944 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038a2:	f7fd ff0d 	bl	80016c0 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d902      	bls.n	80038b8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d13d      	bne.n	8003934 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038d0:	d111      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038da:	d004      	beq.n	80038e6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e4:	d107      	bne.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038fe:	d10f      	bne.n	8003920 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800391e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e010      	b.n	8003956 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3b01      	subs	r3, #1
 8003942:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	4013      	ands	r3, r2
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	429a      	cmp	r2, r3
 8003952:	d196      	bne.n	8003882 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3728      	adds	r7, #40	@ 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000008 	.word	0x20000008

08003964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2200      	movs	r2, #0
 8003978:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f7ff ff5b 	bl	8003838 <SPI_WaitFifoStateUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d007      	beq.n	8003998 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398c:	f043 0220 	orr.w	r2, r3, #32
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e027      	b.n	80039e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	2200      	movs	r2, #0
 80039a0:	2180      	movs	r1, #128	@ 0x80
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fec0 	bl	8003728 <SPI_WaitFlagStateUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e014      	b.n	80039e8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff ff34 	bl	8003838 <SPI_WaitFifoStateUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d007      	beq.n	80039e6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e000      	b.n	80039e8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e049      	b.n	8003a96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f841 	bl	8003a9e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f000 f9e0 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b083      	sub	sp, #12
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d001      	beq.n	8003acc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e04f      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <HAL_TIM_Base_Start_IT+0xc4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d01d      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x76>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af6:	d018      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x76>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1f      	ldr	r2, [pc, #124]	@ (8003b7c <HAL_TIM_Base_Start_IT+0xc8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x76>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1e      	ldr	r2, [pc, #120]	@ (8003b80 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d00e      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x76>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1c      	ldr	r2, [pc, #112]	@ (8003b84 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x76>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8003b88 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d004      	beq.n	8003b2a <HAL_TIM_Base_Start_IT+0x76>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a19      	ldr	r2, [pc, #100]	@ (8003b8c <HAL_TIM_Base_Start_IT+0xd8>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d115      	bne.n	8003b56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b06      	cmp	r3, #6
 8003b3a:	d015      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0xb4>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b42:	d011      	beq.n	8003b68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b54:	e008      	b.n	8003b68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	e000      	b.n	8003b6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3714      	adds	r7, #20
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800
 8003b84:	40000c00 	.word	0x40000c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	00010007 	.word	0x00010007

08003b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d020      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0202 	mvn.w	r2, #2
 8003bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f8e9 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f8db 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f8ec 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d020      	beq.n	8003c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01b      	beq.n	8003c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0204 	mvn.w	r2, #4
 8003c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f8c3 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003c30:	e005      	b.n	8003c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8b5 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f8c6 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0208 	mvn.w	r2, #8
 8003c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2204      	movs	r2, #4
 8003c66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f89d 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f88f 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f8a0 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0310 	and.w	r3, r3, #16
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0210 	mvn.w	r2, #16
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2208      	movs	r2, #8
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f877 	bl	8003db6 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f869 	bl	8003da2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f87a 	bl	8003dca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00c      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0201 	mvn.w	r2, #1
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fa52 	bl	80011a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00c      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f913 	bl	8003f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00c      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f90b 	bl	8003f68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00c      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d007      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f834 	bl	8003dde <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f003 0320 	and.w	r3, r3, #32
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00c      	beq.n	8003d9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d007      	beq.n	8003d9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f06f 0220 	mvn.w	r2, #32
 8003d92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f8d3 	bl	8003f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9a:	bf00      	nop
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
	...

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a46      	ldr	r2, [pc, #280]	@ (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a43      	ldr	r2, [pc, #268]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a42      	ldr	r2, [pc, #264]	@ (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a41      	ldr	r2, [pc, #260]	@ (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a40      	ldr	r2, [pc, #256]	@ (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a35      	ldr	r2, [pc, #212]	@ (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d01f      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e54:	d01b      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a32      	ldr	r2, [pc, #200]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d017      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a31      	ldr	r2, [pc, #196]	@ (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a30      	ldr	r2, [pc, #192]	@ (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00f      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2f      	ldr	r2, [pc, #188]	@ (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d00b      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2e      	ldr	r2, [pc, #184]	@ (8003f34 <TIM_Base_SetConfig+0x140>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d007      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2d      	ldr	r2, [pc, #180]	@ (8003f38 <TIM_Base_SetConfig+0x144>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_Base_SetConfig+0x9a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2c      	ldr	r2, [pc, #176]	@ (8003f3c <TIM_Base_SetConfig+0x148>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d108      	bne.n	8003ea0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a16      	ldr	r2, [pc, #88]	@ (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d00f      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a18      	ldr	r2, [pc, #96]	@ (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	@ (8003f34 <TIM_Base_SetConfig+0x140>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a16      	ldr	r2, [pc, #88]	@ (8003f38 <TIM_Base_SetConfig+0x144>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_Base_SetConfig+0xf8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	@ (8003f3c <TIM_Base_SetConfig+0x148>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d103      	bne.n	8003ef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	691a      	ldr	r2, [r3, #16]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	f023 0201 	bic.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]
  }
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800
 8003f2c:	40000c00 	.word	0x40000c00
 8003f30:	40013400 	.word	0x40013400
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800

08003f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d101      	bne.n	8003f8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e040      	b.n	8004010 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d106      	bne.n	8003fa4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7fd fad4 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2224      	movs	r2, #36	@ 0x24
 8003fa8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0201 	bic.w	r2, r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fae0 	bl	8004588 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f825 	bl	8004018 <UART_SetConfig>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e01b      	b.n	8004010 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fb5f 	bl	80046cc <UART_CheckIdleState>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800401c:	b08a      	sub	sp, #40	@ 0x28
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689a      	ldr	r2, [r3, #8]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	431a      	orrs	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	431a      	orrs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	4313      	orrs	r3, r2
 800403e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	4ba4      	ldr	r3, [pc, #656]	@ (80042d8 <UART_SetConfig+0x2c0>)
 8004048:	4013      	ands	r3, r2
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004050:	430b      	orrs	r3, r1
 8004052:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a99      	ldr	r2, [pc, #612]	@ (80042dc <UART_SetConfig+0x2c4>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d004      	beq.n	8004084 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004080:	4313      	orrs	r3, r2
 8004082:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004094:	430a      	orrs	r2, r1
 8004096:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a90      	ldr	r2, [pc, #576]	@ (80042e0 <UART_SetConfig+0x2c8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d126      	bne.n	80040f0 <UART_SetConfig+0xd8>
 80040a2:	4b90      	ldr	r3, [pc, #576]	@ (80042e4 <UART_SetConfig+0x2cc>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d81b      	bhi.n	80040e8 <UART_SetConfig+0xd0>
 80040b0:	a201      	add	r2, pc, #4	@ (adr r2, 80040b8 <UART_SetConfig+0xa0>)
 80040b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b6:	bf00      	nop
 80040b8:	080040c9 	.word	0x080040c9
 80040bc:	080040d9 	.word	0x080040d9
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040e1 	.word	0x080040e1
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ce:	e116      	b.n	80042fe <UART_SetConfig+0x2e6>
 80040d0:	2302      	movs	r3, #2
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040d6:	e112      	b.n	80042fe <UART_SetConfig+0x2e6>
 80040d8:	2304      	movs	r3, #4
 80040da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040de:	e10e      	b.n	80042fe <UART_SetConfig+0x2e6>
 80040e0:	2308      	movs	r3, #8
 80040e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040e6:	e10a      	b.n	80042fe <UART_SetConfig+0x2e6>
 80040e8:	2310      	movs	r3, #16
 80040ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ee:	e106      	b.n	80042fe <UART_SetConfig+0x2e6>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a7c      	ldr	r2, [pc, #496]	@ (80042e8 <UART_SetConfig+0x2d0>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d138      	bne.n	800416c <UART_SetConfig+0x154>
 80040fa:	4b7a      	ldr	r3, [pc, #488]	@ (80042e4 <UART_SetConfig+0x2cc>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004100:	f003 030c 	and.w	r3, r3, #12
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d82d      	bhi.n	8004164 <UART_SetConfig+0x14c>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <UART_SetConfig+0xf8>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004145 	.word	0x08004145
 8004114:	08004165 	.word	0x08004165
 8004118:	08004165 	.word	0x08004165
 800411c:	08004165 	.word	0x08004165
 8004120:	08004155 	.word	0x08004155
 8004124:	08004165 	.word	0x08004165
 8004128:	08004165 	.word	0x08004165
 800412c:	08004165 	.word	0x08004165
 8004130:	0800414d 	.word	0x0800414d
 8004134:	08004165 	.word	0x08004165
 8004138:	08004165 	.word	0x08004165
 800413c:	08004165 	.word	0x08004165
 8004140:	0800415d 	.word	0x0800415d
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e0d8      	b.n	80042fe <UART_SetConfig+0x2e6>
 800414c:	2302      	movs	r3, #2
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e0d4      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004154:	2304      	movs	r3, #4
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415a:	e0d0      	b.n	80042fe <UART_SetConfig+0x2e6>
 800415c:	2308      	movs	r3, #8
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004162:	e0cc      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004164:	2310      	movs	r3, #16
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416a:	e0c8      	b.n	80042fe <UART_SetConfig+0x2e6>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a5e      	ldr	r2, [pc, #376]	@ (80042ec <UART_SetConfig+0x2d4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d125      	bne.n	80041c2 <UART_SetConfig+0x1aa>
 8004176:	4b5b      	ldr	r3, [pc, #364]	@ (80042e4 <UART_SetConfig+0x2cc>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004180:	2b30      	cmp	r3, #48	@ 0x30
 8004182:	d016      	beq.n	80041b2 <UART_SetConfig+0x19a>
 8004184:	2b30      	cmp	r3, #48	@ 0x30
 8004186:	d818      	bhi.n	80041ba <UART_SetConfig+0x1a2>
 8004188:	2b20      	cmp	r3, #32
 800418a:	d00a      	beq.n	80041a2 <UART_SetConfig+0x18a>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d814      	bhi.n	80041ba <UART_SetConfig+0x1a2>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <UART_SetConfig+0x182>
 8004194:	2b10      	cmp	r3, #16
 8004196:	d008      	beq.n	80041aa <UART_SetConfig+0x192>
 8004198:	e00f      	b.n	80041ba <UART_SetConfig+0x1a2>
 800419a:	2300      	movs	r3, #0
 800419c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a0:	e0ad      	b.n	80042fe <UART_SetConfig+0x2e6>
 80041a2:	2302      	movs	r3, #2
 80041a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041a8:	e0a9      	b.n	80042fe <UART_SetConfig+0x2e6>
 80041aa:	2304      	movs	r3, #4
 80041ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b0:	e0a5      	b.n	80042fe <UART_SetConfig+0x2e6>
 80041b2:	2308      	movs	r3, #8
 80041b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b8:	e0a1      	b.n	80042fe <UART_SetConfig+0x2e6>
 80041ba:	2310      	movs	r3, #16
 80041bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c0:	e09d      	b.n	80042fe <UART_SetConfig+0x2e6>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a4a      	ldr	r2, [pc, #296]	@ (80042f0 <UART_SetConfig+0x2d8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d125      	bne.n	8004218 <UART_SetConfig+0x200>
 80041cc:	4b45      	ldr	r3, [pc, #276]	@ (80042e4 <UART_SetConfig+0x2cc>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80041d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80041d8:	d016      	beq.n	8004208 <UART_SetConfig+0x1f0>
 80041da:	2bc0      	cmp	r3, #192	@ 0xc0
 80041dc:	d818      	bhi.n	8004210 <UART_SetConfig+0x1f8>
 80041de:	2b80      	cmp	r3, #128	@ 0x80
 80041e0:	d00a      	beq.n	80041f8 <UART_SetConfig+0x1e0>
 80041e2:	2b80      	cmp	r3, #128	@ 0x80
 80041e4:	d814      	bhi.n	8004210 <UART_SetConfig+0x1f8>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <UART_SetConfig+0x1d8>
 80041ea:	2b40      	cmp	r3, #64	@ 0x40
 80041ec:	d008      	beq.n	8004200 <UART_SetConfig+0x1e8>
 80041ee:	e00f      	b.n	8004210 <UART_SetConfig+0x1f8>
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041f6:	e082      	b.n	80042fe <UART_SetConfig+0x2e6>
 80041f8:	2302      	movs	r3, #2
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041fe:	e07e      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004200:	2304      	movs	r3, #4
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004206:	e07a      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004208:	2308      	movs	r3, #8
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420e:	e076      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004216:	e072      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a35      	ldr	r2, [pc, #212]	@ (80042f4 <UART_SetConfig+0x2dc>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d12a      	bne.n	8004278 <UART_SetConfig+0x260>
 8004222:	4b30      	ldr	r3, [pc, #192]	@ (80042e4 <UART_SetConfig+0x2cc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004228:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800422c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004230:	d01a      	beq.n	8004268 <UART_SetConfig+0x250>
 8004232:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004236:	d81b      	bhi.n	8004270 <UART_SetConfig+0x258>
 8004238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800423c:	d00c      	beq.n	8004258 <UART_SetConfig+0x240>
 800423e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004242:	d815      	bhi.n	8004270 <UART_SetConfig+0x258>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <UART_SetConfig+0x238>
 8004248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800424c:	d008      	beq.n	8004260 <UART_SetConfig+0x248>
 800424e:	e00f      	b.n	8004270 <UART_SetConfig+0x258>
 8004250:	2300      	movs	r3, #0
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004256:	e052      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004258:	2302      	movs	r3, #2
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800425e:	e04e      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004260:	2304      	movs	r3, #4
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004266:	e04a      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004268:	2308      	movs	r3, #8
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800426e:	e046      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004270:	2310      	movs	r3, #16
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004276:	e042      	b.n	80042fe <UART_SetConfig+0x2e6>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a17      	ldr	r2, [pc, #92]	@ (80042dc <UART_SetConfig+0x2c4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d13a      	bne.n	80042f8 <UART_SetConfig+0x2e0>
 8004282:	4b18      	ldr	r3, [pc, #96]	@ (80042e4 <UART_SetConfig+0x2cc>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004288:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800428c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004290:	d01a      	beq.n	80042c8 <UART_SetConfig+0x2b0>
 8004292:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004296:	d81b      	bhi.n	80042d0 <UART_SetConfig+0x2b8>
 8004298:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800429c:	d00c      	beq.n	80042b8 <UART_SetConfig+0x2a0>
 800429e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042a2:	d815      	bhi.n	80042d0 <UART_SetConfig+0x2b8>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <UART_SetConfig+0x298>
 80042a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042ac:	d008      	beq.n	80042c0 <UART_SetConfig+0x2a8>
 80042ae:	e00f      	b.n	80042d0 <UART_SetConfig+0x2b8>
 80042b0:	2300      	movs	r3, #0
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b6:	e022      	b.n	80042fe <UART_SetConfig+0x2e6>
 80042b8:	2302      	movs	r3, #2
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042be:	e01e      	b.n	80042fe <UART_SetConfig+0x2e6>
 80042c0:	2304      	movs	r3, #4
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042c6:	e01a      	b.n	80042fe <UART_SetConfig+0x2e6>
 80042c8:	2308      	movs	r3, #8
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ce:	e016      	b.n	80042fe <UART_SetConfig+0x2e6>
 80042d0:	2310      	movs	r3, #16
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e012      	b.n	80042fe <UART_SetConfig+0x2e6>
 80042d8:	efff69f3 	.word	0xefff69f3
 80042dc:	40008000 	.word	0x40008000
 80042e0:	40013800 	.word	0x40013800
 80042e4:	40021000 	.word	0x40021000
 80042e8:	40004400 	.word	0x40004400
 80042ec:	40004800 	.word	0x40004800
 80042f0:	40004c00 	.word	0x40004c00
 80042f4:	40005000 	.word	0x40005000
 80042f8:	2310      	movs	r3, #16
 80042fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a9f      	ldr	r2, [pc, #636]	@ (8004580 <UART_SetConfig+0x568>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d17a      	bne.n	80043fe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004308:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800430c:	2b08      	cmp	r3, #8
 800430e:	d824      	bhi.n	800435a <UART_SetConfig+0x342>
 8004310:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <UART_SetConfig+0x300>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800433d 	.word	0x0800433d
 800431c:	0800435b 	.word	0x0800435b
 8004320:	08004345 	.word	0x08004345
 8004324:	0800435b 	.word	0x0800435b
 8004328:	0800434b 	.word	0x0800434b
 800432c:	0800435b 	.word	0x0800435b
 8004330:	0800435b 	.word	0x0800435b
 8004334:	0800435b 	.word	0x0800435b
 8004338:	08004353 	.word	0x08004353
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800433c:	f7fe fa60 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 8004340:	61f8      	str	r0, [r7, #28]
        break;
 8004342:	e010      	b.n	8004366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004344:	4b8f      	ldr	r3, [pc, #572]	@ (8004584 <UART_SetConfig+0x56c>)
 8004346:	61fb      	str	r3, [r7, #28]
        break;
 8004348:	e00d      	b.n	8004366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800434a:	f7fe f9c1 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 800434e:	61f8      	str	r0, [r7, #28]
        break;
 8004350:	e009      	b.n	8004366 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004356:	61fb      	str	r3, [r7, #28]
        break;
 8004358:	e005      	b.n	8004366 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004364:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80fb 	beq.w	8004564 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	685a      	ldr	r2, [r3, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	429a      	cmp	r2, r3
 800437c:	d305      	bcc.n	800438a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004384:	69fa      	ldr	r2, [r7, #28]
 8004386:	429a      	cmp	r2, r3
 8004388:	d903      	bls.n	8004392 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004390:	e0e8      	b.n	8004564 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	2200      	movs	r2, #0
 8004396:	461c      	mov	r4, r3
 8004398:	4615      	mov	r5, r2
 800439a:	f04f 0200 	mov.w	r2, #0
 800439e:	f04f 0300 	mov.w	r3, #0
 80043a2:	022b      	lsls	r3, r5, #8
 80043a4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80043a8:	0222      	lsls	r2, r4, #8
 80043aa:	68f9      	ldr	r1, [r7, #12]
 80043ac:	6849      	ldr	r1, [r1, #4]
 80043ae:	0849      	lsrs	r1, r1, #1
 80043b0:	2000      	movs	r0, #0
 80043b2:	4688      	mov	r8, r1
 80043b4:	4681      	mov	r9, r0
 80043b6:	eb12 0a08 	adds.w	sl, r2, r8
 80043ba:	eb43 0b09 	adc.w	fp, r3, r9
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	603b      	str	r3, [r7, #0]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043cc:	4650      	mov	r0, sl
 80043ce:	4659      	mov	r1, fp
 80043d0:	f7fb fefe 	bl	80001d0 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4613      	mov	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e2:	d308      	bcc.n	80043f6 <UART_SetConfig+0x3de>
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043ea:	d204      	bcs.n	80043f6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	e0b6      	b.n	8004564 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043fc:	e0b2      	b.n	8004564 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004406:	d15e      	bne.n	80044c6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004408:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800440c:	2b08      	cmp	r3, #8
 800440e:	d828      	bhi.n	8004462 <UART_SetConfig+0x44a>
 8004410:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <UART_SetConfig+0x400>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800443d 	.word	0x0800443d
 800441c:	08004445 	.word	0x08004445
 8004420:	0800444d 	.word	0x0800444d
 8004424:	08004463 	.word	0x08004463
 8004428:	08004453 	.word	0x08004453
 800442c:	08004463 	.word	0x08004463
 8004430:	08004463 	.word	0x08004463
 8004434:	08004463 	.word	0x08004463
 8004438:	0800445b 	.word	0x0800445b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800443c:	f7fe f9e0 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 8004440:	61f8      	str	r0, [r7, #28]
        break;
 8004442:	e014      	b.n	800446e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004444:	f7fe f9f2 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8004448:	61f8      	str	r0, [r7, #28]
        break;
 800444a:	e010      	b.n	800446e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800444c:	4b4d      	ldr	r3, [pc, #308]	@ (8004584 <UART_SetConfig+0x56c>)
 800444e:	61fb      	str	r3, [r7, #28]
        break;
 8004450:	e00d      	b.n	800446e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004452:	f7fe f93d 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8004456:	61f8      	str	r0, [r7, #28]
        break;
 8004458:	e009      	b.n	800446e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800445e:	61fb      	str	r3, [r7, #28]
        break;
 8004460:	e005      	b.n	800446e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800446c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d077      	beq.n	8004564 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	005a      	lsls	r2, r3, #1
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	441a      	add	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	fbb2 f3f3 	udiv	r3, r2, r3
 8004488:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b0f      	cmp	r3, #15
 800448e:	d916      	bls.n	80044be <UART_SetConfig+0x4a6>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004496:	d212      	bcs.n	80044be <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	b29b      	uxth	r3, r3
 800449c:	f023 030f 	bic.w	r3, r3, #15
 80044a0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	085b      	lsrs	r3, r3, #1
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	8afb      	ldrh	r3, [r7, #22]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	8afa      	ldrh	r2, [r7, #22]
 80044ba:	60da      	str	r2, [r3, #12]
 80044bc:	e052      	b.n	8004564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044c4:	e04e      	b.n	8004564 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044c6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d827      	bhi.n	800451e <UART_SetConfig+0x506>
 80044ce:	a201      	add	r2, pc, #4	@ (adr r2, 80044d4 <UART_SetConfig+0x4bc>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	08004501 	.word	0x08004501
 80044dc:	08004509 	.word	0x08004509
 80044e0:	0800451f 	.word	0x0800451f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800451f 	.word	0x0800451f
 80044ec:	0800451f 	.word	0x0800451f
 80044f0:	0800451f 	.word	0x0800451f
 80044f4:	08004517 	.word	0x08004517
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f8:	f7fe f982 	bl	8002800 <HAL_RCC_GetPCLK1Freq>
 80044fc:	61f8      	str	r0, [r7, #28]
        break;
 80044fe:	e014      	b.n	800452a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004500:	f7fe f994 	bl	800282c <HAL_RCC_GetPCLK2Freq>
 8004504:	61f8      	str	r0, [r7, #28]
        break;
 8004506:	e010      	b.n	800452a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004508:	4b1e      	ldr	r3, [pc, #120]	@ (8004584 <UART_SetConfig+0x56c>)
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e00d      	b.n	800452a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800450e:	f7fe f8df 	bl	80026d0 <HAL_RCC_GetSysClockFreq>
 8004512:	61f8      	str	r0, [r7, #28]
        break;
 8004514:	e009      	b.n	800452a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004516:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800451a:	61fb      	str	r3, [r7, #28]
        break;
 800451c:	e005      	b.n	800452a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004528:	bf00      	nop
    }

    if (pclk != 0U)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d019      	beq.n	8004564 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	085a      	lsrs	r2, r3, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	d909      	bls.n	800455e <UART_SetConfig+0x546>
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004550:	d205      	bcs.n	800455e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	60da      	str	r2, [r3, #12]
 800455c:	e002      	b.n	8004564 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004570:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004574:	4618      	mov	r0, r3
 8004576:	3728      	adds	r7, #40	@ 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457e:	bf00      	nop
 8004580:	40008000 	.word	0x40008000
 8004584:	00f42400 	.word	0x00f42400

08004588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00a      	beq.n	80045d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	430a      	orrs	r2, r1
 80045d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00a      	beq.n	8004618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	430a      	orrs	r2, r1
 8004616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	430a      	orrs	r2, r1
 8004638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01a      	beq.n	800469e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004686:	d10a      	bne.n	800469e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00a      	beq.n	80046c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]
  }
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b098      	sub	sp, #96	@ 0x60
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046dc:	f7fc fff0 	bl	80016c0 <HAL_GetTick>
 80046e0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0308 	and.w	r3, r3, #8
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d12e      	bne.n	800474e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f8:	2200      	movs	r2, #0
 80046fa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f88c 	bl	800481c <UART_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d021      	beq.n	800474e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	e853 3f00 	ldrex	r3, [r3]
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004718:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800471e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004728:	647b      	str	r3, [r7, #68]	@ 0x44
 800472a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800472e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004730:	e841 2300 	strex	r3, r2, [r1]
 8004734:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e6      	bne.n	800470a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e062      	b.n	8004814 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b04      	cmp	r3, #4
 800475a:	d149      	bne.n	80047f0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800475c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004764:	2200      	movs	r2, #0
 8004766:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f856 	bl	800481c <UART_WaitOnFlagUntilTimeout>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d03c      	beq.n	80047f0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	e853 3f00 	ldrex	r3, [r3]
 8004782:	623b      	str	r3, [r7, #32]
   return(result);
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800478a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30
 8004796:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800479a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800479c:	e841 2300 	strex	r3, r2, [r1]
 80047a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1e6      	bne.n	8004776 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3308      	adds	r3, #8
 80047ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	e853 3f00 	ldrex	r3, [r3]
 80047b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f023 0301 	bic.w	r3, r3, #1
 80047be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3308      	adds	r3, #8
 80047c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047c8:	61fa      	str	r2, [r7, #28]
 80047ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047cc:	69b9      	ldr	r1, [r7, #24]
 80047ce:	69fa      	ldr	r2, [r7, #28]
 80047d0:	e841 2300 	strex	r3, r2, [r1]
 80047d4:	617b      	str	r3, [r7, #20]
   return(result);
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e5      	bne.n	80047a8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e011      	b.n	8004814 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3758      	adds	r7, #88	@ 0x58
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482c:	e04f      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004834:	d04b      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fc ff43 	bl	80016c0 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <UART_WaitOnFlagUntilTimeout+0x30>
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e04e      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0304 	and.w	r3, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	d037      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xb2>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	2b80      	cmp	r3, #128	@ 0x80
 8004862:	d034      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b40      	cmp	r3, #64	@ 0x40
 8004868:	d031      	beq.n	80048ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d110      	bne.n	800489a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2208      	movs	r2, #8
 800487e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f000 f838 	bl	80048f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2208      	movs	r2, #8
 800488a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e029      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048a8:	d111      	bne.n	80048ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 f81e 	bl	80048f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2220      	movs	r2, #32
 80048be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e00f      	b.n	80048ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69da      	ldr	r2, [r3, #28]
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	4013      	ands	r3, r2
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	429a      	cmp	r2, r3
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d0a0      	beq.n	800482e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b095      	sub	sp, #84	@ 0x54
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004906:	e853 3f00 	ldrex	r3, [r3]
 800490a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800491c:	643b      	str	r3, [r7, #64]	@ 0x40
 800491e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004920:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004922:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004924:	e841 2300 	strex	r3, r2, [r1]
 8004928:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800492a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1e6      	bne.n	80048fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3308      	adds	r3, #8
 8004936:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	e853 3f00 	ldrex	r3, [r3]
 800493e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f023 0301 	bic.w	r3, r3, #1
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004950:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004952:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004956:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004958:	e841 2300 	strex	r3, r2, [r1]
 800495c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1e5      	bne.n	8004930 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004968:	2b01      	cmp	r3, #1
 800496a:	d118      	bne.n	800499e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	e853 3f00 	ldrex	r3, [r3]
 8004978:	60bb      	str	r3, [r7, #8]
   return(result);
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f023 0310 	bic.w	r3, r3, #16
 8004980:	647b      	str	r3, [r7, #68]	@ 0x44
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498e:	6979      	ldr	r1, [r7, #20]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	e841 2300 	strex	r3, r2, [r1]
 8004996:	613b      	str	r3, [r7, #16]
   return(result);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1e6      	bne.n	800496c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80049b2:	bf00      	nop
 80049b4:	3754      	adds	r7, #84	@ 0x54
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <__NVIC_SetPriority>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	6039      	str	r1, [r7, #0]
 80049ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	db0a      	blt.n	80049ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	490c      	ldr	r1, [pc, #48]	@ (8004a0c <__NVIC_SetPriority+0x4c>)
 80049da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049de:	0112      	lsls	r2, r2, #4
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	440b      	add	r3, r1
 80049e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80049e8:	e00a      	b.n	8004a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	4908      	ldr	r1, [pc, #32]	@ (8004a10 <__NVIC_SetPriority+0x50>)
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	3b04      	subs	r3, #4
 80049f8:	0112      	lsls	r2, r2, #4
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	440b      	add	r3, r1
 80049fe:	761a      	strb	r2, [r3, #24]
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000e100 	.word	0xe000e100
 8004a10:	e000ed00 	.word	0xe000ed00

08004a14 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <SysTick_Handler+0x1c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004a1c:	f002 f994 	bl	8006d48 <xTaskGetSchedulerState>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d001      	beq.n	8004a2a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004a26:	f003 f88f 	bl	8007b48 <xPortSysTickHandler>
  }
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	e000e010 	.word	0xe000e010

08004a34 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004a38:	2100      	movs	r1, #0
 8004a3a:	f06f 0004 	mvn.w	r0, #4
 8004a3e:	f7ff ffbf 	bl	80049c0 <__NVIC_SetPriority>
#endif
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
	...

08004a48 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a4e:	f3ef 8305 	mrs	r3, IPSR
 8004a52:	603b      	str	r3, [r7, #0]
  return(result);
 8004a54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004a5a:	f06f 0305 	mvn.w	r3, #5
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	e00c      	b.n	8004a7c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004a62:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <osKernelInitialize+0x44>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d105      	bne.n	8004a76 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004a6a:	4b08      	ldr	r3, [pc, #32]	@ (8004a8c <osKernelInitialize+0x44>)
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	607b      	str	r3, [r7, #4]
 8004a74:	e002      	b.n	8004a7c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004a76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004a7c:	687b      	ldr	r3, [r7, #4]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	200001fc 	.word	0x200001fc

08004a90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a96:	f3ef 8305 	mrs	r3, IPSR
 8004a9a:	603b      	str	r3, [r7, #0]
  return(result);
 8004a9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <osKernelStart+0x1a>
    stat = osErrorISR;
 8004aa2:	f06f 0305 	mvn.w	r3, #5
 8004aa6:	607b      	str	r3, [r7, #4]
 8004aa8:	e010      	b.n	8004acc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <osKernelStart+0x48>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d109      	bne.n	8004ac6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004ab2:	f7ff ffbf 	bl	8004a34 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <osKernelStart+0x48>)
 8004ab8:	2202      	movs	r2, #2
 8004aba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004abc:	f001 fce0 	bl	8006480 <vTaskStartScheduler>
      stat = osOK;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
 8004ac4:	e002      	b.n	8004acc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004acc:	687b      	ldr	r3, [r7, #4]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	200001fc 	.word	0x200001fc

08004adc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08e      	sub	sp, #56	@ 0x38
 8004ae0:	af04      	add	r7, sp, #16
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	60b9      	str	r1, [r7, #8]
 8004ae6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aec:	f3ef 8305 	mrs	r3, IPSR
 8004af0:	617b      	str	r3, [r7, #20]
  return(result);
 8004af2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d17e      	bne.n	8004bf6 <osThreadNew+0x11a>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d07b      	beq.n	8004bf6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004afe:	2380      	movs	r3, #128	@ 0x80
 8004b00:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b02:	2318      	movs	r3, #24
 8004b04:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b0e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d045      	beq.n	8004ba2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d002      	beq.n	8004b24 <osThreadNew+0x48>
        name = attr->name;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d008      	beq.n	8004b4a <osThreadNew+0x6e>
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	2b38      	cmp	r3, #56	@ 0x38
 8004b3c:	d805      	bhi.n	8004b4a <osThreadNew+0x6e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <osThreadNew+0x72>
        return (NULL);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e054      	b.n	8004bf8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	089b      	lsrs	r3, r3, #2
 8004b5c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00e      	beq.n	8004b84 <osThreadNew+0xa8>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004b6c:	d90a      	bls.n	8004b84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d006      	beq.n	8004b84 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	695b      	ldr	r3, [r3, #20]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <osThreadNew+0xa8>
        mem = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	e010      	b.n	8004ba6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10c      	bne.n	8004ba6 <osThreadNew+0xca>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d108      	bne.n	8004ba6 <osThreadNew+0xca>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d104      	bne.n	8004ba6 <osThreadNew+0xca>
          mem = 0;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	61bb      	str	r3, [r7, #24]
 8004ba0:	e001      	b.n	8004ba6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d110      	bne.n	8004bce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004bb4:	9202      	str	r2, [sp, #8]
 8004bb6:	9301      	str	r3, [sp, #4]
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	6a3a      	ldr	r2, [r7, #32]
 8004bc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f001 f9e8 	bl	8005f98 <xTaskCreateStatic>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	e013      	b.n	8004bf6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d110      	bne.n	8004bf6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	f107 0310 	add.w	r3, r7, #16
 8004bdc:	9301      	str	r3, [sp, #4]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f001 fa36 	bl	8006058 <xTaskCreate>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d001      	beq.n	8004bf6 <osThreadNew+0x11a>
            hTask = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004bf6:	693b      	ldr	r3, [r7, #16]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3728      	adds	r7, #40	@ 0x28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b088      	sub	sp, #32
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0c:	f3ef 8305 	mrs	r3, IPSR
 8004c10:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c12:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d174      	bne.n	8004d02 <osMutexNew+0x102>
    if (attr != NULL) {
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	61bb      	str	r3, [r7, #24]
 8004c24:	e001      	b.n	8004c2a <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	f003 0301 	and.w	r3, r3, #1
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <osMutexNew+0x3a>
      rmtx = 1U;
 8004c34:	2301      	movs	r3, #1
 8004c36:	617b      	str	r3, [r7, #20]
 8004c38:	e001      	b.n	8004c3e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	f003 0308 	and.w	r3, r3, #8
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d15c      	bne.n	8004d02 <osMutexNew+0x102>
      mem = -1;
 8004c48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c4c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <osMutexNew+0x6a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	2b4f      	cmp	r3, #79	@ 0x4f
 8004c62:	d902      	bls.n	8004c6a <osMutexNew+0x6a>
          mem = 1;
 8004c64:	2301      	movs	r3, #1
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	e00c      	b.n	8004c84 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d108      	bne.n	8004c84 <osMutexNew+0x84>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d104      	bne.n	8004c84 <osMutexNew+0x84>
            mem = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	613b      	str	r3, [r7, #16]
 8004c7e:	e001      	b.n	8004c84 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d112      	bne.n	8004cb0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	4619      	mov	r1, r3
 8004c96:	2004      	movs	r0, #4
 8004c98:	f000 fbc9 	bl	800542e <xQueueCreateMutexStatic>
 8004c9c:	61f8      	str	r0, [r7, #28]
 8004c9e:	e016      	b.n	8004cce <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f000 fbc1 	bl	800542e <xQueueCreateMutexStatic>
 8004cac:	61f8      	str	r0, [r7, #28]
 8004cae:	e00e      	b.n	8004cce <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10b      	bne.n	8004cce <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004cbc:	2004      	movs	r0, #4
 8004cbe:	f000 fb9e 	bl	80053fe <xQueueCreateMutex>
 8004cc2:	61f8      	str	r0, [r7, #28]
 8004cc4:	e003      	b.n	8004cce <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	f000 fb99 	bl	80053fe <xQueueCreateMutex>
 8004ccc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00c      	beq.n	8004cee <osMutexNew+0xee>
        if (attr != NULL) {
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <osMutexNew+0xe2>
          name = attr->name;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	e001      	b.n	8004ce6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	69f8      	ldr	r0, [r7, #28]
 8004cea:	f001 f8f7 	bl	8005edc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <osMutexNew+0x102>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	f043 0301 	orr.w	r3, r3, #1
 8004d00:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004d02:	69fb      	ldr	r3, [r7, #28]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3720      	adds	r7, #32
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b08a      	sub	sp, #40	@ 0x28
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d1c:	f3ef 8305 	mrs	r3, IPSR
 8004d20:	613b      	str	r3, [r7, #16]
  return(result);
 8004d22:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d15f      	bne.n	8004de8 <osMessageQueueNew+0xdc>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d05c      	beq.n	8004de8 <osMessageQueueNew+0xdc>
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d059      	beq.n	8004de8 <osMessageQueueNew+0xdc>
    mem = -1;
 8004d34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d029      	beq.n	8004d94 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d012      	beq.n	8004d6e <osMessageQueueNew+0x62>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b4f      	cmp	r3, #79	@ 0x4f
 8004d4e:	d90e      	bls.n	8004d6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695a      	ldr	r2, [r3, #20]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d302      	bcc.n	8004d6e <osMessageQueueNew+0x62>
        mem = 1;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	61bb      	str	r3, [r7, #24]
 8004d6c:	e014      	b.n	8004d98 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d110      	bne.n	8004d98 <osMessageQueueNew+0x8c>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10c      	bne.n	8004d98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d108      	bne.n	8004d98 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d104      	bne.n	8004d98 <osMessageQueueNew+0x8c>
          mem = 0;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e001      	b.n	8004d98 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d10b      	bne.n	8004db6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	691a      	ldr	r2, [r3, #16]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2100      	movs	r1, #0
 8004da8:	9100      	str	r1, [sp, #0]
 8004daa:	68b9      	ldr	r1, [r7, #8]
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f000 fa31 	bl	8005214 <xQueueGenericCreateStatic>
 8004db2:	61f8      	str	r0, [r7, #28]
 8004db4:	e008      	b.n	8004dc8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d105      	bne.n	8004dc8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	68b9      	ldr	r1, [r7, #8]
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f000 faa4 	bl	800530e <xQueueGenericCreate>
 8004dc6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00c      	beq.n	8004de8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <osMessageQueueNew+0xd0>
        name = attr->name;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	e001      	b.n	8004de0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004de0:	6979      	ldr	r1, [r7, #20]
 8004de2:	69f8      	ldr	r0, [r7, #28]
 8004de4:	f001 f87a 	bl	8005edc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004de8:	69fb      	ldr	r3, [r7, #28]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3720      	adds	r7, #32
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	4613      	mov	r3, r2
 8004e02:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e0c:	f3ef 8305 	mrs	r3, IPSR
 8004e10:	617b      	str	r3, [r7, #20]
  return(result);
 8004e12:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d028      	beq.n	8004e6a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d005      	beq.n	8004e2a <osMessageQueuePut+0x36>
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <osMessageQueuePut+0x36>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004e2a:	f06f 0303 	mvn.w	r3, #3
 8004e2e:	61fb      	str	r3, [r7, #28]
 8004e30:	e038      	b.n	8004ea4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004e36:	f107 0210 	add.w	r2, r7, #16
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	69b8      	ldr	r0, [r7, #24]
 8004e40:	f000 fc12 	bl	8005668 <xQueueGenericSendFromISR>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d003      	beq.n	8004e52 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004e4a:	f06f 0302 	mvn.w	r3, #2
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e028      	b.n	8004ea4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d025      	beq.n	8004ea4 <osMessageQueuePut+0xb0>
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <osMessageQueuePut+0xbc>)
 8004e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	e01c      	b.n	8004ea4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <osMessageQueuePut+0x82>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004e76:	f06f 0303 	mvn.w	r3, #3
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	e012      	b.n	8004ea4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004e7e:	2300      	movs	r3, #0
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	69b8      	ldr	r0, [r7, #24]
 8004e86:	f000 faed 	bl	8005464 <xQueueGenericSend>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d009      	beq.n	8004ea4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004e96:	f06f 0301 	mvn.w	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	e002      	b.n	8004ea4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004e9e:	f06f 0302 	mvn.w	r3, #2
 8004ea2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004ea4:	69fb      	ldr	r3, [r7, #28]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	607a      	str	r2, [r7, #4]
 8004ec0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eca:	f3ef 8305 	mrs	r3, IPSR
 8004ece:	617b      	str	r3, [r7, #20]
  return(result);
 8004ed0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d028      	beq.n	8004f28 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <osMessageQueueGet+0x34>
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <osMessageQueueGet+0x34>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ee8:	f06f 0303 	mvn.w	r3, #3
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e037      	b.n	8004f60 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ef4:	f107 0310 	add.w	r3, r7, #16
 8004ef8:	461a      	mov	r2, r3
 8004efa:	68b9      	ldr	r1, [r7, #8]
 8004efc:	69b8      	ldr	r0, [r7, #24]
 8004efe:	f000 fe43 	bl	8005b88 <xQueueReceiveFromISR>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d003      	beq.n	8004f10 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004f08:	f06f 0302 	mvn.w	r3, #2
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	e027      	b.n	8004f60 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d024      	beq.n	8004f60 <osMessageQueueGet+0xac>
 8004f16:	4b15      	ldr	r3, [pc, #84]	@ (8004f6c <osMessageQueueGet+0xb8>)
 8004f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	e01b      	b.n	8004f60 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <osMessageQueueGet+0x80>
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004f34:	f06f 0303 	mvn.w	r3, #3
 8004f38:	61fb      	str	r3, [r7, #28]
 8004f3a:	e011      	b.n	8004f60 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	68b9      	ldr	r1, [r7, #8]
 8004f40:	69b8      	ldr	r0, [r7, #24]
 8004f42:	f000 fc2f 	bl	80057a4 <xQueueReceive>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d009      	beq.n	8004f60 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004f52:	f06f 0301 	mvn.w	r3, #1
 8004f56:	61fb      	str	r3, [r7, #28]
 8004f58:	e002      	b.n	8004f60 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004f5a:	f06f 0302 	mvn.w	r3, #2
 8004f5e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f60:	69fb      	ldr	r3, [r7, #28]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	e000ed04 	.word	0xe000ed04

08004f70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a07      	ldr	r2, [pc, #28]	@ (8004f9c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	4a06      	ldr	r2, [pc, #24]	@ (8004fa0 <vApplicationGetIdleTaskMemory+0x30>)
 8004f86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2280      	movs	r2, #128	@ 0x80
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	3714      	adds	r7, #20
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	20000200 	.word	0x20000200
 8004fa0:	200002a8 	.word	0x200002a8

08004fa4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4a07      	ldr	r2, [pc, #28]	@ (8004fd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004fb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4a06      	ldr	r2, [pc, #24]	@ (8004fd4 <vApplicationGetTimerTaskMemory+0x30>)
 8004fba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fc2:	601a      	str	r2, [r3, #0]
}
 8004fc4:	bf00      	nop
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	200004a8 	.word	0x200004a8
 8004fd4:	20000550 	.word	0x20000550

08004fd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f103 0208 	add.w	r2, r3, #8
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ff0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f103 0208 	add.w	r2, r3, #8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f103 0208 	add.w	r2, r3, #8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005032:	b480      	push	{r7}
 8005034:	b085      	sub	sp, #20
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
 800503a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	601a      	str	r2, [r3, #0]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005090:	d103      	bne.n	800509a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	e00c      	b.n	80050b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	3308      	adds	r3, #8
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e002      	b.n	80050a8 <vListInsert+0x2e>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68ba      	ldr	r2, [r7, #8]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d2f6      	bcs.n	80050a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	6892      	ldr	r2, [r2, #8]
 8005102:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6852      	ldr	r2, [r2, #4]
 800510c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	d103      	bne.n	8005120 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800516c:	f002 fc5c 	bl	8007a28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005178:	68f9      	ldr	r1, [r7, #12]
 800517a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	441a      	add	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519c:	3b01      	subs	r3, #1
 800519e:	68f9      	ldr	r1, [r7, #12]
 80051a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051a2:	fb01 f303 	mul.w	r3, r1, r3
 80051a6:	441a      	add	r2, r3
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	22ff      	movs	r2, #255	@ 0xff
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	22ff      	movs	r2, #255	@ 0xff
 80051b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d114      	bne.n	80051ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01a      	beq.n	8005200 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3310      	adds	r3, #16
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fbf4 	bl	80069bc <xTaskRemoveFromEventList>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d012      	beq.n	8005200 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <xQueueGenericReset+0xd0>)
 80051dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051e0:	601a      	str	r2, [r3, #0]
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	e009      	b.n	8005200 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3310      	adds	r3, #16
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff fef1 	bl	8004fd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	3324      	adds	r3, #36	@ 0x24
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff feec 	bl	8004fd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005200:	f002 fc44 	bl	8007a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005204:	2301      	movs	r3, #1
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	e000ed04 	.word	0xe000ed04

08005214 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08e      	sub	sp, #56	@ 0x38
 8005218:	af02      	add	r7, sp, #8
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	607a      	str	r2, [r7, #4]
 8005220:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	e7fd      	b.n	800523c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524a:	f383 8811 	msr	BASEPRI, r3
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005258:	bf00      	nop
 800525a:	bf00      	nop
 800525c:	e7fd      	b.n	800525a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d002      	beq.n	800526a <xQueueGenericCreateStatic+0x56>
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <xQueueGenericCreateStatic+0x5a>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <xQueueGenericCreateStatic+0x5c>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	623b      	str	r3, [r7, #32]
}
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d102      	bne.n	8005298 <xQueueGenericCreateStatic+0x84>
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <xQueueGenericCreateStatic+0x88>
 8005298:	2301      	movs	r3, #1
 800529a:	e000      	b.n	800529e <xQueueGenericCreateStatic+0x8a>
 800529c:	2300      	movs	r3, #0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10b      	bne.n	80052ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	61fb      	str	r3, [r7, #28]
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	e7fd      	b.n	80052b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80052ba:	2350      	movs	r3, #80	@ 0x50
 80052bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2b50      	cmp	r3, #80	@ 0x50
 80052c2:	d00b      	beq.n	80052dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	61bb      	str	r3, [r7, #24]
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	e7fd      	b.n	80052d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80052e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00d      	beq.n	8005304 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052f6:	9300      	str	r3, [sp, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 f840 	bl	8005384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005306:	4618      	mov	r0, r3
 8005308:	3730      	adds	r7, #48	@ 0x30
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800530e:	b580      	push	{r7, lr}
 8005310:	b08a      	sub	sp, #40	@ 0x28
 8005312:	af02      	add	r7, sp, #8
 8005314:	60f8      	str	r0, [r7, #12]
 8005316:	60b9      	str	r1, [r7, #8]
 8005318:	4613      	mov	r3, r2
 800531a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	613b      	str	r3, [r7, #16]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
 8005342:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	3350      	adds	r3, #80	@ 0x50
 8005348:	4618      	mov	r0, r3
 800534a:	f002 fc8f 	bl	8007c6c <pvPortMalloc>
 800534e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d011      	beq.n	800537a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	3350      	adds	r3, #80	@ 0x50
 800535e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005368:	79fa      	ldrb	r2, [r7, #7]
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	4613      	mov	r3, r2
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f805 	bl	8005384 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800537a:	69bb      	ldr	r3, [r7, #24]
	}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d103      	bne.n	80053a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	e002      	b.n	80053a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053b2:	2101      	movs	r1, #1
 80053b4:	69b8      	ldr	r0, [r7, #24]
 80053b6:	f7ff fec3 	bl	8005140 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	78fa      	ldrb	r2, [r7, #3]
 80053be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053c2:	bf00      	nop
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b082      	sub	sp, #8
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00e      	beq.n	80053f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80053ea:	2300      	movs	r3, #0
 80053ec:	2200      	movs	r2, #0
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f837 	bl	8005464 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b086      	sub	sp, #24
 8005402:	af00      	add	r7, sp, #0
 8005404:	4603      	mov	r3, r0
 8005406:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005408:	2301      	movs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	461a      	mov	r2, r3
 8005414:	6939      	ldr	r1, [r7, #16]
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f7ff ff79 	bl	800530e <xQueueGenericCreate>
 800541c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800541e:	68f8      	ldr	r0, [r7, #12]
 8005420:	f7ff ffd3 	bl	80053ca <prvInitialiseMutex>

		return xNewQueue;
 8005424:	68fb      	ldr	r3, [r7, #12]
	}
 8005426:	4618      	mov	r0, r3
 8005428:	3718      	adds	r7, #24
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}

0800542e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800542e:	b580      	push	{r7, lr}
 8005430:	b088      	sub	sp, #32
 8005432:	af02      	add	r7, sp, #8
 8005434:	4603      	mov	r3, r0
 8005436:	6039      	str	r1, [r7, #0]
 8005438:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800543a:	2301      	movs	r3, #1
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2200      	movs	r2, #0
 800544a:	6939      	ldr	r1, [r7, #16]
 800544c:	6978      	ldr	r0, [r7, #20]
 800544e:	f7ff fee1 	bl	8005214 <xQueueGenericCreateStatic>
 8005452:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f7ff ffb8 	bl	80053ca <prvInitialiseMutex>

		return xNewQueue;
 800545a:	68fb      	ldr	r3, [r7, #12]
	}
 800545c:	4618      	mov	r0, r3
 800545e:	3718      	adds	r7, #24
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08e      	sub	sp, #56	@ 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005472:	2300      	movs	r3, #0
 8005474:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10b      	bne.n	8005498 <xQueueGenericSend+0x34>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	e7fd      	b.n	8005494 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x42>
 800549e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <xQueueGenericSend+0x46>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <xQueueGenericSend+0x48>
 80054aa:	2300      	movs	r3, #0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xQueueGenericSend+0x64>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d103      	bne.n	80054d6 <xQueueGenericSend+0x72>
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d101      	bne.n	80054da <xQueueGenericSend+0x76>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSend+0x78>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <xQueueGenericSend+0x94>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	623b      	str	r3, [r7, #32]
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054f8:	f001 fc26 	bl	8006d48 <xTaskGetSchedulerState>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d102      	bne.n	8005508 <xQueueGenericSend+0xa4>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <xQueueGenericSend+0xa8>
 8005508:	2301      	movs	r3, #1
 800550a:	e000      	b.n	800550e <xQueueGenericSend+0xaa>
 800550c:	2300      	movs	r3, #0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <xQueueGenericSend+0xc6>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	61fb      	str	r3, [r7, #28]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800552a:	f002 fa7d 	bl	8007a28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <xQueueGenericSend+0xdc>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b02      	cmp	r3, #2
 800553e:	d129      	bne.n	8005594 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	68b9      	ldr	r1, [r7, #8]
 8005544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005546:	f000 fbb9 	bl	8005cbc <prvCopyDataToQueue>
 800554a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005556:	3324      	adds	r3, #36	@ 0x24
 8005558:	4618      	mov	r0, r3
 800555a:	f001 fa2f 	bl	80069bc <xTaskRemoveFromEventList>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005564:	4b3f      	ldr	r3, [pc, #252]	@ (8005664 <xQueueGenericSend+0x200>)
 8005566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	e00a      	b.n	800558c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d007      	beq.n	800558c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800557c:	4b39      	ldr	r3, [pc, #228]	@ (8005664 <xQueueGenericSend+0x200>)
 800557e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800558c:	f002 fa7e 	bl	8007a8c <vPortExitCritical>
				return pdPASS;
 8005590:	2301      	movs	r3, #1
 8005592:	e063      	b.n	800565c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800559a:	f002 fa77 	bl	8007a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800559e:	2300      	movs	r3, #0
 80055a0:	e05c      	b.n	800565c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d106      	bne.n	80055b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055a8:	f107 0314 	add.w	r3, r7, #20
 80055ac:	4618      	mov	r0, r3
 80055ae:	f001 fa69 	bl	8006a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055b2:	2301      	movs	r3, #1
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055b6:	f002 fa69 	bl	8007a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055ba:	f000 ffd1 	bl	8006560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055be:	f002 fa33 	bl	8007a28 <vPortEnterCritical>
 80055c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80055c8:	b25b      	sxtb	r3, r3
 80055ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055ce:	d103      	bne.n	80055d8 <xQueueGenericSend+0x174>
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055de:	b25b      	sxtb	r3, r3
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055e4:	d103      	bne.n	80055ee <xQueueGenericSend+0x18a>
 80055e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055ee:	f002 fa4d 	bl	8007a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055f2:	1d3a      	adds	r2, r7, #4
 80055f4:	f107 0314 	add.w	r3, r7, #20
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fa58 	bl	8006ab0 <xTaskCheckForTimeOut>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d124      	bne.n	8005650 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005608:	f000 fc50 	bl	8005eac <prvIsQueueFull>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d018      	beq.n	8005644 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005614:	3310      	adds	r3, #16
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4611      	mov	r1, r2
 800561a:	4618      	mov	r0, r3
 800561c:	f001 f97c 	bl	8006918 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005622:	f000 fbdb 	bl	8005ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005626:	f000 ffa9 	bl	800657c <xTaskResumeAll>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	f47f af7c 	bne.w	800552a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005632:	4b0c      	ldr	r3, [pc, #48]	@ (8005664 <xQueueGenericSend+0x200>)
 8005634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	e772      	b.n	800552a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005646:	f000 fbc9 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800564a:	f000 ff97 	bl	800657c <xTaskResumeAll>
 800564e:	e76c      	b.n	800552a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005650:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005652:	f000 fbc3 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005656:	f000 ff91 	bl	800657c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800565a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800565c:	4618      	mov	r0, r3
 800565e:	3738      	adds	r7, #56	@ 0x38
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b090      	sub	sp, #64	@ 0x40
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10b      	bne.n	8005698 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005692:	bf00      	nop
 8005694:	bf00      	nop
 8005696:	e7fd      	b.n	8005694 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d103      	bne.n	80056a6 <xQueueGenericSendFromISR+0x3e>
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <xQueueGenericSendFromISR+0x42>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <xQueueGenericSendFromISR+0x44>
 80056aa:	2300      	movs	r3, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d103      	bne.n	80056d6 <xQueueGenericSendFromISR+0x6e>
 80056ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <xQueueGenericSendFromISR+0x72>
 80056d6:	2301      	movs	r3, #1
 80056d8:	e000      	b.n	80056dc <xQueueGenericSendFromISR+0x74>
 80056da:	2300      	movs	r3, #0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	623b      	str	r3, [r7, #32]
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056f8:	f002 fa76 	bl	8007be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056fc:	f3ef 8211 	mrs	r2, BASEPRI
 8005700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	61fa      	str	r2, [r7, #28]
 8005712:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005714:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005716:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005720:	429a      	cmp	r2, r3
 8005722:	d302      	bcc.n	800572a <xQueueGenericSendFromISR+0xc2>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d12f      	bne.n	800578a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005730:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	68b9      	ldr	r1, [r7, #8]
 800573e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005740:	f000 fabc 	bl	8005cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005744:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800574c:	d112      	bne.n	8005774 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800574e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	3324      	adds	r3, #36	@ 0x24
 800575a:	4618      	mov	r0, r3
 800575c:	f001 f92e 	bl	80069bc <xTaskRemoveFromEventList>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00e      	beq.n	8005784 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e007      	b.n	8005784 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005774:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005778:	3301      	adds	r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	b25a      	sxtb	r2, r3
 800577e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005788:	e001      	b.n	800578e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800578a:	2300      	movs	r3, #0
 800578c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005790:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005798:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800579a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800579c:	4618      	mov	r0, r3
 800579e:	3740      	adds	r7, #64	@ 0x40
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08c      	sub	sp, #48	@ 0x30
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10b      	bne.n	80057d6 <xQueueReceive+0x32>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	623b      	str	r3, [r7, #32]
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	e7fd      	b.n	80057d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d103      	bne.n	80057e4 <xQueueReceive+0x40>
 80057dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <xQueueReceive+0x44>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <xQueueReceive+0x46>
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <xQueueReceive+0x62>
	__asm volatile
 80057ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f2:	f383 8811 	msr	BASEPRI, r3
 80057f6:	f3bf 8f6f 	isb	sy
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	61fb      	str	r3, [r7, #28]
}
 8005800:	bf00      	nop
 8005802:	bf00      	nop
 8005804:	e7fd      	b.n	8005802 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005806:	f001 fa9f 	bl	8006d48 <xTaskGetSchedulerState>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <xQueueReceive+0x72>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <xQueueReceive+0x76>
 8005816:	2301      	movs	r3, #1
 8005818:	e000      	b.n	800581c <xQueueReceive+0x78>
 800581a:	2300      	movs	r3, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <xQueueReceive+0x94>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	61bb      	str	r3, [r7, #24]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005838:	f002 f8f6 	bl	8007a28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01f      	beq.n	8005888 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005848:	68b9      	ldr	r1, [r7, #8]
 800584a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800584c:	f000 faa0 	bl	8005d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005852:	1e5a      	subs	r2, r3, #1
 8005854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00f      	beq.n	8005880 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005862:	3310      	adds	r3, #16
 8005864:	4618      	mov	r0, r3
 8005866:	f001 f8a9 	bl	80069bc <xTaskRemoveFromEventList>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d007      	beq.n	8005880 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005870:	4b3c      	ldr	r3, [pc, #240]	@ (8005964 <xQueueReceive+0x1c0>)
 8005872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005880:	f002 f904 	bl	8007a8c <vPortExitCritical>
				return pdPASS;
 8005884:	2301      	movs	r3, #1
 8005886:	e069      	b.n	800595c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d103      	bne.n	8005896 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800588e:	f002 f8fd 	bl	8007a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005892:	2300      	movs	r3, #0
 8005894:	e062      	b.n	800595c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800589c:	f107 0310 	add.w	r3, r7, #16
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 f8ef 	bl	8006a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058a6:	2301      	movs	r3, #1
 80058a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058aa:	f002 f8ef 	bl	8007a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058ae:	f000 fe57 	bl	8006560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058b2:	f002 f8b9 	bl	8007a28 <vPortEnterCritical>
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058bc:	b25b      	sxtb	r3, r3
 80058be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058c2:	d103      	bne.n	80058cc <xQueueReceive+0x128>
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058d2:	b25b      	sxtb	r3, r3
 80058d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058d8:	d103      	bne.n	80058e2 <xQueueReceive+0x13e>
 80058da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058e2:	f002 f8d3 	bl	8007a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058e6:	1d3a      	adds	r2, r7, #4
 80058e8:	f107 0310 	add.w	r3, r7, #16
 80058ec:	4611      	mov	r1, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	f001 f8de 	bl	8006ab0 <xTaskCheckForTimeOut>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d123      	bne.n	8005942 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058fc:	f000 fac0 	bl	8005e80 <prvIsQueueEmpty>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d017      	beq.n	8005936 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005908:	3324      	adds	r3, #36	@ 0x24
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4611      	mov	r1, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f001 f802 	bl	8006918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005916:	f000 fa61 	bl	8005ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800591a:	f000 fe2f 	bl	800657c <xTaskResumeAll>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d189      	bne.n	8005838 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <xQueueReceive+0x1c0>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	e780      	b.n	8005838 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005938:	f000 fa50 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800593c:	f000 fe1e 	bl	800657c <xTaskResumeAll>
 8005940:	e77a      	b.n	8005838 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005944:	f000 fa4a 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005948:	f000 fe18 	bl	800657c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800594c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800594e:	f000 fa97 	bl	8005e80 <prvIsQueueEmpty>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	f43f af6f 	beq.w	8005838 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800595a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800595c:	4618      	mov	r0, r3
 800595e:	3730      	adds	r7, #48	@ 0x30
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08e      	sub	sp, #56	@ 0x38
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800597e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	623b      	str	r3, [r7, #32]
}
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800599c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800599e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00b      	beq.n	80059bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	61fb      	str	r3, [r7, #28]
}
 80059b6:	bf00      	nop
 80059b8:	bf00      	nop
 80059ba:	e7fd      	b.n	80059b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059bc:	f001 f9c4 	bl	8006d48 <xTaskGetSchedulerState>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <xQueueSemaphoreTake+0x64>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d101      	bne.n	80059d0 <xQueueSemaphoreTake+0x68>
 80059cc:	2301      	movs	r3, #1
 80059ce:	e000      	b.n	80059d2 <xQueueSemaphoreTake+0x6a>
 80059d0:	2300      	movs	r3, #0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80059d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059da:	f383 8811 	msr	BASEPRI, r3
 80059de:	f3bf 8f6f 	isb	sy
 80059e2:	f3bf 8f4f 	dsb	sy
 80059e6:	61bb      	str	r3, [r7, #24]
}
 80059e8:	bf00      	nop
 80059ea:	bf00      	nop
 80059ec:	e7fd      	b.n	80059ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059ee:	f002 f81b 	bl	8007a28 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80059f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80059f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d024      	beq.n	8005a48 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80059fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a00:	1e5a      	subs	r2, r3, #1
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005a0e:	f001 fb15 	bl	800703c <pvTaskIncrementMutexHeldCount>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00f      	beq.n	8005a40 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a22:	3310      	adds	r3, #16
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 ffc9 	bl	80069bc <xTaskRemoveFromEventList>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005a30:	4b54      	ldr	r3, [pc, #336]	@ (8005b84 <xQueueSemaphoreTake+0x21c>)
 8005a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a40:	f002 f824 	bl	8007a8c <vPortExitCritical>
				return pdPASS;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e098      	b.n	8005b7a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d112      	bne.n	8005a74 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00b      	beq.n	8005a6c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	617b      	str	r3, [r7, #20]
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005a6c:	f002 f80e 	bl	8007a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e082      	b.n	8005b7a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d106      	bne.n	8005a88 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a7a:	f107 030c 	add.w	r3, r7, #12
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f001 f800 	bl	8006a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a84:	2301      	movs	r3, #1
 8005a86:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a88:	f002 f800 	bl	8007a8c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a8c:	f000 fd68 	bl	8006560 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a90:	f001 ffca 	bl	8007a28 <vPortEnterCritical>
 8005a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a9a:	b25b      	sxtb	r3, r3
 8005a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aa0:	d103      	bne.n	8005aaa <xQueueSemaphoreTake+0x142>
 8005aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ab0:	b25b      	sxtb	r3, r3
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ab6:	d103      	bne.n	8005ac0 <xQueueSemaphoreTake+0x158>
 8005ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ac0:	f001 ffe4 	bl	8007a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ac4:	463a      	mov	r2, r7
 8005ac6:	f107 030c 	add.w	r3, r7, #12
 8005aca:	4611      	mov	r1, r2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 ffef 	bl	8006ab0 <xTaskCheckForTimeOut>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d132      	bne.n	8005b3e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ad8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ada:	f000 f9d1 	bl	8005e80 <prvIsQueueEmpty>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d026      	beq.n	8005b32 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d109      	bne.n	8005b00 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005aec:	f001 ff9c 	bl	8007a28 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 f945 	bl	8006d84 <xTaskPriorityInherit>
 8005afa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005afc:	f001 ffc6 	bl	8007a8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b02:	3324      	adds	r3, #36	@ 0x24
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 ff05 	bl	8006918 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b10:	f000 f964 	bl	8005ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b14:	f000 fd32 	bl	800657c <xTaskResumeAll>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	f47f af67 	bne.w	80059ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005b20:	4b18      	ldr	r3, [pc, #96]	@ (8005b84 <xQueueSemaphoreTake+0x21c>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	e75d      	b.n	80059ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005b32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b34:	f000 f952 	bl	8005ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b38:	f000 fd20 	bl	800657c <xTaskResumeAll>
 8005b3c:	e757      	b.n	80059ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005b3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b40:	f000 f94c 	bl	8005ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b44:	f000 fd1a 	bl	800657c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b48:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b4a:	f000 f999 	bl	8005e80 <prvIsQueueEmpty>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f43f af4c 	beq.w	80059ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00d      	beq.n	8005b78 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005b5c:	f001 ff64 	bl	8007a28 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005b60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005b62:	f000 f893 	bl	8005c8c <prvGetDisinheritPriorityAfterTimeout>
 8005b66:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 f9e0 	bl	8006f34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005b74:	f001 ff8a 	bl	8007a8c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3738      	adds	r7, #56	@ 0x38
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	e000ed04 	.word	0xe000ed04

08005b88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b08e      	sub	sp, #56	@ 0x38
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d10b      	bne.n	8005bb6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba2:	f383 8811 	msr	BASEPRI, r3
 8005ba6:	f3bf 8f6f 	isb	sy
 8005baa:	f3bf 8f4f 	dsb	sy
 8005bae:	623b      	str	r3, [r7, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	bf00      	nop
 8005bb4:	e7fd      	b.n	8005bb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <xQueueReceiveFromISR+0x3c>
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <xQueueReceiveFromISR+0x40>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <xQueueReceiveFromISR+0x42>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10b      	bne.n	8005be6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	61fb      	str	r3, [r7, #28]
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	e7fd      	b.n	8005be2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005be6:	f001 ffff 	bl	8007be8 <vPortValidateInterruptPriority>
	__asm volatile
 8005bea:	f3ef 8211 	mrs	r2, BASEPRI
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	61ba      	str	r2, [r7, #24]
 8005c00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005c02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d02f      	beq.n	8005c72 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c1c:	68b9      	ldr	r1, [r7, #8]
 8005c1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c20:	f000 f8b6 	bl	8005d90 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	1e5a      	subs	r2, r3, #1
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005c2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005c30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c34:	d112      	bne.n	8005c5c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d016      	beq.n	8005c6c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	3310      	adds	r3, #16
 8005c42:	4618      	mov	r0, r3
 8005c44:	f000 feba 	bl	80069bc <xTaskRemoveFromEventList>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00e      	beq.n	8005c6c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00b      	beq.n	8005c6c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	601a      	str	r2, [r3, #0]
 8005c5a:	e007      	b.n	8005c6c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005c60:	3301      	adds	r3, #1
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	b25a      	sxtb	r2, r3
 8005c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c70:	e001      	b.n	8005c76 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005c72:	2300      	movs	r3, #0
 8005c74:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c78:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f383 8811 	msr	BASEPRI, r3
}
 8005c80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3738      	adds	r7, #56	@ 0x38
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e001      	b.n	8005cae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005cae:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d14d      	bne.n	8005d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f8b4 	bl	8006e54 <xTaskPriorityDisinherit>
 8005cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	e043      	b.n	8005d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d119      	bne.n	8005d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6858      	ldr	r0, [r3, #4]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d04:	461a      	mov	r2, r3
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	f002 fa22 	bl	8008150 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	441a      	add	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d32b      	bcc.n	8005d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	e026      	b.n	8005d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	68d8      	ldr	r0, [r3, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	461a      	mov	r2, r3
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	f002 fa08 	bl	8008150 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	68da      	ldr	r2, [r3, #12]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d48:	425b      	negs	r3, r3
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	68da      	ldr	r2, [r3, #12]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d207      	bcs.n	8005d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	425b      	negs	r3, r3
 8005d66:	441a      	add	r2, r3
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d105      	bne.n	8005d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1c5a      	adds	r2, r3, #1
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005d86:	697b      	ldr	r3, [r7, #20]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d018      	beq.n	8005dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68da      	ldr	r2, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005daa:	441a      	add	r2, r3
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	689b      	ldr	r3, [r3, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d303      	bcc.n	8005dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68d9      	ldr	r1, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	461a      	mov	r2, r3
 8005dce:	6838      	ldr	r0, [r7, #0]
 8005dd0:	f002 f9be 	bl	8008150 <memcpy>
	}
}
 8005dd4:	bf00      	nop
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005de4:	f001 fe20 	bl	8007a28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005df0:	e011      	b.n	8005e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d012      	beq.n	8005e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	3324      	adds	r3, #36	@ 0x24
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fddc 	bl	80069bc <xTaskRemoveFromEventList>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d001      	beq.n	8005e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005e0a:	f000 feb5 	bl	8006b78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005e0e:	7bfb      	ldrb	r3, [r7, #15]
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	dce9      	bgt.n	8005df2 <prvUnlockQueue+0x16>
 8005e1e:	e000      	b.n	8005e22 <prvUnlockQueue+0x46>
					break;
 8005e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	22ff      	movs	r2, #255	@ 0xff
 8005e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005e2a:	f001 fe2f 	bl	8007a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005e2e:	f001 fdfb 	bl	8007a28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e3a:	e011      	b.n	8005e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d012      	beq.n	8005e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3310      	adds	r3, #16
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fdb7 	bl	80069bc <xTaskRemoveFromEventList>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d001      	beq.n	8005e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005e54:	f000 fe90 	bl	8006b78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005e58:	7bbb      	ldrb	r3, [r7, #14]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	dce9      	bgt.n	8005e3c <prvUnlockQueue+0x60>
 8005e68:	e000      	b.n	8005e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	22ff      	movs	r2, #255	@ 0xff
 8005e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005e74:	f001 fe0a 	bl	8007a8c <vPortExitCritical>
}
 8005e78:	bf00      	nop
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005e88:	f001 fdce 	bl	8007a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d102      	bne.n	8005e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	e001      	b.n	8005e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005e9e:	f001 fdf5 	bl	8007a8c <vPortExitCritical>

	return xReturn;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005eb4:	f001 fdb8 	bl	8007a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d102      	bne.n	8005eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e001      	b.n	8005ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ece:	f001 fddd 	bl	8007a8c <vPortExitCritical>

	return xReturn;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3710      	adds	r7, #16
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
 8005eea:	e014      	b.n	8005f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eec:	4a0f      	ldr	r2, [pc, #60]	@ (8005f2c <vQueueAddToRegistry+0x50>)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10b      	bne.n	8005f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ef8:	490c      	ldr	r1, [pc, #48]	@ (8005f2c <vQueueAddToRegistry+0x50>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005f02:	4a0a      	ldr	r2, [pc, #40]	@ (8005f2c <vQueueAddToRegistry+0x50>)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005f0e:	e006      	b.n	8005f1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b07      	cmp	r3, #7
 8005f1a:	d9e7      	bls.n	8005eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	20000950 	.word	0x20000950

08005f30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f40:	f001 fd72 	bl	8007a28 <vPortEnterCritical>
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f4a:	b25b      	sxtb	r3, r3
 8005f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f50:	d103      	bne.n	8005f5a <vQueueWaitForMessageRestricted+0x2a>
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f66:	d103      	bne.n	8005f70 <vQueueWaitForMessageRestricted+0x40>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f70:	f001 fd8c 	bl	8007a8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d106      	bne.n	8005f8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	3324      	adds	r3, #36	@ 0x24
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	4618      	mov	r0, r3
 8005f86:	f000 fced 	bl	8006964 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f8a:	6978      	ldr	r0, [r7, #20]
 8005f8c:	f7ff ff26 	bl	8005ddc <prvUnlockQueue>
	}
 8005f90:	bf00      	nop
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b08e      	sub	sp, #56	@ 0x38
 8005f9c:	af04      	add	r7, sp, #16
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
 8005fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	623b      	str	r3, [r7, #32]
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	61fb      	str	r3, [r7, #28]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005fe2:	23a8      	movs	r3, #168	@ 0xa8
 8005fe4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	2ba8      	cmp	r3, #168	@ 0xa8
 8005fea:	d00b      	beq.n	8006004 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	61bb      	str	r3, [r7, #24]
}
 8005ffe:	bf00      	nop
 8006000:	bf00      	nop
 8006002:	e7fd      	b.n	8006000 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006004:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006008:	2b00      	cmp	r3, #0
 800600a:	d01e      	beq.n	800604a <xTaskCreateStatic+0xb2>
 800600c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800600e:	2b00      	cmp	r3, #0
 8006010:	d01b      	beq.n	800604a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	2202      	movs	r2, #2
 8006020:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006024:	2300      	movs	r3, #0
 8006026:	9303      	str	r3, [sp, #12]
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	9302      	str	r3, [sp, #8]
 800602c:	f107 0314 	add.w	r3, r7, #20
 8006030:	9301      	str	r3, [sp, #4]
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f000 f851 	bl	80060e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006042:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006044:	f000 f8f6 	bl	8006234 <prvAddNewTaskToReadyList>
 8006048:	e001      	b.n	800604e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800604a:	2300      	movs	r3, #0
 800604c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800604e:	697b      	ldr	r3, [r7, #20]
	}
 8006050:	4618      	mov	r0, r3
 8006052:	3728      	adds	r7, #40	@ 0x28
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b08c      	sub	sp, #48	@ 0x30
 800605c:	af04      	add	r7, sp, #16
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	603b      	str	r3, [r7, #0]
 8006064:	4613      	mov	r3, r2
 8006066:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006068:	88fb      	ldrh	r3, [r7, #6]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4618      	mov	r0, r3
 800606e:	f001 fdfd 	bl	8007c6c <pvPortMalloc>
 8006072:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800607a:	20a8      	movs	r0, #168	@ 0xa8
 800607c:	f001 fdf6 	bl	8007c6c <pvPortMalloc>
 8006080:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	631a      	str	r2, [r3, #48]	@ 0x30
 800608e:	e005      	b.n	800609c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006090:	6978      	ldr	r0, [r7, #20]
 8006092:	f001 feb9 	bl	8007e08 <vPortFree>
 8006096:	e001      	b.n	800609c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d017      	beq.n	80060d2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060aa:	88fa      	ldrh	r2, [r7, #6]
 80060ac:	2300      	movs	r3, #0
 80060ae:	9303      	str	r3, [sp, #12]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060b6:	9301      	str	r3, [sp, #4]
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f80f 	bl	80060e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80060c6:	69f8      	ldr	r0, [r7, #28]
 80060c8:	f000 f8b4 	bl	8006234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80060cc:	2301      	movs	r3, #1
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	e002      	b.n	80060d8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80060d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80060d6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80060d8:	69bb      	ldr	r3, [r7, #24]
	}
 80060da:	4618      	mov	r0, r3
 80060dc:	3720      	adds	r7, #32
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
	...

080060e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	461a      	mov	r2, r3
 80060fc:	21a5      	movs	r1, #165	@ 0xa5
 80060fe:	f001 ffa3 	bl	8008048 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006104:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800610c:	3b01      	subs	r3, #1
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f023 0307 	bic.w	r3, r3, #7
 800611a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	f383 8811 	msr	BASEPRI, r3
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f3bf 8f4f 	dsb	sy
 8006136:	617b      	str	r3, [r7, #20]
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	e7fd      	b.n	800613a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d01f      	beq.n	8006184 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006144:	2300      	movs	r3, #0
 8006146:	61fb      	str	r3, [r7, #28]
 8006148:	e012      	b.n	8006170 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	4413      	add	r3, r2
 8006150:	7819      	ldrb	r1, [r3, #0]
 8006152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	3334      	adds	r3, #52	@ 0x34
 800615a:	460a      	mov	r2, r1
 800615c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d006      	beq.n	8006178 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	3301      	adds	r3, #1
 800616e:	61fb      	str	r3, [r7, #28]
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	2b0f      	cmp	r3, #15
 8006174:	d9e9      	bls.n	800614a <prvInitialiseNewTask+0x66>
 8006176:	e000      	b.n	800617a <prvInitialiseNewTask+0x96>
			{
				break;
 8006178:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800617a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006182:	e003      	b.n	800618c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800618c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618e:	2b37      	cmp	r3, #55	@ 0x37
 8006190:	d901      	bls.n	8006196 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006192:	2337      	movs	r3, #55	@ 0x37
 8006194:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800619a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800619c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80061a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a4:	2200      	movs	r2, #0
 80061a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061aa:	3304      	adds	r3, #4
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe ff33 	bl	8005018 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80061b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b4:	3318      	adds	r3, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe ff2e 	bl	8005018 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	2200      	movs	r2, #0
 80061d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e4:	3354      	adds	r3, #84	@ 0x54
 80061e6:	224c      	movs	r2, #76	@ 0x4c
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 ff2c 	bl	8008048 <memset>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f2:	4a0d      	ldr	r2, [pc, #52]	@ (8006228 <prvInitialiseNewTask+0x144>)
 80061f4:	659a      	str	r2, [r3, #88]	@ 0x58
 80061f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f8:	4a0c      	ldr	r2, [pc, #48]	@ (800622c <prvInitialiseNewTask+0x148>)
 80061fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006230 <prvInitialiseNewTask+0x14c>)
 8006200:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	68f9      	ldr	r1, [r7, #12]
 8006206:	69b8      	ldr	r0, [r7, #24]
 8006208:	f001 fada 	bl	80077c0 <pxPortInitialiseStack>
 800620c:	4602      	mov	r2, r0
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d002      	beq.n	800621e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800621e:	bf00      	nop
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20002f24 	.word	0x20002f24
 800622c:	20002f8c 	.word	0x20002f8c
 8006230:	20002ff4 	.word	0x20002ff4

08006234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800623c:	f001 fbf4 	bl	8007a28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006240:	4b2d      	ldr	r3, [pc, #180]	@ (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	3301      	adds	r3, #1
 8006246:	4a2c      	ldr	r2, [pc, #176]	@ (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 8006248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800624a:	4b2c      	ldr	r3, [pc, #176]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006252:	4a2a      	ldr	r2, [pc, #168]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006258:	4b27      	ldr	r3, [pc, #156]	@ (80062f8 <prvAddNewTaskToReadyList+0xc4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d110      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006260:	f000 fcae 	bl	8006bc0 <prvInitialiseTaskLists>
 8006264:	e00d      	b.n	8006282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006266:	4b26      	ldr	r3, [pc, #152]	@ (8006300 <prvAddNewTaskToReadyList+0xcc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800626e:	4b23      	ldr	r3, [pc, #140]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006278:	429a      	cmp	r2, r3
 800627a:	d802      	bhi.n	8006282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800627c:	4a1f      	ldr	r2, [pc, #124]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006282:	4b20      	ldr	r3, [pc, #128]	@ (8006304 <prvAddNewTaskToReadyList+0xd0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	4a1e      	ldr	r2, [pc, #120]	@ (8006304 <prvAddNewTaskToReadyList+0xd0>)
 800628a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800628c:	4b1d      	ldr	r3, [pc, #116]	@ (8006304 <prvAddNewTaskToReadyList+0xd0>)
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006298:	4b1b      	ldr	r3, [pc, #108]	@ (8006308 <prvAddNewTaskToReadyList+0xd4>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	429a      	cmp	r2, r3
 800629e:	d903      	bls.n	80062a8 <prvAddNewTaskToReadyList+0x74>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a4:	4a18      	ldr	r2, [pc, #96]	@ (8006308 <prvAddNewTaskToReadyList+0xd4>)
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ac:	4613      	mov	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4413      	add	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4a15      	ldr	r2, [pc, #84]	@ (800630c <prvAddNewTaskToReadyList+0xd8>)
 80062b6:	441a      	add	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3304      	adds	r3, #4
 80062bc:	4619      	mov	r1, r3
 80062be:	4610      	mov	r0, r2
 80062c0:	f7fe feb7 	bl	8005032 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80062c4:	f001 fbe2 	bl	8007a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80062c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006300 <prvAddNewTaskToReadyList+0xcc>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00e      	beq.n	80062ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062d0:	4b0a      	ldr	r3, [pc, #40]	@ (80062fc <prvAddNewTaskToReadyList+0xc8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062da:	429a      	cmp	r2, r3
 80062dc:	d207      	bcs.n	80062ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80062de:	4b0c      	ldr	r3, [pc, #48]	@ (8006310 <prvAddNewTaskToReadyList+0xdc>)
 80062e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000e64 	.word	0x20000e64
 80062fc:	20000990 	.word	0x20000990
 8006300:	20000e70 	.word	0x20000e70
 8006304:	20000e80 	.word	0x20000e80
 8006308:	20000e6c 	.word	0x20000e6c
 800630c:	20000994 	.word	0x20000994
 8006310:	e000ed04 	.word	0xe000ed04

08006314 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	@ 0x28
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	617b      	str	r3, [r7, #20]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <vTaskDelayUntil+0x4a>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	613b      	str	r3, [r7, #16]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800635e:	4b2a      	ldr	r3, [pc, #168]	@ (8006408 <vTaskDelayUntil+0xf4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <vTaskDelayUntil+0x6a>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	60fb      	str	r3, [r7, #12]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800637e:	f000 f8ef 	bl	8006560 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006382:	4b22      	ldr	r3, [pc, #136]	@ (800640c <vTaskDelayUntil+0xf8>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	4413      	add	r3, r2
 8006390:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	6a3a      	ldr	r2, [r7, #32]
 8006398:	429a      	cmp	r2, r3
 800639a:	d20b      	bcs.n	80063b4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d211      	bcs.n	80063ca <vTaskDelayUntil+0xb6>
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d90d      	bls.n	80063ca <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80063ae:	2301      	movs	r3, #1
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b2:	e00a      	b.n	80063ca <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d303      	bcc.n	80063c6 <vTaskDelayUntil+0xb2>
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	6a3b      	ldr	r3, [r7, #32]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d901      	bls.n	80063ca <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 80063c6:	2301      	movs	r3, #1
 80063c8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69fa      	ldr	r2, [r7, #28]
 80063ce:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80063d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d006      	beq.n	80063e4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80063d6:	69fa      	ldr	r2, [r7, #28]
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fe40 	bl	8007064 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80063e4:	f000 f8ca 	bl	800657c <xTaskResumeAll>
 80063e8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d107      	bne.n	8006400 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80063f0:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <vTaskDelayUntil+0xfc>)
 80063f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006400:	bf00      	nop
 8006402:	3728      	adds	r7, #40	@ 0x28
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	20000e8c 	.word	0x20000e8c
 800640c:	20000e68 	.word	0x20000e68
 8006410:	e000ed04 	.word	0xe000ed04

08006414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800641c:	2300      	movs	r3, #0
 800641e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d018      	beq.n	8006458 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006426:	4b14      	ldr	r3, [pc, #80]	@ (8006478 <vTaskDelay+0x64>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00b      	beq.n	8006446 <vTaskDelay+0x32>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60bb      	str	r3, [r7, #8]
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	e7fd      	b.n	8006442 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006446:	f000 f88b 	bl	8006560 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800644a:	2100      	movs	r1, #0
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f000 fe09 	bl	8007064 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006452:	f000 f893 	bl	800657c <xTaskResumeAll>
 8006456:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d107      	bne.n	800646e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800645e:	4b07      	ldr	r3, [pc, #28]	@ (800647c <vTaskDelay+0x68>)
 8006460:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006464:	601a      	str	r2, [r3, #0]
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000e8c 	.word	0x20000e8c
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b08a      	sub	sp, #40	@ 0x28
 8006484:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006486:	2300      	movs	r3, #0
 8006488:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800648a:	2300      	movs	r3, #0
 800648c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800648e:	463a      	mov	r2, r7
 8006490:	1d39      	adds	r1, r7, #4
 8006492:	f107 0308 	add.w	r3, r7, #8
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fd6a 	bl	8004f70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	9202      	str	r2, [sp, #8]
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	2300      	movs	r3, #0
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	2300      	movs	r3, #0
 80064ac:	460a      	mov	r2, r1
 80064ae:	4924      	ldr	r1, [pc, #144]	@ (8006540 <vTaskStartScheduler+0xc0>)
 80064b0:	4824      	ldr	r0, [pc, #144]	@ (8006544 <vTaskStartScheduler+0xc4>)
 80064b2:	f7ff fd71 	bl	8005f98 <xTaskCreateStatic>
 80064b6:	4603      	mov	r3, r0
 80064b8:	4a23      	ldr	r2, [pc, #140]	@ (8006548 <vTaskStartScheduler+0xc8>)
 80064ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80064bc:	4b22      	ldr	r3, [pc, #136]	@ (8006548 <vTaskStartScheduler+0xc8>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e001      	b.n	80064ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80064ca:	2300      	movs	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d102      	bne.n	80064da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80064d4:	f000 fe1a 	bl	800710c <xTimerCreateTimerTask>
 80064d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d11b      	bne.n	8006518 <vTaskStartScheduler+0x98>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	613b      	str	r3, [r7, #16]
}
 80064f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064f4:	4b15      	ldr	r3, [pc, #84]	@ (800654c <vTaskStartScheduler+0xcc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	3354      	adds	r3, #84	@ 0x54
 80064fa:	4a15      	ldr	r2, [pc, #84]	@ (8006550 <vTaskStartScheduler+0xd0>)
 80064fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80064fe:	4b15      	ldr	r3, [pc, #84]	@ (8006554 <vTaskStartScheduler+0xd4>)
 8006500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006504:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006506:	4b14      	ldr	r3, [pc, #80]	@ (8006558 <vTaskStartScheduler+0xd8>)
 8006508:	2201      	movs	r2, #1
 800650a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800650c:	4b13      	ldr	r3, [pc, #76]	@ (800655c <vTaskStartScheduler+0xdc>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006512:	f001 f9e5 	bl	80078e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006516:	e00f      	b.n	8006538 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800651e:	d10b      	bne.n	8006538 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <vTaskStartScheduler+0xb4>
}
 8006538:	bf00      	nop
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	080082fc 	.word	0x080082fc
 8006544:	08006b91 	.word	0x08006b91
 8006548:	20000e88 	.word	0x20000e88
 800654c:	20000990 	.word	0x20000990
 8006550:	20000018 	.word	0x20000018
 8006554:	20000e84 	.word	0x20000e84
 8006558:	20000e70 	.word	0x20000e70
 800655c:	20000e68 	.word	0x20000e68

08006560 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006564:	4b04      	ldr	r3, [pc, #16]	@ (8006578 <vTaskSuspendAll+0x18>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	4a03      	ldr	r2, [pc, #12]	@ (8006578 <vTaskSuspendAll+0x18>)
 800656c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800656e:	bf00      	nop
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	20000e8c 	.word	0x20000e8c

0800657c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006582:	2300      	movs	r3, #0
 8006584:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006586:	2300      	movs	r3, #0
 8006588:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800658a:	4b42      	ldr	r3, [pc, #264]	@ (8006694 <xTaskResumeAll+0x118>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <xTaskResumeAll+0x2e>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	603b      	str	r3, [r7, #0]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80065aa:	f001 fa3d 	bl	8007a28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80065ae:	4b39      	ldr	r3, [pc, #228]	@ (8006694 <xTaskResumeAll+0x118>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	4a37      	ldr	r2, [pc, #220]	@ (8006694 <xTaskResumeAll+0x118>)
 80065b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065b8:	4b36      	ldr	r3, [pc, #216]	@ (8006694 <xTaskResumeAll+0x118>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d162      	bne.n	8006686 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80065c0:	4b35      	ldr	r3, [pc, #212]	@ (8006698 <xTaskResumeAll+0x11c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d05e      	beq.n	8006686 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065c8:	e02f      	b.n	800662a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065ca:	4b34      	ldr	r3, [pc, #208]	@ (800669c <xTaskResumeAll+0x120>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	3318      	adds	r3, #24
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fd88 	bl	80050ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3304      	adds	r3, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fe fd83 	bl	80050ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ea:	4b2d      	ldr	r3, [pc, #180]	@ (80066a0 <xTaskResumeAll+0x124>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d903      	bls.n	80065fa <xTaskResumeAll+0x7e>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	4a2a      	ldr	r2, [pc, #168]	@ (80066a0 <xTaskResumeAll+0x124>)
 80065f8:	6013      	str	r3, [r2, #0]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065fe:	4613      	mov	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	4413      	add	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4a27      	ldr	r2, [pc, #156]	@ (80066a4 <xTaskResumeAll+0x128>)
 8006608:	441a      	add	r2, r3
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	3304      	adds	r3, #4
 800660e:	4619      	mov	r1, r3
 8006610:	4610      	mov	r0, r2
 8006612:	f7fe fd0e 	bl	8005032 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800661a:	4b23      	ldr	r3, [pc, #140]	@ (80066a8 <xTaskResumeAll+0x12c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006620:	429a      	cmp	r2, r3
 8006622:	d302      	bcc.n	800662a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006624:	4b21      	ldr	r3, [pc, #132]	@ (80066ac <xTaskResumeAll+0x130>)
 8006626:	2201      	movs	r2, #1
 8006628:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800662a:	4b1c      	ldr	r3, [pc, #112]	@ (800669c <xTaskResumeAll+0x120>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1cb      	bne.n	80065ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006638:	f000 fb66 	bl	8006d08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800663c:	4b1c      	ldr	r3, [pc, #112]	@ (80066b0 <xTaskResumeAll+0x134>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006648:	f000 f846 	bl	80066d8 <xTaskIncrementTick>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006652:	4b16      	ldr	r3, [pc, #88]	@ (80066ac <xTaskResumeAll+0x130>)
 8006654:	2201      	movs	r2, #1
 8006656:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	3b01      	subs	r3, #1
 800665c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1f1      	bne.n	8006648 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006664:	4b12      	ldr	r3, [pc, #72]	@ (80066b0 <xTaskResumeAll+0x134>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800666a:	4b10      	ldr	r3, [pc, #64]	@ (80066ac <xTaskResumeAll+0x130>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d009      	beq.n	8006686 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006672:	2301      	movs	r3, #1
 8006674:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006676:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <xTaskResumeAll+0x138>)
 8006678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800667c:	601a      	str	r2, [r3, #0]
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006686:	f001 fa01 	bl	8007a8c <vPortExitCritical>

	return xAlreadyYielded;
 800668a:	68bb      	ldr	r3, [r7, #8]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20000e8c 	.word	0x20000e8c
 8006698:	20000e64 	.word	0x20000e64
 800669c:	20000e24 	.word	0x20000e24
 80066a0:	20000e6c 	.word	0x20000e6c
 80066a4:	20000994 	.word	0x20000994
 80066a8:	20000990 	.word	0x20000990
 80066ac:	20000e78 	.word	0x20000e78
 80066b0:	20000e74 	.word	0x20000e74
 80066b4:	e000ed04 	.word	0xe000ed04

080066b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80066be:	4b05      	ldr	r3, [pc, #20]	@ (80066d4 <xTaskGetTickCount+0x1c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80066c4:	687b      	ldr	r3, [r7, #4]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000e68 	.word	0x20000e68

080066d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80066de:	2300      	movs	r3, #0
 80066e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e2:	4b4f      	ldr	r3, [pc, #316]	@ (8006820 <xTaskIncrementTick+0x148>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f040 8090 	bne.w	800680c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80066ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006824 <xTaskIncrementTick+0x14c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3301      	adds	r3, #1
 80066f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80066f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006824 <xTaskIncrementTick+0x14c>)
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d121      	bne.n	8006744 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006700:	4b49      	ldr	r3, [pc, #292]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00b      	beq.n	8006722 <xTaskIncrementTick+0x4a>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	603b      	str	r3, [r7, #0]
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	e7fd      	b.n	800671e <xTaskIncrementTick+0x46>
 8006722:	4b41      	ldr	r3, [pc, #260]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	4b40      	ldr	r3, [pc, #256]	@ (800682c <xTaskIncrementTick+0x154>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a3e      	ldr	r2, [pc, #248]	@ (8006828 <xTaskIncrementTick+0x150>)
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4a3e      	ldr	r2, [pc, #248]	@ (800682c <xTaskIncrementTick+0x154>)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	4b3e      	ldr	r3, [pc, #248]	@ (8006830 <xTaskIncrementTick+0x158>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3301      	adds	r3, #1
 800673c:	4a3c      	ldr	r2, [pc, #240]	@ (8006830 <xTaskIncrementTick+0x158>)
 800673e:	6013      	str	r3, [r2, #0]
 8006740:	f000 fae2 	bl	8006d08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006744:	4b3b      	ldr	r3, [pc, #236]	@ (8006834 <xTaskIncrementTick+0x15c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	429a      	cmp	r2, r3
 800674c:	d349      	bcc.n	80067e2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800674e:	4b36      	ldr	r3, [pc, #216]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d104      	bne.n	8006762 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006758:	4b36      	ldr	r3, [pc, #216]	@ (8006834 <xTaskIncrementTick+0x15c>)
 800675a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800675e:	601a      	str	r2, [r3, #0]
					break;
 8006760:	e03f      	b.n	80067e2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006762:	4b31      	ldr	r3, [pc, #196]	@ (8006828 <xTaskIncrementTick+0x150>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	429a      	cmp	r2, r3
 8006778:	d203      	bcs.n	8006782 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800677a:	4a2e      	ldr	r2, [pc, #184]	@ (8006834 <xTaskIncrementTick+0x15c>)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006780:	e02f      	b.n	80067e2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	3304      	adds	r3, #4
 8006786:	4618      	mov	r0, r3
 8006788:	f7fe fcb0 	bl	80050ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006790:	2b00      	cmp	r3, #0
 8006792:	d004      	beq.n	800679e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	3318      	adds	r3, #24
 8006798:	4618      	mov	r0, r3
 800679a:	f7fe fca7 	bl	80050ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a2:	4b25      	ldr	r3, [pc, #148]	@ (8006838 <xTaskIncrementTick+0x160>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d903      	bls.n	80067b2 <xTaskIncrementTick+0xda>
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ae:	4a22      	ldr	r2, [pc, #136]	@ (8006838 <xTaskIncrementTick+0x160>)
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a1f      	ldr	r2, [pc, #124]	@ (800683c <xTaskIncrementTick+0x164>)
 80067c0:	441a      	add	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	3304      	adds	r3, #4
 80067c6:	4619      	mov	r1, r3
 80067c8:	4610      	mov	r0, r2
 80067ca:	f7fe fc32 	bl	8005032 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006840 <xTaskIncrementTick+0x168>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d8:	429a      	cmp	r2, r3
 80067da:	d3b8      	bcc.n	800674e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e0:	e7b5      	b.n	800674e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80067e2:	4b17      	ldr	r3, [pc, #92]	@ (8006840 <xTaskIncrementTick+0x168>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e8:	4914      	ldr	r1, [pc, #80]	@ (800683c <xTaskIncrementTick+0x164>)
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d901      	bls.n	80067fe <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80067fa:	2301      	movs	r3, #1
 80067fc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80067fe:	4b11      	ldr	r3, [pc, #68]	@ (8006844 <xTaskIncrementTick+0x16c>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d007      	beq.n	8006816 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	e004      	b.n	8006816 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800680c:	4b0e      	ldr	r3, [pc, #56]	@ (8006848 <xTaskIncrementTick+0x170>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3301      	adds	r3, #1
 8006812:	4a0d      	ldr	r2, [pc, #52]	@ (8006848 <xTaskIncrementTick+0x170>)
 8006814:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006816:	697b      	ldr	r3, [r7, #20]
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	20000e8c 	.word	0x20000e8c
 8006824:	20000e68 	.word	0x20000e68
 8006828:	20000e1c 	.word	0x20000e1c
 800682c:	20000e20 	.word	0x20000e20
 8006830:	20000e7c 	.word	0x20000e7c
 8006834:	20000e84 	.word	0x20000e84
 8006838:	20000e6c 	.word	0x20000e6c
 800683c:	20000994 	.word	0x20000994
 8006840:	20000990 	.word	0x20000990
 8006844:	20000e78 	.word	0x20000e78
 8006848:	20000e74 	.word	0x20000e74

0800684c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006852:	4b2b      	ldr	r3, [pc, #172]	@ (8006900 <vTaskSwitchContext+0xb4>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d003      	beq.n	8006862 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800685a:	4b2a      	ldr	r3, [pc, #168]	@ (8006904 <vTaskSwitchContext+0xb8>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006860:	e047      	b.n	80068f2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006862:	4b28      	ldr	r3, [pc, #160]	@ (8006904 <vTaskSwitchContext+0xb8>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006868:	4b27      	ldr	r3, [pc, #156]	@ (8006908 <vTaskSwitchContext+0xbc>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	60fb      	str	r3, [r7, #12]
 800686e:	e011      	b.n	8006894 <vTaskSwitchContext+0x48>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <vTaskSwitchContext+0x42>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	607b      	str	r3, [r7, #4]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <vTaskSwitchContext+0x3e>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3b01      	subs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	491d      	ldr	r1, [pc, #116]	@ (800690c <vTaskSwitchContext+0xc0>)
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	440b      	add	r3, r1
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0e3      	beq.n	8006870 <vTaskSwitchContext+0x24>
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4a16      	ldr	r2, [pc, #88]	@ (800690c <vTaskSwitchContext+0xc0>)
 80068b4:	4413      	add	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	605a      	str	r2, [r3, #4]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	685a      	ldr	r2, [r3, #4]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	3308      	adds	r3, #8
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d104      	bne.n	80068d8 <vTaskSwitchContext+0x8c>
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	4a0c      	ldr	r2, [pc, #48]	@ (8006910 <vTaskSwitchContext+0xc4>)
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	4a09      	ldr	r2, [pc, #36]	@ (8006908 <vTaskSwitchContext+0xbc>)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068e8:	4b09      	ldr	r3, [pc, #36]	@ (8006910 <vTaskSwitchContext+0xc4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3354      	adds	r3, #84	@ 0x54
 80068ee:	4a09      	ldr	r2, [pc, #36]	@ (8006914 <vTaskSwitchContext+0xc8>)
 80068f0:	6013      	str	r3, [r2, #0]
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000e8c 	.word	0x20000e8c
 8006904:	20000e78 	.word	0x20000e78
 8006908:	20000e6c 	.word	0x20000e6c
 800690c:	20000994 	.word	0x20000994
 8006910:	20000990 	.word	0x20000990
 8006914:	20000018 	.word	0x20000018

08006918 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10b      	bne.n	8006940 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	60fb      	str	r3, [r7, #12]
}
 800693a:	bf00      	nop
 800693c:	bf00      	nop
 800693e:	e7fd      	b.n	800693c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006940:	4b07      	ldr	r3, [pc, #28]	@ (8006960 <vTaskPlaceOnEventList+0x48>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3318      	adds	r3, #24
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7fe fb96 	bl	800507a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800694e:	2101      	movs	r1, #1
 8006950:	6838      	ldr	r0, [r7, #0]
 8006952:	f000 fb87 	bl	8007064 <prvAddCurrentTaskToDelayedList>
}
 8006956:	bf00      	nop
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20000990 	.word	0x20000990

08006964 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	617b      	str	r3, [r7, #20]
}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800698e:	4b0a      	ldr	r3, [pc, #40]	@ (80069b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3318      	adds	r3, #24
 8006994:	4619      	mov	r1, r3
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7fe fb4b 	bl	8005032 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80069a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	68b8      	ldr	r0, [r7, #8]
 80069ac:	f000 fb5a 	bl	8007064 <prvAddCurrentTaskToDelayedList>
	}
 80069b0:	bf00      	nop
 80069b2:	3718      	adds	r7, #24
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	20000990 	.word	0x20000990

080069bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10b      	bne.n	80069ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	60fb      	str	r3, [r7, #12]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	3318      	adds	r3, #24
 80069ee:	4618      	mov	r0, r3
 80069f0:	f7fe fb7c 	bl	80050ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a6c <xTaskRemoveFromEventList+0xb0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d11d      	bne.n	8006a38 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fe fb73 	bl	80050ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a0a:	4b19      	ldr	r3, [pc, #100]	@ (8006a70 <xTaskRemoveFromEventList+0xb4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d903      	bls.n	8006a1a <xTaskRemoveFromEventList+0x5e>
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	4a16      	ldr	r2, [pc, #88]	@ (8006a70 <xTaskRemoveFromEventList+0xb4>)
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a1e:	4613      	mov	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4a13      	ldr	r2, [pc, #76]	@ (8006a74 <xTaskRemoveFromEventList+0xb8>)
 8006a28:	441a      	add	r2, r3
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f7fe fafe 	bl	8005032 <vListInsertEnd>
 8006a36:	e005      	b.n	8006a44 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	480e      	ldr	r0, [pc, #56]	@ (8006a78 <xTaskRemoveFromEventList+0xbc>)
 8006a40:	f7fe faf7 	bl	8005032 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a48:	4b0c      	ldr	r3, [pc, #48]	@ (8006a7c <xTaskRemoveFromEventList+0xc0>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d905      	bls.n	8006a5e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006a52:	2301      	movs	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006a56:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <xTaskRemoveFromEventList+0xc4>)
 8006a58:	2201      	movs	r2, #1
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	e001      	b.n	8006a62 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006a62:	697b      	ldr	r3, [r7, #20]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000e8c 	.word	0x20000e8c
 8006a70:	20000e6c 	.word	0x20000e6c
 8006a74:	20000994 	.word	0x20000994
 8006a78:	20000e24 	.word	0x20000e24
 8006a7c:	20000990 	.word	0x20000990
 8006a80:	20000e78 	.word	0x20000e78

08006a84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a8c:	4b06      	ldr	r3, [pc, #24]	@ (8006aa8 <vTaskInternalSetTimeOutState+0x24>)
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006a94:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <vTaskInternalSetTimeOutState+0x28>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	605a      	str	r2, [r3, #4]
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	20000e7c 	.word	0x20000e7c
 8006aac:	20000e68 	.word	0x20000e68

08006ab0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b088      	sub	sp, #32
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10b      	bne.n	8006ad8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	613b      	str	r3, [r7, #16]
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006af6:	f000 ff97 	bl	8007a28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006afa:	4b1d      	ldr	r3, [pc, #116]	@ (8006b70 <xTaskCheckForTimeOut+0xc0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b12:	d102      	bne.n	8006b1a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	61fb      	str	r3, [r7, #28]
 8006b18:	e023      	b.n	8006b62 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	4b15      	ldr	r3, [pc, #84]	@ (8006b74 <xTaskCheckForTimeOut+0xc4>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d007      	beq.n	8006b36 <xTaskCheckForTimeOut+0x86>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d302      	bcc.n	8006b36 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006b30:	2301      	movs	r3, #1
 8006b32:	61fb      	str	r3, [r7, #28]
 8006b34:	e015      	b.n	8006b62 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d20b      	bcs.n	8006b58 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	1ad2      	subs	r2, r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff ff99 	bl	8006a84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	e004      	b.n	8006b62 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006b62:	f000 ff93 	bl	8007a8c <vPortExitCritical>

	return xReturn;
 8006b66:	69fb      	ldr	r3, [r7, #28]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3720      	adds	r7, #32
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	20000e68 	.word	0x20000e68
 8006b74:	20000e7c 	.word	0x20000e7c

08006b78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006b7c:	4b03      	ldr	r3, [pc, #12]	@ (8006b8c <vTaskMissedYield+0x14>)
 8006b7e:	2201      	movs	r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
}
 8006b82:	bf00      	nop
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000e78 	.word	0x20000e78

08006b90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b082      	sub	sp, #8
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006b98:	f000 f852 	bl	8006c40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b9c:	4b06      	ldr	r3, [pc, #24]	@ (8006bb8 <prvIdleTask+0x28>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d9f9      	bls.n	8006b98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ba4:	4b05      	ldr	r3, [pc, #20]	@ (8006bbc <prvIdleTask+0x2c>)
 8006ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006bb4:	e7f0      	b.n	8006b98 <prvIdleTask+0x8>
 8006bb6:	bf00      	nop
 8006bb8:	20000994 	.word	0x20000994
 8006bbc:	e000ed04 	.word	0xe000ed04

08006bc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
 8006bca:	e00c      	b.n	8006be6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4a12      	ldr	r2, [pc, #72]	@ (8006c20 <prvInitialiseTaskLists+0x60>)
 8006bd8:	4413      	add	r3, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fe f9fc 	bl	8004fd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	3301      	adds	r3, #1
 8006be4:	607b      	str	r3, [r7, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b37      	cmp	r3, #55	@ 0x37
 8006bea:	d9ef      	bls.n	8006bcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006bec:	480d      	ldr	r0, [pc, #52]	@ (8006c24 <prvInitialiseTaskLists+0x64>)
 8006bee:	f7fe f9f3 	bl	8004fd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006bf2:	480d      	ldr	r0, [pc, #52]	@ (8006c28 <prvInitialiseTaskLists+0x68>)
 8006bf4:	f7fe f9f0 	bl	8004fd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006bf8:	480c      	ldr	r0, [pc, #48]	@ (8006c2c <prvInitialiseTaskLists+0x6c>)
 8006bfa:	f7fe f9ed 	bl	8004fd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006bfe:	480c      	ldr	r0, [pc, #48]	@ (8006c30 <prvInitialiseTaskLists+0x70>)
 8006c00:	f7fe f9ea 	bl	8004fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006c04:	480b      	ldr	r0, [pc, #44]	@ (8006c34 <prvInitialiseTaskLists+0x74>)
 8006c06:	f7fe f9e7 	bl	8004fd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c38 <prvInitialiseTaskLists+0x78>)
 8006c0c:	4a05      	ldr	r2, [pc, #20]	@ (8006c24 <prvInitialiseTaskLists+0x64>)
 8006c0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c10:	4b0a      	ldr	r3, [pc, #40]	@ (8006c3c <prvInitialiseTaskLists+0x7c>)
 8006c12:	4a05      	ldr	r2, [pc, #20]	@ (8006c28 <prvInitialiseTaskLists+0x68>)
 8006c14:	601a      	str	r2, [r3, #0]
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20000994 	.word	0x20000994
 8006c24:	20000df4 	.word	0x20000df4
 8006c28:	20000e08 	.word	0x20000e08
 8006c2c:	20000e24 	.word	0x20000e24
 8006c30:	20000e38 	.word	0x20000e38
 8006c34:	20000e50 	.word	0x20000e50
 8006c38:	20000e1c 	.word	0x20000e1c
 8006c3c:	20000e20 	.word	0x20000e20

08006c40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c46:	e019      	b.n	8006c7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006c48:	f000 feee 	bl	8007a28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c4c:	4b10      	ldr	r3, [pc, #64]	@ (8006c90 <prvCheckTasksWaitingTermination+0x50>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	68db      	ldr	r3, [r3, #12]
 8006c52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	3304      	adds	r3, #4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fe fa47 	bl	80050ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c94 <prvCheckTasksWaitingTermination+0x54>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	4a0b      	ldr	r2, [pc, #44]	@ (8006c94 <prvCheckTasksWaitingTermination+0x54>)
 8006c66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006c68:	4b0b      	ldr	r3, [pc, #44]	@ (8006c98 <prvCheckTasksWaitingTermination+0x58>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8006c98 <prvCheckTasksWaitingTermination+0x58>)
 8006c70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006c72:	f000 ff0b 	bl	8007a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f810 	bl	8006c9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <prvCheckTasksWaitingTermination+0x58>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d1e1      	bne.n	8006c48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop
 8006c90:	20000e38 	.word	0x20000e38
 8006c94:	20000e64 	.word	0x20000e64
 8006c98:	20000e4c 	.word	0x20000e4c

08006c9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3354      	adds	r3, #84	@ 0x54
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f001 f9d5 	bl	8008058 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d108      	bne.n	8006cca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f001 f8a3 	bl	8007e08 <vPortFree>
				vPortFree( pxTCB );
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f8a0 	bl	8007e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006cc8:	e019      	b.n	8006cfe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d103      	bne.n	8006cdc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f897 	bl	8007e08 <vPortFree>
	}
 8006cda:	e010      	b.n	8006cfe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ce2:	2b02      	cmp	r3, #2
 8006ce4:	d00b      	beq.n	8006cfe <prvDeleteTCB+0x62>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	60fb      	str	r3, [r7, #12]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <prvDeleteTCB+0x5e>
	}
 8006cfe:	bf00      	nop
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <prvResetNextTaskUnblockTime+0x38>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d104      	bne.n	8006d22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006d18:	4b0a      	ldr	r3, [pc, #40]	@ (8006d44 <prvResetNextTaskUnblockTime+0x3c>)
 8006d1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006d20:	e008      	b.n	8006d34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d22:	4b07      	ldr	r3, [pc, #28]	@ (8006d40 <prvResetNextTaskUnblockTime+0x38>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	4a04      	ldr	r2, [pc, #16]	@ (8006d44 <prvResetNextTaskUnblockTime+0x3c>)
 8006d32:	6013      	str	r3, [r2, #0]
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	20000e1c 	.word	0x20000e1c
 8006d44:	20000e84 	.word	0x20000e84

08006d48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <xTaskGetSchedulerState+0x34>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d102      	bne.n	8006d5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006d56:	2301      	movs	r3, #1
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	e008      	b.n	8006d6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d5c:	4b08      	ldr	r3, [pc, #32]	@ (8006d80 <xTaskGetSchedulerState+0x38>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d102      	bne.n	8006d6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006d64:	2302      	movs	r3, #2
 8006d66:	607b      	str	r3, [r7, #4]
 8006d68:	e001      	b.n	8006d6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006d6e:	687b      	ldr	r3, [r7, #4]
	}
 8006d70:	4618      	mov	r0, r3
 8006d72:	370c      	adds	r7, #12
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr
 8006d7c:	20000e70 	.word	0x20000e70
 8006d80:	20000e8c 	.word	0x20000e8c

08006d84 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d051      	beq.n	8006e3e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e48 <xTaskPriorityInherit+0xc4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d241      	bcs.n	8006e2c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	db06      	blt.n	8006dbe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006db0:	4b25      	ldr	r3, [pc, #148]	@ (8006e48 <xTaskPriorityInherit+0xc4>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	6959      	ldr	r1, [r3, #20]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	009b      	lsls	r3, r3, #2
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	4a1f      	ldr	r2, [pc, #124]	@ (8006e4c <xTaskPriorityInherit+0xc8>)
 8006dd0:	4413      	add	r3, r2
 8006dd2:	4299      	cmp	r1, r3
 8006dd4:	d122      	bne.n	8006e1c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	3304      	adds	r3, #4
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7fe f986 	bl	80050ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006de0:	4b19      	ldr	r3, [pc, #100]	@ (8006e48 <xTaskPriorityInherit+0xc4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dee:	4b18      	ldr	r3, [pc, #96]	@ (8006e50 <xTaskPriorityInherit+0xcc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d903      	bls.n	8006dfe <xTaskPriorityInherit+0x7a>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfa:	4a15      	ldr	r2, [pc, #84]	@ (8006e50 <xTaskPriorityInherit+0xcc>)
 8006dfc:	6013      	str	r3, [r2, #0]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e02:	4613      	mov	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4a10      	ldr	r2, [pc, #64]	@ (8006e4c <xTaskPriorityInherit+0xc8>)
 8006e0c:	441a      	add	r2, r3
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	3304      	adds	r3, #4
 8006e12:	4619      	mov	r1, r3
 8006e14:	4610      	mov	r0, r2
 8006e16:	f7fe f90c 	bl	8005032 <vListInsertEnd>
 8006e1a:	e004      	b.n	8006e26 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006e48 <xTaskPriorityInherit+0xc4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006e26:	2301      	movs	r3, #1
 8006e28:	60fb      	str	r3, [r7, #12]
 8006e2a:	e008      	b.n	8006e3e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e30:	4b05      	ldr	r3, [pc, #20]	@ (8006e48 <xTaskPriorityInherit+0xc4>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d201      	bcs.n	8006e3e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20000990 	.word	0x20000990
 8006e4c:	20000994 	.word	0x20000994
 8006e50:	20000e6c 	.word	0x20000e6c

08006e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b086      	sub	sp, #24
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e60:	2300      	movs	r3, #0
 8006e62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d058      	beq.n	8006f1c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006f28 <xTaskPriorityDisinherit+0xd4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d00b      	beq.n	8006e8c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	60fb      	str	r3, [r7, #12]
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10b      	bne.n	8006eac <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	60bb      	str	r3, [r7, #8]
}
 8006ea6:	bf00      	nop
 8006ea8:	bf00      	nop
 8006eaa:	e7fd      	b.n	8006ea8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eb0:	1e5a      	subs	r2, r3, #1
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d02c      	beq.n	8006f1c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d128      	bne.n	8006f1c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe f90c 	bl	80050ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eec:	4b0f      	ldr	r3, [pc, #60]	@ (8006f2c <xTaskPriorityDisinherit+0xd8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d903      	bls.n	8006efc <xTaskPriorityDisinherit+0xa8>
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8006f2c <xTaskPriorityDisinherit+0xd8>)
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4a09      	ldr	r2, [pc, #36]	@ (8006f30 <xTaskPriorityDisinherit+0xdc>)
 8006f0a:	441a      	add	r2, r3
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f7fe f88d 	bl	8005032 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f1c:	697b      	ldr	r3, [r7, #20]
	}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000990 	.word	0x20000990
 8006f2c:	20000e6c 	.word	0x20000e6c
 8006f30:	20000994 	.word	0x20000994

08006f34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b088      	sub	sp, #32
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d06c      	beq.n	8007026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10b      	bne.n	8006f6c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	60fb      	str	r3, [r7, #12]
}
 8006f66:	bf00      	nop
 8006f68:	bf00      	nop
 8006f6a:	e7fd      	b.n	8006f68 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f70:	683a      	ldr	r2, [r7, #0]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d902      	bls.n	8006f7c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	61fb      	str	r3, [r7, #28]
 8006f7a:	e002      	b.n	8006f82 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d04c      	beq.n	8007026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f90:	697a      	ldr	r2, [r7, #20]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d147      	bne.n	8007026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006f96:	4b26      	ldr	r3, [pc, #152]	@ (8007030 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d10b      	bne.n	8006fb8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	60bb      	str	r3, [r7, #8]
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	e7fd      	b.n	8006fb4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	69fa      	ldr	r2, [r7, #28]
 8006fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	db04      	blt.n	8006fd6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006fd6:	69bb      	ldr	r3, [r7, #24]
 8006fd8:	6959      	ldr	r1, [r3, #20]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4a13      	ldr	r2, [pc, #76]	@ (8007034 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006fe6:	4413      	add	r3, r2
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	d11c      	bne.n	8007026 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe f87b 	bl	80050ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8007038 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d903      	bls.n	800700a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007002:	69bb      	ldr	r3, [r7, #24]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	4a0c      	ldr	r2, [pc, #48]	@ (8007038 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4a07      	ldr	r2, [pc, #28]	@ (8007034 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007018:	441a      	add	r2, r3
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3304      	adds	r3, #4
 800701e:	4619      	mov	r1, r3
 8007020:	4610      	mov	r0, r2
 8007022:	f7fe f806 	bl	8005032 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007026:	bf00      	nop
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000990 	.word	0x20000990
 8007034:	20000994 	.word	0x20000994
 8007038:	20000e6c 	.word	0x20000e6c

0800703c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007040:	4b07      	ldr	r3, [pc, #28]	@ (8007060 <pvTaskIncrementMutexHeldCount+0x24>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d004      	beq.n	8007052 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007048:	4b05      	ldr	r3, [pc, #20]	@ (8007060 <pvTaskIncrementMutexHeldCount+0x24>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800704e:	3201      	adds	r2, #1
 8007050:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007052:	4b03      	ldr	r3, [pc, #12]	@ (8007060 <pvTaskIncrementMutexHeldCount+0x24>)
 8007054:	681b      	ldr	r3, [r3, #0]
	}
 8007056:	4618      	mov	r0, r3
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000990 	.word	0x20000990

08007064 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800706e:	4b21      	ldr	r3, [pc, #132]	@ (80070f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007074:	4b20      	ldr	r3, [pc, #128]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	3304      	adds	r3, #4
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe f836 	bl	80050ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007086:	d10a      	bne.n	800709e <prvAddCurrentTaskToDelayedList+0x3a>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800708e:	4b1a      	ldr	r3, [pc, #104]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3304      	adds	r3, #4
 8007094:	4619      	mov	r1, r3
 8007096:	4819      	ldr	r0, [pc, #100]	@ (80070fc <prvAddCurrentTaskToDelayedList+0x98>)
 8007098:	f7fd ffcb 	bl	8005032 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800709c:	e026      	b.n	80070ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4413      	add	r3, r2
 80070a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80070a6:	4b14      	ldr	r3, [pc, #80]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d209      	bcs.n	80070ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070b6:	4b12      	ldr	r3, [pc, #72]	@ (8007100 <prvAddCurrentTaskToDelayedList+0x9c>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b0f      	ldr	r3, [pc, #60]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	3304      	adds	r3, #4
 80070c0:	4619      	mov	r1, r3
 80070c2:	4610      	mov	r0, r2
 80070c4:	f7fd ffd9 	bl	800507a <vListInsert>
}
 80070c8:	e010      	b.n	80070ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070ca:	4b0e      	ldr	r3, [pc, #56]	@ (8007104 <prvAddCurrentTaskToDelayedList+0xa0>)
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	4b0a      	ldr	r3, [pc, #40]	@ (80070f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f7fd ffcf 	bl	800507a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d202      	bcs.n	80070ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070e6:	4a08      	ldr	r2, [pc, #32]	@ (8007108 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6013      	str	r3, [r2, #0]
}
 80070ec:	bf00      	nop
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000e68 	.word	0x20000e68
 80070f8:	20000990 	.word	0x20000990
 80070fc:	20000e50 	.word	0x20000e50
 8007100:	20000e20 	.word	0x20000e20
 8007104:	20000e1c 	.word	0x20000e1c
 8007108:	20000e84 	.word	0x20000e84

0800710c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08a      	sub	sp, #40	@ 0x28
 8007110:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007112:	2300      	movs	r3, #0
 8007114:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007116:	f000 fb13 	bl	8007740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800711a:	4b1d      	ldr	r3, [pc, #116]	@ (8007190 <xTimerCreateTimerTask+0x84>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d021      	beq.n	8007166 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007126:	2300      	movs	r3, #0
 8007128:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800712a:	1d3a      	adds	r2, r7, #4
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	f107 030c 	add.w	r3, r7, #12
 8007134:	4618      	mov	r0, r3
 8007136:	f7fd ff35 	bl	8004fa4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	9202      	str	r2, [sp, #8]
 8007142:	9301      	str	r3, [sp, #4]
 8007144:	2302      	movs	r3, #2
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2300      	movs	r3, #0
 800714a:	460a      	mov	r2, r1
 800714c:	4911      	ldr	r1, [pc, #68]	@ (8007194 <xTimerCreateTimerTask+0x88>)
 800714e:	4812      	ldr	r0, [pc, #72]	@ (8007198 <xTimerCreateTimerTask+0x8c>)
 8007150:	f7fe ff22 	bl	8005f98 <xTaskCreateStatic>
 8007154:	4603      	mov	r3, r0
 8007156:	4a11      	ldr	r2, [pc, #68]	@ (800719c <xTimerCreateTimerTask+0x90>)
 8007158:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800715a:	4b10      	ldr	r3, [pc, #64]	@ (800719c <xTimerCreateTimerTask+0x90>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007162:	2301      	movs	r3, #1
 8007164:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10b      	bne.n	8007184 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	613b      	str	r3, [r7, #16]
}
 800717e:	bf00      	nop
 8007180:	bf00      	nop
 8007182:	e7fd      	b.n	8007180 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007184:	697b      	ldr	r3, [r7, #20]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	20000ec0 	.word	0x20000ec0
 8007194:	08008304 	.word	0x08008304
 8007198:	080072d9 	.word	0x080072d9
 800719c:	20000ec4 	.word	0x20000ec4

080071a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08a      	sub	sp, #40	@ 0x28
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10b      	bne.n	80071d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071bc:	f383 8811 	msr	BASEPRI, r3
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	f3bf 8f4f 	dsb	sy
 80071c8:	623b      	str	r3, [r7, #32]
}
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	e7fd      	b.n	80071cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071d0:	4b19      	ldr	r3, [pc, #100]	@ (8007238 <xTimerGenericCommand+0x98>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d02a      	beq.n	800722e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b05      	cmp	r3, #5
 80071e8:	dc18      	bgt.n	800721c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071ea:	f7ff fdad 	bl	8006d48 <xTaskGetSchedulerState>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d109      	bne.n	8007208 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071f4:	4b10      	ldr	r3, [pc, #64]	@ (8007238 <xTimerGenericCommand+0x98>)
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	f107 0110 	add.w	r1, r7, #16
 80071fc:	2300      	movs	r3, #0
 80071fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007200:	f7fe f930 	bl	8005464 <xQueueGenericSend>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24
 8007206:	e012      	b.n	800722e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007208:	4b0b      	ldr	r3, [pc, #44]	@ (8007238 <xTimerGenericCommand+0x98>)
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	f107 0110 	add.w	r1, r7, #16
 8007210:	2300      	movs	r3, #0
 8007212:	2200      	movs	r2, #0
 8007214:	f7fe f926 	bl	8005464 <xQueueGenericSend>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24
 800721a:	e008      	b.n	800722e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800721c:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <xTimerGenericCommand+0x98>)
 800721e:	6818      	ldr	r0, [r3, #0]
 8007220:	f107 0110 	add.w	r1, r7, #16
 8007224:	2300      	movs	r3, #0
 8007226:	683a      	ldr	r2, [r7, #0]
 8007228:	f7fe fa1e 	bl	8005668 <xQueueGenericSendFromISR>
 800722c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800722e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007230:	4618      	mov	r0, r3
 8007232:	3728      	adds	r7, #40	@ 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000ec0 	.word	0x20000ec0

0800723c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007246:	4b23      	ldr	r3, [pc, #140]	@ (80072d4 <prvProcessExpiredTimer+0x98>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7fd ff49 	bl	80050ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d023      	beq.n	80072b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	18d1      	adds	r1, r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	6978      	ldr	r0, [r7, #20]
 8007276:	f000 f8d5 	bl	8007424 <prvInsertTimerInActiveList>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d020      	beq.n	80072c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	2300      	movs	r3, #0
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	2100      	movs	r1, #0
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff ff88 	bl	80071a0 <xTimerGenericCommand>
 8007290:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d114      	bne.n	80072c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	60fb      	str	r3, [r7, #12]
}
 80072aa:	bf00      	nop
 80072ac:	bf00      	nop
 80072ae:	e7fd      	b.n	80072ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072b6:	f023 0301 	bic.w	r3, r3, #1
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	6978      	ldr	r0, [r7, #20]
 80072c8:	4798      	blx	r3
}
 80072ca:	bf00      	nop
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000eb8 	.word	0x20000eb8

080072d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072e0:	f107 0308 	add.w	r3, r7, #8
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 f859 	bl	800739c <prvGetNextExpireTime>
 80072ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	4619      	mov	r1, r3
 80072f0:	68f8      	ldr	r0, [r7, #12]
 80072f2:	f000 f805 	bl	8007300 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072f6:	f000 f8d7 	bl	80074a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072fa:	bf00      	nop
 80072fc:	e7f0      	b.n	80072e0 <prvTimerTask+0x8>
	...

08007300 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800730a:	f7ff f929 	bl	8006560 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800730e:	f107 0308 	add.w	r3, r7, #8
 8007312:	4618      	mov	r0, r3
 8007314:	f000 f866 	bl	80073e4 <prvSampleTimeNow>
 8007318:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d130      	bne.n	8007382 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <prvProcessTimerOrBlockTask+0x3c>
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	429a      	cmp	r2, r3
 800732c:	d806      	bhi.n	800733c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800732e:	f7ff f925 	bl	800657c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007332:	68f9      	ldr	r1, [r7, #12]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff ff81 	bl	800723c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800733a:	e024      	b.n	8007386 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d008      	beq.n	8007354 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007342:	4b13      	ldr	r3, [pc, #76]	@ (8007390 <prvProcessTimerOrBlockTask+0x90>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <prvProcessTimerOrBlockTask+0x50>
 800734c:	2301      	movs	r3, #1
 800734e:	e000      	b.n	8007352 <prvProcessTimerOrBlockTask+0x52>
 8007350:	2300      	movs	r3, #0
 8007352:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007354:	4b0f      	ldr	r3, [pc, #60]	@ (8007394 <prvProcessTimerOrBlockTask+0x94>)
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4619      	mov	r1, r3
 8007362:	f7fe fde5 	bl	8005f30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007366:	f7ff f909 	bl	800657c <xTaskResumeAll>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007370:	4b09      	ldr	r3, [pc, #36]	@ (8007398 <prvProcessTimerOrBlockTask+0x98>)
 8007372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	f3bf 8f4f 	dsb	sy
 800737c:	f3bf 8f6f 	isb	sy
}
 8007380:	e001      	b.n	8007386 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007382:	f7ff f8fb 	bl	800657c <xTaskResumeAll>
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000ebc 	.word	0x20000ebc
 8007394:	20000ec0 	.word	0x20000ec0
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <prvGetNextExpireTime+0x44>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <prvGetNextExpireTime+0x16>
 80073ae:	2201      	movs	r2, #1
 80073b0:	e000      	b.n	80073b4 <prvGetNextExpireTime+0x18>
 80073b2:	2200      	movs	r2, #0
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80073c0:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <prvGetNextExpireTime+0x44>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	60fb      	str	r3, [r7, #12]
 80073ca:	e001      	b.n	80073d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop
 80073e0:	20000eb8 	.word	0x20000eb8

080073e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073ec:	f7ff f964 	bl	80066b8 <xTaskGetTickCount>
 80073f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007420 <prvSampleTimeNow+0x3c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d205      	bcs.n	8007408 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073fc:	f000 f93a 	bl	8007674 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2201      	movs	r2, #1
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	e002      	b.n	800740e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800740e:	4a04      	ldr	r2, [pc, #16]	@ (8007420 <prvSampleTimeNow+0x3c>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007414:	68fb      	ldr	r3, [r7, #12]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20000ec8 	.word	0x20000ec8

08007424 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	429a      	cmp	r2, r3
 8007448:	d812      	bhi.n	8007470 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	429a      	cmp	r2, r3
 8007456:	d302      	bcc.n	800745e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e01b      	b.n	8007496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800745e:	4b10      	ldr	r3, [pc, #64]	@ (80074a0 <prvInsertTimerInActiveList+0x7c>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3304      	adds	r3, #4
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fd fe06 	bl	800507a <vListInsert>
 800746e:	e012      	b.n	8007496 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d206      	bcs.n	8007486 <prvInsertTimerInActiveList+0x62>
 8007478:	68ba      	ldr	r2, [r7, #8]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d302      	bcc.n	8007486 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e007      	b.n	8007496 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007486:	4b07      	ldr	r3, [pc, #28]	@ (80074a4 <prvInsertTimerInActiveList+0x80>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3304      	adds	r3, #4
 800748e:	4619      	mov	r1, r3
 8007490:	4610      	mov	r0, r2
 8007492:	f7fd fdf2 	bl	800507a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007496:	697b      	ldr	r3, [r7, #20]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3718      	adds	r7, #24
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20000ebc 	.word	0x20000ebc
 80074a4:	20000eb8 	.word	0x20000eb8

080074a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08e      	sub	sp, #56	@ 0x38
 80074ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ae:	e0ce      	b.n	800764e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	da19      	bge.n	80074ea <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80074b6:	1d3b      	adds	r3, r7, #4
 80074b8:	3304      	adds	r3, #4
 80074ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80074bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10b      	bne.n	80074da <prvProcessReceivedCommands+0x32>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	61fb      	str	r3, [r7, #28]
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	e7fd      	b.n	80074d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074e0:	6850      	ldr	r0, [r2, #4]
 80074e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074e4:	6892      	ldr	r2, [r2, #8]
 80074e6:	4611      	mov	r1, r2
 80074e8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f2c0 80ae 	blt.w	800764e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d004      	beq.n	8007508 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007500:	3304      	adds	r3, #4
 8007502:	4618      	mov	r0, r3
 8007504:	f7fd fdf2 	bl	80050ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007508:	463b      	mov	r3, r7
 800750a:	4618      	mov	r0, r3
 800750c:	f7ff ff6a 	bl	80073e4 <prvSampleTimeNow>
 8007510:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b09      	cmp	r3, #9
 8007516:	f200 8097 	bhi.w	8007648 <prvProcessReceivedCommands+0x1a0>
 800751a:	a201      	add	r2, pc, #4	@ (adr r2, 8007520 <prvProcessReceivedCommands+0x78>)
 800751c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007520:	08007549 	.word	0x08007549
 8007524:	08007549 	.word	0x08007549
 8007528:	08007549 	.word	0x08007549
 800752c:	080075bf 	.word	0x080075bf
 8007530:	080075d3 	.word	0x080075d3
 8007534:	0800761f 	.word	0x0800761f
 8007538:	08007549 	.word	0x08007549
 800753c:	08007549 	.word	0x08007549
 8007540:	080075bf 	.word	0x080075bf
 8007544:	080075d3 	.word	0x080075d3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800754e:	f043 0301 	orr.w	r3, r3, #1
 8007552:	b2da      	uxtb	r2, r3
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	699b      	ldr	r3, [r3, #24]
 8007560:	18d1      	adds	r1, r2, r3
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007568:	f7ff ff5c 	bl	8007424 <prvInsertTimerInActiveList>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d06c      	beq.n	800764c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007578:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	d061      	beq.n	800764c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007588:	68ba      	ldr	r2, [r7, #8]
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	441a      	add	r2, r3
 8007590:	2300      	movs	r3, #0
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	2300      	movs	r3, #0
 8007596:	2100      	movs	r1, #0
 8007598:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800759a:	f7ff fe01 	bl	80071a0 <xTimerGenericCommand>
 800759e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d152      	bne.n	800764c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80075a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075aa:	f383 8811 	msr	BASEPRI, r3
 80075ae:	f3bf 8f6f 	isb	sy
 80075b2:	f3bf 8f4f 	dsb	sy
 80075b6:	61bb      	str	r3, [r7, #24]
}
 80075b8:	bf00      	nop
 80075ba:	bf00      	nop
 80075bc:	e7fd      	b.n	80075ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075c4:	f023 0301 	bic.w	r3, r3, #1
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075d0:	e03d      	b.n	800764e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075d8:	f043 0301 	orr.w	r3, r3, #1
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10b      	bne.n	800760a <prvProcessReceivedCommands+0x162>
	__asm volatile
 80075f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f6:	f383 8811 	msr	BASEPRI, r3
 80075fa:	f3bf 8f6f 	isb	sy
 80075fe:	f3bf 8f4f 	dsb	sy
 8007602:	617b      	str	r3, [r7, #20]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800760a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	18d1      	adds	r1, r2, r3
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007618:	f7ff ff04 	bl	8007424 <prvInsertTimerInActiveList>
					break;
 800761c:	e017      	b.n	800764e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800761e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007620:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800762c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800762e:	f000 fbeb 	bl	8007e08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007632:	e00c      	b.n	800764e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800763a:	f023 0301 	bic.w	r3, r3, #1
 800763e:	b2da      	uxtb	r2, r3
 8007640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007642:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007646:	e002      	b.n	800764e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007648:	bf00      	nop
 800764a:	e000      	b.n	800764e <prvProcessReceivedCommands+0x1a6>
					break;
 800764c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800764e:	4b08      	ldr	r3, [pc, #32]	@ (8007670 <prvProcessReceivedCommands+0x1c8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	1d39      	adds	r1, r7, #4
 8007654:	2200      	movs	r2, #0
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe f8a4 	bl	80057a4 <xQueueReceive>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	f47f af26 	bne.w	80074b0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007664:	bf00      	nop
 8007666:	bf00      	nop
 8007668:	3730      	adds	r7, #48	@ 0x30
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000ec0 	.word	0x20000ec0

08007674 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b088      	sub	sp, #32
 8007678:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800767a:	e049      	b.n	8007710 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800767c:	4b2e      	ldr	r3, [pc, #184]	@ (8007738 <prvSwitchTimerLists+0xc4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007686:	4b2c      	ldr	r3, [pc, #176]	@ (8007738 <prvSwitchTimerLists+0xc4>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3304      	adds	r3, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd fd29 	bl	80050ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d02f      	beq.n	8007710 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4413      	add	r3, r2
 80076b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d90e      	bls.n	80076e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076ce:	4b1a      	ldr	r3, [pc, #104]	@ (8007738 <prvSwitchTimerLists+0xc4>)
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7fd fcce 	bl	800507a <vListInsert>
 80076de:	e017      	b.n	8007710 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076e0:	2300      	movs	r3, #0
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	2300      	movs	r3, #0
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	2100      	movs	r1, #0
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff fd58 	bl	80071a0 <xTimerGenericCommand>
 80076f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10b      	bne.n	8007710 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80076f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076fc:	f383 8811 	msr	BASEPRI, r3
 8007700:	f3bf 8f6f 	isb	sy
 8007704:	f3bf 8f4f 	dsb	sy
 8007708:	603b      	str	r3, [r7, #0]
}
 800770a:	bf00      	nop
 800770c:	bf00      	nop
 800770e:	e7fd      	b.n	800770c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007710:	4b09      	ldr	r3, [pc, #36]	@ (8007738 <prvSwitchTimerLists+0xc4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1b0      	bne.n	800767c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800771a:	4b07      	ldr	r3, [pc, #28]	@ (8007738 <prvSwitchTimerLists+0xc4>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007720:	4b06      	ldr	r3, [pc, #24]	@ (800773c <prvSwitchTimerLists+0xc8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a04      	ldr	r2, [pc, #16]	@ (8007738 <prvSwitchTimerLists+0xc4>)
 8007726:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007728:	4a04      	ldr	r2, [pc, #16]	@ (800773c <prvSwitchTimerLists+0xc8>)
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	6013      	str	r3, [r2, #0]
}
 800772e:	bf00      	nop
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000eb8 	.word	0x20000eb8
 800773c:	20000ebc 	.word	0x20000ebc

08007740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007746:	f000 f96f 	bl	8007a28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800774a:	4b15      	ldr	r3, [pc, #84]	@ (80077a0 <prvCheckForValidListAndQueue+0x60>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d120      	bne.n	8007794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007752:	4814      	ldr	r0, [pc, #80]	@ (80077a4 <prvCheckForValidListAndQueue+0x64>)
 8007754:	f7fd fc40 	bl	8004fd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007758:	4813      	ldr	r0, [pc, #76]	@ (80077a8 <prvCheckForValidListAndQueue+0x68>)
 800775a:	f7fd fc3d 	bl	8004fd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800775e:	4b13      	ldr	r3, [pc, #76]	@ (80077ac <prvCheckForValidListAndQueue+0x6c>)
 8007760:	4a10      	ldr	r2, [pc, #64]	@ (80077a4 <prvCheckForValidListAndQueue+0x64>)
 8007762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007764:	4b12      	ldr	r3, [pc, #72]	@ (80077b0 <prvCheckForValidListAndQueue+0x70>)
 8007766:	4a10      	ldr	r2, [pc, #64]	@ (80077a8 <prvCheckForValidListAndQueue+0x68>)
 8007768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800776a:	2300      	movs	r3, #0
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	4b11      	ldr	r3, [pc, #68]	@ (80077b4 <prvCheckForValidListAndQueue+0x74>)
 8007770:	4a11      	ldr	r2, [pc, #68]	@ (80077b8 <prvCheckForValidListAndQueue+0x78>)
 8007772:	2110      	movs	r1, #16
 8007774:	200a      	movs	r0, #10
 8007776:	f7fd fd4d 	bl	8005214 <xQueueGenericCreateStatic>
 800777a:	4603      	mov	r3, r0
 800777c:	4a08      	ldr	r2, [pc, #32]	@ (80077a0 <prvCheckForValidListAndQueue+0x60>)
 800777e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007780:	4b07      	ldr	r3, [pc, #28]	@ (80077a0 <prvCheckForValidListAndQueue+0x60>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007788:	4b05      	ldr	r3, [pc, #20]	@ (80077a0 <prvCheckForValidListAndQueue+0x60>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	490b      	ldr	r1, [pc, #44]	@ (80077bc <prvCheckForValidListAndQueue+0x7c>)
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fba4 	bl	8005edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007794:	f000 f97a 	bl	8007a8c <vPortExitCritical>
}
 8007798:	bf00      	nop
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000ec0 	.word	0x20000ec0
 80077a4:	20000e90 	.word	0x20000e90
 80077a8:	20000ea4 	.word	0x20000ea4
 80077ac:	20000eb8 	.word	0x20000eb8
 80077b0:	20000ebc 	.word	0x20000ebc
 80077b4:	20000f6c 	.word	0x20000f6c
 80077b8:	20000ecc 	.word	0x20000ecc
 80077bc:	0800830c 	.word	0x0800830c

080077c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80077c0:	b480      	push	{r7}
 80077c2:	b085      	sub	sp, #20
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	60f8      	str	r0, [r7, #12]
 80077c8:	60b9      	str	r1, [r7, #8]
 80077ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	3b04      	subs	r3, #4
 80077d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3b04      	subs	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	f023 0201 	bic.w	r2, r3, #1
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	3b04      	subs	r3, #4
 80077ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077f0:	4a0c      	ldr	r2, [pc, #48]	@ (8007824 <pxPortInitialiseStack+0x64>)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3b14      	subs	r3, #20
 80077fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	3b04      	subs	r3, #4
 8007806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f06f 0202 	mvn.w	r2, #2
 800780e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3b20      	subs	r3, #32
 8007814:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	08007829 	.word	0x08007829

08007828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007832:	4b13      	ldr	r3, [pc, #76]	@ (8007880 <prvTaskExitError+0x58>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800783a:	d00b      	beq.n	8007854 <prvTaskExitError+0x2c>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	60fb      	str	r3, [r7, #12]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <prvTaskExitError+0x28>
	__asm volatile
 8007854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007858:	f383 8811 	msr	BASEPRI, r3
 800785c:	f3bf 8f6f 	isb	sy
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	60bb      	str	r3, [r7, #8]
}
 8007866:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007868:	bf00      	nop
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0fc      	beq.n	800786a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	20000014 	.word	0x20000014
	...

08007890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007890:	4b07      	ldr	r3, [pc, #28]	@ (80078b0 <pxCurrentTCBConst2>)
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	6808      	ldr	r0, [r1, #0]
 8007896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789a:	f380 8809 	msr	PSP, r0
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f380 8811 	msr	BASEPRI, r0
 80078aa:	4770      	bx	lr
 80078ac:	f3af 8000 	nop.w

080078b0 <pxCurrentTCBConst2>:
 80078b0:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80078b8:	4808      	ldr	r0, [pc, #32]	@ (80078dc <prvPortStartFirstTask+0x24>)
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	f380 8808 	msr	MSP, r0
 80078c2:	f04f 0000 	mov.w	r0, #0
 80078c6:	f380 8814 	msr	CONTROL, r0
 80078ca:	b662      	cpsie	i
 80078cc:	b661      	cpsie	f
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	df00      	svc	0
 80078d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078da:	bf00      	nop
 80078dc:	e000ed08 	.word	0xe000ed08

080078e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078e6:	4b47      	ldr	r3, [pc, #284]	@ (8007a04 <xPortStartScheduler+0x124>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a47      	ldr	r2, [pc, #284]	@ (8007a08 <xPortStartScheduler+0x128>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d10b      	bne.n	8007908 <xPortStartScheduler+0x28>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	613b      	str	r3, [r7, #16]
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	e7fd      	b.n	8007904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007908:	4b3e      	ldr	r3, [pc, #248]	@ (8007a04 <xPortStartScheduler+0x124>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a3f      	ldr	r2, [pc, #252]	@ (8007a0c <xPortStartScheduler+0x12c>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d10b      	bne.n	800792a <xPortStartScheduler+0x4a>
	__asm volatile
 8007912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007916:	f383 8811 	msr	BASEPRI, r3
 800791a:	f3bf 8f6f 	isb	sy
 800791e:	f3bf 8f4f 	dsb	sy
 8007922:	60fb      	str	r3, [r7, #12]
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop
 8007928:	e7fd      	b.n	8007926 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800792a:	4b39      	ldr	r3, [pc, #228]	@ (8007a10 <xPortStartScheduler+0x130>)
 800792c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	22ff      	movs	r2, #255	@ 0xff
 800793a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4b31      	ldr	r3, [pc, #196]	@ (8007a14 <xPortStartScheduler+0x134>)
 8007950:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007952:	4b31      	ldr	r3, [pc, #196]	@ (8007a18 <xPortStartScheduler+0x138>)
 8007954:	2207      	movs	r2, #7
 8007956:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007958:	e009      	b.n	800796e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800795a:	4b2f      	ldr	r3, [pc, #188]	@ (8007a18 <xPortStartScheduler+0x138>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3b01      	subs	r3, #1
 8007960:	4a2d      	ldr	r2, [pc, #180]	@ (8007a18 <xPortStartScheduler+0x138>)
 8007962:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	005b      	lsls	r3, r3, #1
 800796a:	b2db      	uxtb	r3, r3
 800796c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800796e:	78fb      	ldrb	r3, [r7, #3]
 8007970:	b2db      	uxtb	r3, r3
 8007972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007976:	2b80      	cmp	r3, #128	@ 0x80
 8007978:	d0ef      	beq.n	800795a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800797a:	4b27      	ldr	r3, [pc, #156]	@ (8007a18 <xPortStartScheduler+0x138>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f1c3 0307 	rsb	r3, r3, #7
 8007982:	2b04      	cmp	r3, #4
 8007984:	d00b      	beq.n	800799e <xPortStartScheduler+0xbe>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800799e:	4b1e      	ldr	r3, [pc, #120]	@ (8007a18 <xPortStartScheduler+0x138>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007a18 <xPortStartScheduler+0x138>)
 80079a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80079a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007a18 <xPortStartScheduler+0x138>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079b0:	4a19      	ldr	r2, [pc, #100]	@ (8007a18 <xPortStartScheduler+0x138>)
 80079b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	b2da      	uxtb	r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80079bc:	4b17      	ldr	r3, [pc, #92]	@ (8007a1c <xPortStartScheduler+0x13c>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a16      	ldr	r2, [pc, #88]	@ (8007a1c <xPortStartScheduler+0x13c>)
 80079c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80079c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80079c8:	4b14      	ldr	r3, [pc, #80]	@ (8007a1c <xPortStartScheduler+0x13c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a13      	ldr	r2, [pc, #76]	@ (8007a1c <xPortStartScheduler+0x13c>)
 80079ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80079d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079d4:	f000 f8da 	bl	8007b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079d8:	4b11      	ldr	r3, [pc, #68]	@ (8007a20 <xPortStartScheduler+0x140>)
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079de:	f000 f8f9 	bl	8007bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079e2:	4b10      	ldr	r3, [pc, #64]	@ (8007a24 <xPortStartScheduler+0x144>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007a24 <xPortStartScheduler+0x144>)
 80079e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80079ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079ee:	f7ff ff63 	bl	80078b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079f2:	f7fe ff2b 	bl	800684c <vTaskSwitchContext>
	prvTaskExitError();
 80079f6:	f7ff ff17 	bl	8007828 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}
 8007a04:	e000ed00 	.word	0xe000ed00
 8007a08:	410fc271 	.word	0x410fc271
 8007a0c:	410fc270 	.word	0x410fc270
 8007a10:	e000e400 	.word	0xe000e400
 8007a14:	20000fbc 	.word	0x20000fbc
 8007a18:	20000fc0 	.word	0x20000fc0
 8007a1c:	e000ed20 	.word	0xe000ed20
 8007a20:	20000014 	.word	0x20000014
 8007a24:	e000ef34 	.word	0xe000ef34

08007a28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
}
 8007a40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a42:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <vPortEnterCritical+0x5c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	4a0e      	ldr	r2, [pc, #56]	@ (8007a84 <vPortEnterCritical+0x5c>)
 8007a4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a84 <vPortEnterCritical+0x5c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d110      	bne.n	8007a76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a54:	4b0c      	ldr	r3, [pc, #48]	@ (8007a88 <vPortEnterCritical+0x60>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00b      	beq.n	8007a76 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	603b      	str	r3, [r7, #0]
}
 8007a70:	bf00      	nop
 8007a72:	bf00      	nop
 8007a74:	e7fd      	b.n	8007a72 <vPortEnterCritical+0x4a>
	}
}
 8007a76:	bf00      	nop
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr
 8007a82:	bf00      	nop
 8007a84:	20000014 	.word	0x20000014
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a92:	4b12      	ldr	r3, [pc, #72]	@ (8007adc <vPortExitCritical+0x50>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d10b      	bne.n	8007ab2 <vPortExitCritical+0x26>
	__asm volatile
 8007a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a9e:	f383 8811 	msr	BASEPRI, r3
 8007aa2:	f3bf 8f6f 	isb	sy
 8007aa6:	f3bf 8f4f 	dsb	sy
 8007aaa:	607b      	str	r3, [r7, #4]
}
 8007aac:	bf00      	nop
 8007aae:	bf00      	nop
 8007ab0:	e7fd      	b.n	8007aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8007adc <vPortExitCritical+0x50>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3b01      	subs	r3, #1
 8007ab8:	4a08      	ldr	r2, [pc, #32]	@ (8007adc <vPortExitCritical+0x50>)
 8007aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007abc:	4b07      	ldr	r3, [pc, #28]	@ (8007adc <vPortExitCritical+0x50>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <vPortExitCritical+0x44>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	f383 8811 	msr	BASEPRI, r3
}
 8007ace:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ad0:	bf00      	nop
 8007ad2:	370c      	adds	r7, #12
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	20000014 	.word	0x20000014

08007ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ae0:	f3ef 8009 	mrs	r0, PSP
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	4b15      	ldr	r3, [pc, #84]	@ (8007b40 <pxCurrentTCBConst>)
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	f01e 0f10 	tst.w	lr, #16
 8007af0:	bf08      	it	eq
 8007af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afa:	6010      	str	r0, [r2, #0]
 8007afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007b00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007b04:	f380 8811 	msr	BASEPRI, r0
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f7fe fe9c 	bl	800684c <vTaskSwitchContext>
 8007b14:	f04f 0000 	mov.w	r0, #0
 8007b18:	f380 8811 	msr	BASEPRI, r0
 8007b1c:	bc09      	pop	{r0, r3}
 8007b1e:	6819      	ldr	r1, [r3, #0]
 8007b20:	6808      	ldr	r0, [r1, #0]
 8007b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b26:	f01e 0f10 	tst.w	lr, #16
 8007b2a:	bf08      	it	eq
 8007b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b30:	f380 8809 	msr	PSP, r0
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	f3af 8000 	nop.w

08007b40 <pxCurrentTCBConst>:
 8007b40:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop

08007b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	607b      	str	r3, [r7, #4]
}
 8007b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b62:	f7fe fdb9 	bl	80066d8 <xTaskIncrementTick>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b6c:	4b06      	ldr	r3, [pc, #24]	@ (8007b88 <xPortSysTickHandler+0x40>)
 8007b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	2300      	movs	r3, #0
 8007b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f383 8811 	msr	BASEPRI, r3
}
 8007b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	e000ed04 	.word	0xe000ed04

08007b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b90:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b96:	4b0b      	ldr	r3, [pc, #44]	@ (8007bc4 <vPortSetupTimerInterrupt+0x38>)
 8007b98:	2200      	movs	r2, #0
 8007b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc8 <vPortSetupTimerInterrupt+0x3c>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8007bcc <vPortSetupTimerInterrupt+0x40>)
 8007ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba6:	099b      	lsrs	r3, r3, #6
 8007ba8:	4a09      	ldr	r2, [pc, #36]	@ (8007bd0 <vPortSetupTimerInterrupt+0x44>)
 8007baa:	3b01      	subs	r3, #1
 8007bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007bae:	4b04      	ldr	r3, [pc, #16]	@ (8007bc0 <vPortSetupTimerInterrupt+0x34>)
 8007bb0:	2207      	movs	r2, #7
 8007bb2:	601a      	str	r2, [r3, #0]
}
 8007bb4:	bf00      	nop
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	e000e010 	.word	0xe000e010
 8007bc4:	e000e018 	.word	0xe000e018
 8007bc8:	20000008 	.word	0x20000008
 8007bcc:	10624dd3 	.word	0x10624dd3
 8007bd0:	e000e014 	.word	0xe000e014

08007bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007be4 <vPortEnableVFP+0x10>
 8007bd8:	6801      	ldr	r1, [r0, #0]
 8007bda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007bde:	6001      	str	r1, [r0, #0]
 8007be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007be2:	bf00      	nop
 8007be4:	e000ed88 	.word	0xe000ed88

08007be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bee:	f3ef 8305 	mrs	r3, IPSR
 8007bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2b0f      	cmp	r3, #15
 8007bf8:	d915      	bls.n	8007c26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bfa:	4a18      	ldr	r2, [pc, #96]	@ (8007c5c <vPortValidateInterruptPriority+0x74>)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	4413      	add	r3, r2
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007c04:	4b16      	ldr	r3, [pc, #88]	@ (8007c60 <vPortValidateInterruptPriority+0x78>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	7afa      	ldrb	r2, [r7, #11]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d20b      	bcs.n	8007c26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	607b      	str	r3, [r7, #4]
}
 8007c20:	bf00      	nop
 8007c22:	bf00      	nop
 8007c24:	e7fd      	b.n	8007c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007c26:	4b0f      	ldr	r3, [pc, #60]	@ (8007c64 <vPortValidateInterruptPriority+0x7c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007c68 <vPortValidateInterruptPriority+0x80>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d90b      	bls.n	8007c4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3a:	f383 8811 	msr	BASEPRI, r3
 8007c3e:	f3bf 8f6f 	isb	sy
 8007c42:	f3bf 8f4f 	dsb	sy
 8007c46:	603b      	str	r3, [r7, #0]
}
 8007c48:	bf00      	nop
 8007c4a:	bf00      	nop
 8007c4c:	e7fd      	b.n	8007c4a <vPortValidateInterruptPriority+0x62>
	}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	e000e3f0 	.word	0xe000e3f0
 8007c60:	20000fbc 	.word	0x20000fbc
 8007c64:	e000ed0c 	.word	0xe000ed0c
 8007c68:	20000fc0 	.word	0x20000fc0

08007c6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08a      	sub	sp, #40	@ 0x28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c74:	2300      	movs	r3, #0
 8007c76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c78:	f7fe fc72 	bl	8006560 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007df0 <pvPortMalloc+0x184>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c84:	f000 f924 	bl	8007ed0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c88:	4b5a      	ldr	r3, [pc, #360]	@ (8007df4 <pvPortMalloc+0x188>)
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f040 8095 	bne.w	8007dc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d01e      	beq.n	8007cda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c9c:	2208      	movs	r2, #8
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f003 0307 	and.w	r3, r3, #7
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d015      	beq.n	8007cda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f023 0307 	bic.w	r3, r3, #7
 8007cb4:	3308      	adds	r3, #8
 8007cb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00b      	beq.n	8007cda <pvPortMalloc+0x6e>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	617b      	str	r3, [r7, #20]
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop
 8007cd8:	e7fd      	b.n	8007cd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d06f      	beq.n	8007dc0 <pvPortMalloc+0x154>
 8007ce0:	4b45      	ldr	r3, [pc, #276]	@ (8007df8 <pvPortMalloc+0x18c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	429a      	cmp	r2, r3
 8007ce8:	d86a      	bhi.n	8007dc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cea:	4b44      	ldr	r3, [pc, #272]	@ (8007dfc <pvPortMalloc+0x190>)
 8007cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cee:	4b43      	ldr	r3, [pc, #268]	@ (8007dfc <pvPortMalloc+0x190>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cf4:	e004      	b.n	8007d00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d903      	bls.n	8007d12 <pvPortMalloc+0xa6>
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d1f1      	bne.n	8007cf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007d12:	4b37      	ldr	r3, [pc, #220]	@ (8007df0 <pvPortMalloc+0x184>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d051      	beq.n	8007dc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2208      	movs	r2, #8
 8007d22:	4413      	add	r3, r2
 8007d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	1ad2      	subs	r2, r2, r3
 8007d36:	2308      	movs	r3, #8
 8007d38:	005b      	lsls	r3, r3, #1
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d920      	bls.n	8007d80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4413      	add	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	f003 0307 	and.w	r3, r3, #7
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00b      	beq.n	8007d68 <pvPortMalloc+0xfc>
	__asm volatile
 8007d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	613b      	str	r3, [r7, #16]
}
 8007d62:	bf00      	nop
 8007d64:	bf00      	nop
 8007d66:	e7fd      	b.n	8007d64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	1ad2      	subs	r2, r2, r3
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d7a:	69b8      	ldr	r0, [r7, #24]
 8007d7c:	f000 f90a 	bl	8007f94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d80:	4b1d      	ldr	r3, [pc, #116]	@ (8007df8 <pvPortMalloc+0x18c>)
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007df8 <pvPortMalloc+0x18c>)
 8007d8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007df8 <pvPortMalloc+0x18c>)
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	4b1b      	ldr	r3, [pc, #108]	@ (8007e00 <pvPortMalloc+0x194>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d203      	bcs.n	8007da2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d9a:	4b17      	ldr	r3, [pc, #92]	@ (8007df8 <pvPortMalloc+0x18c>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a18      	ldr	r2, [pc, #96]	@ (8007e00 <pvPortMalloc+0x194>)
 8007da0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	685a      	ldr	r2, [r3, #4]
 8007da6:	4b13      	ldr	r3, [pc, #76]	@ (8007df4 <pvPortMalloc+0x188>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	431a      	orrs	r2, r3
 8007dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007db6:	4b13      	ldr	r3, [pc, #76]	@ (8007e04 <pvPortMalloc+0x198>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	4a11      	ldr	r2, [pc, #68]	@ (8007e04 <pvPortMalloc+0x198>)
 8007dbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007dc0:	f7fe fbdc 	bl	800657c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	f003 0307 	and.w	r3, r3, #7
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <pvPortMalloc+0x17a>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	60fb      	str	r3, [r7, #12]
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	e7fd      	b.n	8007de2 <pvPortMalloc+0x176>
	return pvReturn;
 8007de6:	69fb      	ldr	r3, [r7, #28]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3728      	adds	r7, #40	@ 0x28
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20002f0c 	.word	0x20002f0c
 8007df4:	20002f20 	.word	0x20002f20
 8007df8:	20002f10 	.word	0x20002f10
 8007dfc:	20002f04 	.word	0x20002f04
 8007e00:	20002f14 	.word	0x20002f14
 8007e04:	20002f18 	.word	0x20002f18

08007e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d04f      	beq.n	8007eba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	425b      	negs	r3, r3
 8007e1e:	697a      	ldr	r2, [r7, #20]
 8007e20:	4413      	add	r3, r2
 8007e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	4b25      	ldr	r3, [pc, #148]	@ (8007ec4 <vPortFree+0xbc>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4013      	ands	r3, r2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <vPortFree+0x46>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60fb      	str	r3, [r7, #12]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <vPortFree+0x66>
	__asm volatile
 8007e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5a:	f383 8811 	msr	BASEPRI, r3
 8007e5e:	f3bf 8f6f 	isb	sy
 8007e62:	f3bf 8f4f 	dsb	sy
 8007e66:	60bb      	str	r3, [r7, #8]
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	e7fd      	b.n	8007e6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	4b14      	ldr	r3, [pc, #80]	@ (8007ec4 <vPortFree+0xbc>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4013      	ands	r3, r2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01e      	beq.n	8007eba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d11a      	bne.n	8007eba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	685a      	ldr	r2, [r3, #4]
 8007e88:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec4 <vPortFree+0xbc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	43db      	mvns	r3, r3
 8007e8e:	401a      	ands	r2, r3
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e94:	f7fe fb64 	bl	8006560 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ec8 <vPortFree+0xc0>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	4a09      	ldr	r2, [pc, #36]	@ (8007ec8 <vPortFree+0xc0>)
 8007ea4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ea6:	6938      	ldr	r0, [r7, #16]
 8007ea8:	f000 f874 	bl	8007f94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007eac:	4b07      	ldr	r3, [pc, #28]	@ (8007ecc <vPortFree+0xc4>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	4a06      	ldr	r2, [pc, #24]	@ (8007ecc <vPortFree+0xc4>)
 8007eb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007eb6:	f7fe fb61 	bl	800657c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007eba:	bf00      	nop
 8007ebc:	3718      	adds	r7, #24
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20002f20 	.word	0x20002f20
 8007ec8:	20002f10 	.word	0x20002f10
 8007ecc:	20002f1c 	.word	0x20002f1c

08007ed0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ed6:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8007eda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007edc:	4b27      	ldr	r3, [pc, #156]	@ (8007f7c <prvHeapInit+0xac>)
 8007ede:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d00c      	beq.n	8007f04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3307      	adds	r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f023 0307 	bic.w	r3, r3, #7
 8007ef6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	4a1f      	ldr	r2, [pc, #124]	@ (8007f7c <prvHeapInit+0xac>)
 8007f00:	4413      	add	r3, r2
 8007f02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007f08:	4a1d      	ldr	r2, [pc, #116]	@ (8007f80 <prvHeapInit+0xb0>)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007f80 <prvHeapInit+0xb0>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	68ba      	ldr	r2, [r7, #8]
 8007f18:	4413      	add	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	1a9b      	subs	r3, r3, r2
 8007f22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0307 	bic.w	r3, r3, #7
 8007f2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	@ (8007f84 <prvHeapInit+0xb4>)
 8007f30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f32:	4b14      	ldr	r3, [pc, #80]	@ (8007f84 <prvHeapInit+0xb4>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	2200      	movs	r2, #0
 8007f38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f3a:	4b12      	ldr	r3, [pc, #72]	@ (8007f84 <prvHeapInit+0xb4>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	1ad2      	subs	r2, r2, r3
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f50:	4b0c      	ldr	r3, [pc, #48]	@ (8007f84 <prvHeapInit+0xb4>)
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f88 <prvHeapInit+0xb8>)
 8007f5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	4a09      	ldr	r2, [pc, #36]	@ (8007f8c <prvHeapInit+0xbc>)
 8007f66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f68:	4b09      	ldr	r3, [pc, #36]	@ (8007f90 <prvHeapInit+0xc0>)
 8007f6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f6e:	601a      	str	r2, [r3, #0]
}
 8007f70:	bf00      	nop
 8007f72:	3714      	adds	r7, #20
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20000fc4 	.word	0x20000fc4
 8007f80:	20002f04 	.word	0x20002f04
 8007f84:	20002f0c 	.word	0x20002f0c
 8007f88:	20002f14 	.word	0x20002f14
 8007f8c:	20002f10 	.word	0x20002f10
 8007f90:	20002f20 	.word	0x20002f20

08007f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f9c:	4b28      	ldr	r3, [pc, #160]	@ (8008040 <prvInsertBlockIntoFreeList+0xac>)
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	e002      	b.n	8007fa8 <prvInsertBlockIntoFreeList+0x14>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	60fb      	str	r3, [r7, #12]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d8f7      	bhi.n	8007fa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	429a      	cmp	r2, r3
 8007fc2:	d108      	bne.n	8007fd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	441a      	add	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	441a      	add	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d118      	bne.n	800801c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4b15      	ldr	r3, [pc, #84]	@ (8008044 <prvInsertBlockIntoFreeList+0xb0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d00d      	beq.n	8008012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	441a      	add	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e008      	b.n	8008024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008012:	4b0c      	ldr	r3, [pc, #48]	@ (8008044 <prvInsertBlockIntoFreeList+0xb0>)
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	e003      	b.n	8008024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	429a      	cmp	r2, r3
 800802a:	d002      	beq.n	8008032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008032:	bf00      	nop
 8008034:	3714      	adds	r7, #20
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	20002f04 	.word	0x20002f04
 8008044:	20002f0c 	.word	0x20002f0c

08008048 <memset>:
 8008048:	4402      	add	r2, r0
 800804a:	4603      	mov	r3, r0
 800804c:	4293      	cmp	r3, r2
 800804e:	d100      	bne.n	8008052 <memset+0xa>
 8008050:	4770      	bx	lr
 8008052:	f803 1b01 	strb.w	r1, [r3], #1
 8008056:	e7f9      	b.n	800804c <memset+0x4>

08008058 <_reclaim_reent>:
 8008058:	4b29      	ldr	r3, [pc, #164]	@ (8008100 <_reclaim_reent+0xa8>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4283      	cmp	r3, r0
 800805e:	b570      	push	{r4, r5, r6, lr}
 8008060:	4604      	mov	r4, r0
 8008062:	d04b      	beq.n	80080fc <_reclaim_reent+0xa4>
 8008064:	69c3      	ldr	r3, [r0, #28]
 8008066:	b1ab      	cbz	r3, 8008094 <_reclaim_reent+0x3c>
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	b16b      	cbz	r3, 8008088 <_reclaim_reent+0x30>
 800806c:	2500      	movs	r5, #0
 800806e:	69e3      	ldr	r3, [r4, #28]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	5959      	ldr	r1, [r3, r5]
 8008074:	2900      	cmp	r1, #0
 8008076:	d13b      	bne.n	80080f0 <_reclaim_reent+0x98>
 8008078:	3504      	adds	r5, #4
 800807a:	2d80      	cmp	r5, #128	@ 0x80
 800807c:	d1f7      	bne.n	800806e <_reclaim_reent+0x16>
 800807e:	69e3      	ldr	r3, [r4, #28]
 8008080:	4620      	mov	r0, r4
 8008082:	68d9      	ldr	r1, [r3, #12]
 8008084:	f000 f872 	bl	800816c <_free_r>
 8008088:	69e3      	ldr	r3, [r4, #28]
 800808a:	6819      	ldr	r1, [r3, #0]
 800808c:	b111      	cbz	r1, 8008094 <_reclaim_reent+0x3c>
 800808e:	4620      	mov	r0, r4
 8008090:	f000 f86c 	bl	800816c <_free_r>
 8008094:	6961      	ldr	r1, [r4, #20]
 8008096:	b111      	cbz	r1, 800809e <_reclaim_reent+0x46>
 8008098:	4620      	mov	r0, r4
 800809a:	f000 f867 	bl	800816c <_free_r>
 800809e:	69e1      	ldr	r1, [r4, #28]
 80080a0:	b111      	cbz	r1, 80080a8 <_reclaim_reent+0x50>
 80080a2:	4620      	mov	r0, r4
 80080a4:	f000 f862 	bl	800816c <_free_r>
 80080a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80080aa:	b111      	cbz	r1, 80080b2 <_reclaim_reent+0x5a>
 80080ac:	4620      	mov	r0, r4
 80080ae:	f000 f85d 	bl	800816c <_free_r>
 80080b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080b4:	b111      	cbz	r1, 80080bc <_reclaim_reent+0x64>
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 f858 	bl	800816c <_free_r>
 80080bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80080be:	b111      	cbz	r1, 80080c6 <_reclaim_reent+0x6e>
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 f853 	bl	800816c <_free_r>
 80080c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80080c8:	b111      	cbz	r1, 80080d0 <_reclaim_reent+0x78>
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 f84e 	bl	800816c <_free_r>
 80080d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80080d2:	b111      	cbz	r1, 80080da <_reclaim_reent+0x82>
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 f849 	bl	800816c <_free_r>
 80080da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80080dc:	b111      	cbz	r1, 80080e4 <_reclaim_reent+0x8c>
 80080de:	4620      	mov	r0, r4
 80080e0:	f000 f844 	bl	800816c <_free_r>
 80080e4:	6a23      	ldr	r3, [r4, #32]
 80080e6:	b14b      	cbz	r3, 80080fc <_reclaim_reent+0xa4>
 80080e8:	4620      	mov	r0, r4
 80080ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080ee:	4718      	bx	r3
 80080f0:	680e      	ldr	r6, [r1, #0]
 80080f2:	4620      	mov	r0, r4
 80080f4:	f000 f83a 	bl	800816c <_free_r>
 80080f8:	4631      	mov	r1, r6
 80080fa:	e7bb      	b.n	8008074 <_reclaim_reent+0x1c>
 80080fc:	bd70      	pop	{r4, r5, r6, pc}
 80080fe:	bf00      	nop
 8008100:	20000018 	.word	0x20000018

08008104 <__libc_init_array>:
 8008104:	b570      	push	{r4, r5, r6, lr}
 8008106:	4d0d      	ldr	r5, [pc, #52]	@ (800813c <__libc_init_array+0x38>)
 8008108:	4c0d      	ldr	r4, [pc, #52]	@ (8008140 <__libc_init_array+0x3c>)
 800810a:	1b64      	subs	r4, r4, r5
 800810c:	10a4      	asrs	r4, r4, #2
 800810e:	2600      	movs	r6, #0
 8008110:	42a6      	cmp	r6, r4
 8008112:	d109      	bne.n	8008128 <__libc_init_array+0x24>
 8008114:	4d0b      	ldr	r5, [pc, #44]	@ (8008144 <__libc_init_array+0x40>)
 8008116:	4c0c      	ldr	r4, [pc, #48]	@ (8008148 <__libc_init_array+0x44>)
 8008118:	f000 f87e 	bl	8008218 <_init>
 800811c:	1b64      	subs	r4, r4, r5
 800811e:	10a4      	asrs	r4, r4, #2
 8008120:	2600      	movs	r6, #0
 8008122:	42a6      	cmp	r6, r4
 8008124:	d105      	bne.n	8008132 <__libc_init_array+0x2e>
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	f855 3b04 	ldr.w	r3, [r5], #4
 800812c:	4798      	blx	r3
 800812e:	3601      	adds	r6, #1
 8008130:	e7ee      	b.n	8008110 <__libc_init_array+0xc>
 8008132:	f855 3b04 	ldr.w	r3, [r5], #4
 8008136:	4798      	blx	r3
 8008138:	3601      	adds	r6, #1
 800813a:	e7f2      	b.n	8008122 <__libc_init_array+0x1e>
 800813c:	080084c4 	.word	0x080084c4
 8008140:	080084c4 	.word	0x080084c4
 8008144:	080084c4 	.word	0x080084c4
 8008148:	080084c8 	.word	0x080084c8

0800814c <__retarget_lock_acquire_recursive>:
 800814c:	4770      	bx	lr

0800814e <__retarget_lock_release_recursive>:
 800814e:	4770      	bx	lr

08008150 <memcpy>:
 8008150:	440a      	add	r2, r1
 8008152:	4291      	cmp	r1, r2
 8008154:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008158:	d100      	bne.n	800815c <memcpy+0xc>
 800815a:	4770      	bx	lr
 800815c:	b510      	push	{r4, lr}
 800815e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008166:	4291      	cmp	r1, r2
 8008168:	d1f9      	bne.n	800815e <memcpy+0xe>
 800816a:	bd10      	pop	{r4, pc}

0800816c <_free_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4605      	mov	r5, r0
 8008170:	2900      	cmp	r1, #0
 8008172:	d041      	beq.n	80081f8 <_free_r+0x8c>
 8008174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008178:	1f0c      	subs	r4, r1, #4
 800817a:	2b00      	cmp	r3, #0
 800817c:	bfb8      	it	lt
 800817e:	18e4      	addlt	r4, r4, r3
 8008180:	f000 f83e 	bl	8008200 <__malloc_lock>
 8008184:	4a1d      	ldr	r2, [pc, #116]	@ (80081fc <_free_r+0x90>)
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	b933      	cbnz	r3, 8008198 <_free_r+0x2c>
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	6014      	str	r4, [r2, #0]
 800818e:	4628      	mov	r0, r5
 8008190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008194:	f000 b83a 	b.w	800820c <__malloc_unlock>
 8008198:	42a3      	cmp	r3, r4
 800819a:	d908      	bls.n	80081ae <_free_r+0x42>
 800819c:	6820      	ldr	r0, [r4, #0]
 800819e:	1821      	adds	r1, r4, r0
 80081a0:	428b      	cmp	r3, r1
 80081a2:	bf01      	itttt	eq
 80081a4:	6819      	ldreq	r1, [r3, #0]
 80081a6:	685b      	ldreq	r3, [r3, #4]
 80081a8:	1809      	addeq	r1, r1, r0
 80081aa:	6021      	streq	r1, [r4, #0]
 80081ac:	e7ed      	b.n	800818a <_free_r+0x1e>
 80081ae:	461a      	mov	r2, r3
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	b10b      	cbz	r3, 80081b8 <_free_r+0x4c>
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d9fa      	bls.n	80081ae <_free_r+0x42>
 80081b8:	6811      	ldr	r1, [r2, #0]
 80081ba:	1850      	adds	r0, r2, r1
 80081bc:	42a0      	cmp	r0, r4
 80081be:	d10b      	bne.n	80081d8 <_free_r+0x6c>
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	4401      	add	r1, r0
 80081c4:	1850      	adds	r0, r2, r1
 80081c6:	4283      	cmp	r3, r0
 80081c8:	6011      	str	r1, [r2, #0]
 80081ca:	d1e0      	bne.n	800818e <_free_r+0x22>
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	6053      	str	r3, [r2, #4]
 80081d2:	4408      	add	r0, r1
 80081d4:	6010      	str	r0, [r2, #0]
 80081d6:	e7da      	b.n	800818e <_free_r+0x22>
 80081d8:	d902      	bls.n	80081e0 <_free_r+0x74>
 80081da:	230c      	movs	r3, #12
 80081dc:	602b      	str	r3, [r5, #0]
 80081de:	e7d6      	b.n	800818e <_free_r+0x22>
 80081e0:	6820      	ldr	r0, [r4, #0]
 80081e2:	1821      	adds	r1, r4, r0
 80081e4:	428b      	cmp	r3, r1
 80081e6:	bf04      	itt	eq
 80081e8:	6819      	ldreq	r1, [r3, #0]
 80081ea:	685b      	ldreq	r3, [r3, #4]
 80081ec:	6063      	str	r3, [r4, #4]
 80081ee:	bf04      	itt	eq
 80081f0:	1809      	addeq	r1, r1, r0
 80081f2:	6021      	streq	r1, [r4, #0]
 80081f4:	6054      	str	r4, [r2, #4]
 80081f6:	e7ca      	b.n	800818e <_free_r+0x22>
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	20003060 	.word	0x20003060

08008200 <__malloc_lock>:
 8008200:	4801      	ldr	r0, [pc, #4]	@ (8008208 <__malloc_lock+0x8>)
 8008202:	f7ff bfa3 	b.w	800814c <__retarget_lock_acquire_recursive>
 8008206:	bf00      	nop
 8008208:	2000305c 	.word	0x2000305c

0800820c <__malloc_unlock>:
 800820c:	4801      	ldr	r0, [pc, #4]	@ (8008214 <__malloc_unlock+0x8>)
 800820e:	f7ff bf9e 	b.w	800814e <__retarget_lock_release_recursive>
 8008212:	bf00      	nop
 8008214:	2000305c 	.word	0x2000305c

08008218 <_init>:
 8008218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800821a:	bf00      	nop
 800821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800821e:	bc08      	pop	{r3}
 8008220:	469e      	mov	lr, r3
 8008222:	4770      	bx	lr

08008224 <_fini>:
 8008224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008226:	bf00      	nop
 8008228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800822a:	bc08      	pop	{r3}
 800822c:	469e      	mov	lr, r3
 800822e:	4770      	bx	lr
